{"version":3,"sources":["device.js"],"names":["decider","config","ephemeral","Device","SparkPlugin","extend","children","features","FeaturesModel","collections","serviceCatalog","ServiceCollection","idAttribute","namespace","props","deviceType","intranetInactivityDuration","intranetInactivityCheckUrl","modificationTime","searchEncryptionKeyUrl","services","default","type","serviceHostMap","serviceLinks","hostCatalog","url","userId","webFileShareControl","webSocketUrl","derived","registered","deps","fn","Boolean","session","logoutTimer","lastUserActivityDate","determineService","key","serviceUrl","startsWith","resolve","substr","length","reject","Error","getServiceUrl","service","_getServiceUrl","then","isServiceUrl","getPreDiscoveryServiceUrl","preDiscoveryServices","getWebSocketUrl","useServiceCatalogUrl","uri","inferServiceFromUrl","s","replaceUrlWithCurrentHost","markUrlFailedAndGetNew","logger","info","markFailedAndCycleUrl","spark","internal","metrics","submitClientMetrics","tags","action","failedUrl","newUrl","catch","_resetAllAndRetry","resetAllAndRetry","fetchNewUrls","refresh","on","initialize","args","prototype","forEach","collectionName","model","value","options","trigger","_updateServiceCatalog","listenToAndRun","_resetLogoutTimer","listenTo","Date","now","inspect","depth","util","serialize","isPreDiscoveryService","_isService","isPreDiscoveryServiceUrl","_isServiceUrl","isService","isSpecificService","includes","target","feature","developer","get","register","body","ttl","ephemeralDeviceTTL","request","method","res","_processRegistrationSuccess","reason","statusCode","clear","defaults","resource","unregister","warn","clearTimeout","refreshTimer","set","delay","newRegistration","u","Url","parse","hosts","host","defaultUrl","availableHosts","remove","unset","enableInactivityEnforcement","once","timer","headers","trackingid","logout","oneFlight"],"mappings":"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","file":"device.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {oneFlight} from '@ciscospark/common';\nimport {safeSetTimeout} from '@ciscospark/common-timers';\nimport {omit} from 'lodash';\nimport util from 'util';\nimport FeaturesModel from './features-model';\nimport ServiceCollection from './service-collection';\nimport {persist, waitForValue, SparkPlugin} from '@ciscospark/spark-core';\nimport Url from 'url';\n\n/**\n * Decides if this device should be persisted to boundedStorage, based on\n * this.config.ephemeral.\n * @returns {Boolean}\n */\nfunction decider() {\n  return !this.config.ephemeral;\n}\n\nconst Device = SparkPlugin.extend({\n  children: {\n    features: FeaturesModel\n  },\n\n  collections: {\n    serviceCatalog: ServiceCollection\n  },\n\n  idAttribute: 'url',\n\n  namespace: 'Device',\n\n  props: {\n    // deviceType doesn't have any real value, but we need to send it during\n    // device refresh to make sure we don't get back an ios device url\n    deviceType: 'string',\n    intranetInactivityDuration: 'number',\n    intranetInactivityCheckUrl: 'string',\n    modificationTime: 'string',\n    searchEncryptionKeyUrl: 'string',\n    services: {\n      // Even though @jodykstr will tell you the docs claim you don't need to\n      // initialize `object` properties, the docs lie.\n      default() {\n        return {};\n      },\n      type: 'object'\n    },\n    serviceHostMap: {\n      default() {\n        return {\n          serviceLinks: {},\n          hostCatalog: {}\n        };\n      },\n      type: 'object'\n    },\n    url: 'string',\n    userId: 'string',\n    /**\n     * Notifies the client if file sharing is disabled.\n     * Currently, the values for it are:\n     * - BLOCK_BOTH\n     * - BLOCK_UPLOAD\n     * @instance\n     * @memberof Device\n     * @type {string}\n     */\n    webFileShareControl: 'string',\n    webSocketUrl: 'string'\n  },\n\n  derived: {\n    registered: {\n      deps: ['url'],\n      fn() {\n        return Boolean(this.url);\n      }\n    }\n  },\n\n  session: {\n    // Fun Fact: setTimeout returns a Timer object instead of a Number in Node 6\n    // or later\n    logoutTimer: 'any',\n    lastUserActivityDate: 'number'\n  },\n\n  @waitForValue('@')\n  determineService(url) {\n    for (const key of Object.keys(this.services)) {\n      const serviceUrl = this.services[key];\n      if (url.startsWith(serviceUrl)) {\n        // \"ServiceUrl\" is 10 characters\n        return Promise.resolve(key.substr(0, key.length - 10));\n      }\n    }\n\n    return Promise.reject(new Error(`${url} does not reflect a known service`));\n  },\n\n  @waitForValue('@')\n  getServiceUrl(service) {\n    return this._getServiceUrl(this.services, service)\n      .then((isServiceUrl) => isServiceUrl || this.getPreDiscoveryServiceUrl(service));\n  },\n\n  getPreDiscoveryServiceUrl(service) {\n    // The Promise.resolve here is temporary. A future PR will make the\n    // corresponding _ method async to allow for lazy device registration\n    return Promise.resolve(this._getServiceUrl(this.config.preDiscoveryServices, service));\n  },\n\n  getWebSocketUrl() {\n    return this.useServiceCatalogUrl(this.webSocketUrl);\n  },\n\n  useServiceCatalogUrl(uri) {\n    return this.serviceCatalog.inferServiceFromUrl(uri)\n      .then((s) => s.replaceUrlWithCurrentHost(uri));\n  },\n\n  markUrlFailedAndGetNew(url) {\n    if (!url) {\n      return Promise.reject(new Error('`url` is a required parameter'));\n    }\n\n    this.logger.info(`device: marking ${url} as failed`);\n    return this.serviceCatalog.markFailedAndCycleUrl(url)\n      .then((uri) => {\n        this.spark.internal.metrics.submitClientMetrics('web-ha', {\n          tags: {\n            action: 'replace_url',\n            failedUrl: url,\n            newUrl: uri\n          }\n        });\n        return uri;\n      })\n      // it's likely we fail here because we've cycled though all hosts,\n      // reset all hosts and then retry connecting\n      .catch(() => this._resetAllAndRetry(url));\n  },\n\n  _resetAllAndRetry(url) {\n    if (!url) {\n      return Promise.reject(new Error('`url` is a required parameter'));\n    }\n\n    this.logger.info(`device: reset available hosts and retry ${url}`);\n    return this.serviceCatalog.resetAllAndRetry(url);\n  },\n\n  // this function is exposed beyond the device file\n  fetchNewUrls(url) {\n    // we want to get the current service first, just in case the\n    // refreshed catalog has different host names\n    return new Promise((resolve) => this.serviceCatalog.inferServiceFromUrl(url)\n      .then((s) => {\n        this.logger.info(`device: refresh to ${s.service} get new urls`);\n        this.refresh();\n        this.on('serviceCatalogUpdated', () => resolve(s.url));\n      }));\n  },\n\n  @persist('@', decider)\n  initialize(...args) {\n    Reflect.apply(SparkPlugin.prototype.initialize, this, args);\n\n    // Propagate change(:[attribute]) events from collections\n    ['developer', 'entitlement', 'user'].forEach((collectionName) => {\n      this.features.on(`change:${collectionName}`, (model, value, options) => {\n        this.trigger('change', this, options);\n        this.trigger('change:features', this, this.features, options);\n      });\n    });\n\n    this.on('change:serviceHostMap', this._updateServiceCatalog);\n\n    this.listenToAndRun(this, 'change:intranetInactivityCheckUrl', () => this._resetLogoutTimer());\n    this.listenToAndRun(this, 'change:intranetInactivityDuration', () => this._resetLogoutTimer());\n    this.listenTo(this.spark, 'user-activity', () => { this.lastUserActivityDate = Date.now(); });\n  },\n\n  /**\n   * Don't log the features object\n   * @param {number} depth\n   * @returns {Object}\n   */\n  inspect(depth) {\n    return util.inspect(omit(this.serialize(), 'features'), {depth});\n  },\n\n  isPreDiscoveryService(service) {\n    // The Promise.resolve here is temporary. A future PR will make the\n    // corresponding _ method async to allow for lazy device registration\n    return Promise.resolve(this._isService(this.config.preDiscoveryServices, service));\n  },\n\n  isPreDiscoveryServiceUrl(uri) {\n    // The Promise.resolve here is temporary. A future PR will make the\n    // corresponding _ method async to allow for lazy device registration\n    return Promise.resolve(this._isServiceUrl(this.config.preDiscoveryServices, uri));\n  },\n\n  @waitForValue('@')\n  isService(service) {\n    return this._isService(this.services, service)\n      .then((_isService) => _isService || this.isPreDiscoveryService(service));\n  },\n\n  @waitForValue('@')\n  isServiceUrl(uri) {\n    // The Promise.resolve here is temporary. A future PR will make the\n    // corresponding _ method async to allow for lazy device registration\n    return Promise.resolve(this._isServiceUrl(this.services, uri));\n  },\n\n  @waitForValue('@')\n  isSpecificService(service, key) {\n    if (key === service) {\n      return Promise.resolve(true);\n    }\n\n    return this.getServiceUrl(service)\n      .then((serviceUrl) => key.includes(serviceUrl));\n  },\n\n  _getServiceUrl(target, service) {\n    /* istanbul ignore if */\n    if (!target) {\n      return Promise.reject(new Error('`target` is a required parameter'));\n    }\n\n    if (!service) {\n      return Promise.reject(new Error('`service` is a required parameter'));\n    }\n\n    const feature = this.features.developer.get('web-ha-messaging');\n    if (feature && feature.value) {\n      const s = this.serviceCatalog.get(`${service}ServiceUrl`);\n      if (s) {\n        return Promise.resolve(s.url);\n      }\n    }\n\n    return Promise.resolve(target[`${service}ServiceUrl`]);\n  },\n\n  _isService(target, service) {\n    return this._getServiceUrl(target, service)\n      .then((url) => Boolean(url));\n  },\n\n  _isServiceUrl(target, uri) {\n    if (!uri) {\n      return Promise.reject(new Error('`uri` is a required parameter'));\n    }\n\n    for (const value of Object.values(target)) {\n      if (value && uri.startsWith(value)) {\n        return Promise.resolve(true);\n      }\n    }\n\n    return Promise.resolve(false);\n  },\n\n  @oneFlight\n  @waitForValue('@')\n  refresh() {\n    this.logger.info('device: refreshing');\n\n    if (!this.registered) {\n      this.logger.info('device: device not registered, registering');\n      return this.register();\n    }\n\n    const body = omit(this.serialize(), 'features', 'mediaClusters');\n    if (this.config.ephemeral) {\n      body.ttl = this.config.ephemeralDeviceTTL;\n    }\n\n    return this.request({\n      method: 'PUT',\n      uri: this.url,\n      body\n    })\n      .then((res) => this._processRegistrationSuccess(res))\n      .catch((reason) => {\n        if (reason.statusCode === 404) {\n          // If we get a 404, it means the device is no longer valid and we need\n          // to register a new one.\n          this.logger.info('device: refresh failed with 404, attempting to register new device');\n          this.clear();\n          return this.register();\n        }\n        return Promise.reject(reason);\n      });\n  },\n\n  @oneFlight\n  @waitForValue('@')\n  register() {\n    /* eslint no-invalid-this: [0] */\n    this.logger.info('device: registering');\n\n    if (this.registered) {\n      this.logger.info('device: device already registered, refreshing');\n      return this.refresh();\n    }\n\n    const body = this.config.defaults;\n    if (this.config.ephemeral) {\n      body.ttl = this.config.ephemeralDeviceTTL;\n    }\n\n    return this.request({\n      method: 'POST',\n      service: 'wdm',\n      resource: 'devices',\n      body\n    })\n      .then((res) => this._processRegistrationSuccess(res));\n  },\n\n  @oneFlight\n  @waitForValue('@')\n  unregister() {\n    this.logger.info('device: unregistering');\n\n    if (!this.url) {\n      this.logger.warn('device: not registered');\n      return Promise.resolve();\n    }\n\n    return this.request({\n      uri: this.url,\n      method: 'DELETE'\n    })\n      .then(() => this.clear());\n  },\n\n  clear(...args) {\n    clearTimeout(this.refreshTimer);\n    Reflect.apply(SparkPlugin.prototype.clear, this, args);\n  },\n\n  _processRegistrationSuccess(res) {\n    this.logger.info('device: received registration payload');\n    this.set(res.body);\n    if (this.config.ephemeral) {\n      this.logger.info('device: enqueing device refresh');\n      const delay = (this.config.ephemeralDeviceTTL / 2 + 60) * 1000;\n      this.refreshTimer = safeSetTimeout(() => this.refresh(), delay);\n    }\n  },\n\n  _updateServiceCatalog(newRegistration) {\n    const feature = this.features.developer.get('web-ha-messaging');\n    if (feature && feature.value) {\n      if (newRegistration.serviceHostMap && newRegistration.serviceHostMap.hostCatalog) {\n        Object.keys(newRegistration.services).forEach((service) => {\n          const uri = newRegistration.services[service];\n          const u = Url.parse(uri);\n          const hosts = newRegistration.serviceHostMap.hostCatalog[u.host];\n          this.serviceCatalog.set({\n            service,\n            defaultUrl: uri,\n            availableHosts: hosts || []\n          }, {remove: false});\n        });\n        this.trigger('serviceCatalogUpdated');\n      }\n      else {\n        // if user has old device in localStorage, refresh device\n        this.refresh();\n      }\n    }\n  },\n\n  _resetLogoutTimer() {\n    clearTimeout(this.logoutTimer);\n    this.unset('logoutTimer');\n    if (this.config.enableInactivityEnforcement && this.intranetInactivityCheckUrl && this.intranetInactivityDuration) {\n      this.once('change:lastUserActivityDate', () => this._resetLogoutTimer());\n\n      const timer = safeSetTimeout(() => {\n        this.spark.request({\n          headers: {\n            'cisco-no-http-redirect': null,\n            'spark-user-agent': null,\n            trackingid: null\n          },\n          method: 'GET',\n          uri: this.intranetInactivityCheckUrl\n        })\n          .catch(() => {\n            this.logger.info('device: did not reach internal ping endpoint; logging out after inactivity on a public network');\n            return this.spark.logout();\n          })\n          .catch((reason) => {\n            this.logger.warn('device: logout failed', reason);\n          });\n      }, this.intranetInactivityDuration * 1000);\n\n      this.logoutTimer = timer;\n    }\n  }\n});\n\nexport default Device;\n"]}