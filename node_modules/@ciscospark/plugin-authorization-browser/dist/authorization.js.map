{"version":3,"sources":["authorization.js"],"names":["OAUTH2_CSRF_TOKEN","Authorization","SparkPlugin","extend","derived","isAuthenticating","deps","fn","isAuthorizing","session","default","type","ready","namespace","initialize","attrs","options","ret","prototype","parse","location","url","spark","getWindow","href","_checkForErrors","hash","includes","substr","querystring","state","JSON","base64","decode","tokenData","_parseHash","_cleanUrl","process","nextTick","credentials","set","supertoken","initiateLogin","csrf_token","_generateSecurityToken","config","clientType","initiateAuthorizationCodeGrant","initiateImplicitGrant","logger","info","buildLoginUrl","response_type","resolve","requestAccessTokenFromJwt","jwt","request","method","service","resource","headers","authorization","then","body","access_token","token","token_type","expires_in","expiresIn","logout","noRedirect","buildLogoutUrl","query","error","ErrorConstructor","grantErrors","select","history","replaceState","forEach","key","encode","stringify","format","uuid","v4","sessionStorage","setItem","_verifySecurityToken","undefined","parseInt","refresh_token_expires_in","sessionToken","getItem","removeItem","Error","oneFlight"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sCAAA;;;;AAIA;;AAEA;;;;AACA;;;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,oBAAoB,mBAA1B;;AAEA;;;;;;AAMA,IAAMC,gBAAgBC,uBAAYC,MAAZ,SAyGnB,2BAAc,eAAd,CAzGmB,UAwHnB,2BAAc,eAAd,CAxHmB,UAAmB;AACvCC,WAAS;AACP;;;;;;AAMAC,sBAAkB;AAChBC,YAAM,CAAC,eAAD,CADU;AAEhBC,QAFgB,gBAEX;AACH,eAAO,KAAKC,aAAZ;AACD;AAJe;AAPX,GAD8B;;AAgBvCC,WAAS;AACP;;;;;;AAMAD,mBAAe;AACbE,eAAS,KADI;AAEbC,YAAM;AAFO,KAPR;AAWPC,WAAO;AACLF,eAAS,KADJ;AAELC,YAAM;AAFD;AAXA,GAhB8B;;AAiCvCE,aAAW,aAjC4B;;AAmCvC;;;;;;;;;;AAUA;AACAC,YA9CuC,sBA8C5BC,KA9C4B,EA8CrBC,OA9CqB,EA8CZ;AAAA;;AACzB,QAAMC,MAAM,qBAAcf,uBAAYgB,SAAZ,CAAsBJ,UAApC,EAAgD,IAAhD,EAAsD,CAACC,KAAD,EAAQC,OAAR,CAAtD,CAAZ;AACA;AACA;AACA;AACA,QAAID,MAAMI,KAAN,KAAgB,KAApB,EAA2B;AACzB,WAAKP,KAAL,GAAa,IAAb;AACA,aAAOK,GAAP;AACD;AACD,QAAMG,WAAWC,cAAIF,KAAJ,CAAU,KAAKG,KAAL,CAAWC,SAAX,GAAuBH,QAAvB,CAAgCI,IAA1C,EAAgD,IAAhD,CAAjB;AACA,SAAKC,eAAL,CAAqBL,QAArB;;AAEA,QAAIM,OAAON,SAASM,IAApB;AACA,QAAI,CAACA,IAAL,EAAW;AACT,WAAKd,KAAL,GAAa,IAAb;AACA,aAAOK,GAAP;AACD;AACD,QAAIS,KAAKC,QAAL,CAAc,GAAd,CAAJ,EAAwB;AACtBD,aAAOA,KAAKE,MAAL,CAAY,CAAZ,CAAP;AACD;AACDR,aAASM,IAAT,GAAgBG,sBAAYV,KAAZ,CAAkBO,IAAlB,CAAhB;AACA,QAAIN,SAASM,IAAT,CAAcI,KAAlB,EAAyB;AACvBV,eAASM,IAAT,CAAcI,KAAd,GAAsBC,KAAKZ,KAAL,CAAWa,eAAOC,MAAP,CAAcb,SAASM,IAAT,CAAcI,KAA5B,CAAX,CAAtB;AACD;AACD,QAAMI,YAAY,KAAKC,UAAL,CAAgBf,QAAhB,CAAlB;AACA,QAAI,CAACc,SAAL,EAAgB;AACd,aAAOjB,GAAP;AACD;AACD,SAAKmB,SAAL,CAAehB,QAAf;;AAEA;AACAiB,YAAQC,QAAR,CAAiB,YAAM;AACrB,YAAKhB,KAAL,CAAWiB,WAAX,CAAuBC,GAAvB,CAA2B,EAACC,YAAYP,SAAb,EAA3B;AACA,YAAKtB,KAAL,GAAa,IAAb;AACD,KAHD;;AAKA,WAAOK,GAAP;AACD,GAnFsC;;;AAqFvC;;;;;;;AAOAyB,eA5FuC,2BA4FX;AAAA,QAAd1B,OAAc,uEAAJ,EAAI;;AAC1BA,YAAQc,KAAR,GAAgBd,QAAQc,KAAR,IAAiB,EAAjC;AACAd,YAAQc,KAAR,CAAca,UAAd,GAA2B,KAAKC,sBAAL,EAA3B;;AAEA;AACA;AACA,QAAI,KAAKC,MAAL,CAAYC,UAAZ,KAA2B,cAA/B,EAA+C;AAC7C,aAAO,KAAKC,8BAAL,CAAoC/B,OAApC,CAAP;AACD;;AAED,WAAO,KAAKgC,qBAAL,CAA2BhC,OAA3B,CAAP;AACD,GAvGsC;;AA0GvC;;;;;;;;AAQAgC,uBAlHuC,iCAkHjBhC,OAlHiB,EAkHR;AAC7B,SAAKiC,MAAL,CAAYC,IAAZ,CAAiB,+CAAjB;AACA,SAAK5B,KAAL,CAAWC,SAAX,GAAuBH,QAAvB,GAAkC,KAAKE,KAAL,CAAWiB,WAAX,CAAuBY,aAAvB,CAAqC,sBAAc,EAACC,eAAe,OAAhB,EAAd,EAAwCpC,OAAxC,CAArC,CAAlC;AACA,WAAO,kBAAQqC,OAAR,EAAP;AACD,GAtHsC;;AAyHvC;;;;;;;;AAQAN,gCAjIuC,0CAiIR/B,OAjIQ,EAiIC;AACtC,SAAKiC,MAAL,CAAYC,IAAZ,CAAiB,yDAAjB;AACA,SAAK5B,KAAL,CAAWC,SAAX,GAAuBH,QAAvB,GAAkC,KAAKE,KAAL,CAAWiB,WAAX,CAAuBY,aAAvB,CAAqC,sBAAc,EAACC,eAAe,MAAhB,EAAd,EAAuCpC,OAAvC,CAArC,CAAlC;AACA,WAAO,kBAAQqC,OAAR,EAAP;AACD,GArIsC;;AAwIvC;;;;;;;;;;;;;;;AAeAC,2BAvJuC,2CAuJN;AAAA;;AAAA,QAANC,GAAM,QAANA,GAAM;;AAC/B,WAAO,KAAKjC,KAAL,CAAWkC,OAAX,CAAmB;AACxBC,cAAQ,MADgB;AAExBC,eAAS,OAFe;AAGxBC,gBAAU,WAHc;AAIxBC,eAAS;AACPC,uBAAeN;AADR;AAJe,KAAnB,EAQJO,IARI,CAQC;AAAA,UAAEC,IAAF,SAAEA,IAAF;AAAA,aAAa;AACjBC,sBAAcD,KAAKE,KADF;AAEjBC,oBAAY,QAFK;AAGjBC,oBAAYJ,KAAKK;AAHA,OAAb;AAAA,KARD,EAaJN,IAbI,CAaC,UAACG,KAAD,EAAW;AACf,aAAK3C,KAAL,CAAWiB,WAAX,CAAuBC,GAAvB,CAA2B;AACzBC,oBAAYwB;AADa,OAA3B;AAGD,KAjBI,CAAP;AAkBD,GA1KsC;;;AA4KvC;;;;;;;;AAQAI,QApLuC,oBAoLlB;AAAA,QAAdrD,OAAc,uEAAJ,EAAI;;AACnB,QAAI,CAACA,QAAQsD,UAAb,EAAyB;AACvB,WAAKhD,KAAL,CAAWC,SAAX,GAAuBH,QAAvB,GAAkC,KAAKE,KAAL,CAAWiB,WAAX,CAAuBgC,cAAvB,CAAsCvD,OAAtC,CAAlC;AACD;AACF,GAxLsC;;;AA0LvC;;;;;;;;AAQAS,iBAlMuC,2BAkMvBL,QAlMuB,EAkMb;AACxB,QAAMoD,QAAQpD,SAASoD,KAAvB;AACA,QAAIA,SAASA,MAAMC,KAAnB,EAA0B;AACxB,UAAMC,mBAAmBC,uBAAYC,MAAZ,CAAmBJ,MAAMC,KAAzB,CAAzB;AACA,YAAM,IAAIC,gBAAJ,CAAqBF,KAArB,CAAN;AACD;AACF,GAxMsC;;;AA0MvC;;;;;;;;AAQApC,WAlNuC,qBAkN7BhB,QAlN6B,EAkNnB;AAClBA,eAAW,yBAAUA,QAAV,CAAX;AACA,QAAI,KAAKE,KAAL,CAAWC,SAAX,GAAuBsD,OAAvB,IAAkC,KAAKvD,KAAL,CAAWC,SAAX,GAAuBsD,OAAvB,CAA+BC,YAArE,EAAmF;AACjF,OACE,cADF,EAEE,YAFF,EAGE,YAHF,EAIE,eAJF,EAKE,0BALF,EAMEC,OANF,CAMU,UAACC,GAAD;AAAA,eAAS,8BAAuB5D,SAASM,IAAhC,EAAsCsD,GAAtC,CAAT;AAAA,OANV;AAOA,UAAI,CAAC,uBAAQ5D,SAASM,IAAT,CAAcI,KAAtB,CAAL,EAAmC;AACjCV,iBAASM,IAAT,CAAcI,KAAd,GAAsBE,eAAOiD,MAAP,CAAc,yBAAe,oBAAK7D,SAASM,IAAT,CAAcI,KAAnB,EAA0B,YAA1B,CAAf,CAAd,CAAtB;AACD,OAFD,MAGK;AACH,sCAAuBV,SAASM,IAAhC,EAAsC,OAAtC;AACD;AACDN,eAASM,IAAT,GAAgBG,sBAAYqD,SAAZ,CAAsB9D,SAASM,IAA/B,CAAhB;AACA,WAAKJ,KAAL,CAAWC,SAAX,GAAuBsD,OAAvB,CAA+BC,YAA/B,CAA4C,EAA5C,EAAgD,IAAhD,EAAsDzD,cAAI8D,MAAJ,CAAW/D,QAAX,CAAtD;AACD;AACF,GArOsC;;;AAuOvC;;;;;;;AAOAwB,wBA9OuC,oCA8Od;AACvB,SAAKK,MAAL,CAAYC,IAAZ,CAAiB,sCAAjB;;AAEA,QAAMe,QAAQmB,eAAKC,EAAL,EAAd;AACA,SAAK/D,KAAL,CAAWC,SAAX,GAAuB+D,cAAvB,CAAsCC,OAAtC,CAA8C,mBAA9C,EAAmEtB,KAAnE;AACA,WAAOA,KAAP;AACD,GApPsC;;;AAsPvC;;;;;;;;AAQA9B,YA9PuC,sBA8P5Bf,QA9P4B,EA8PlB;AACnB,QAAMM,OAAO,yBAAUN,SAASM,IAAnB,CAAb;AACA,QAAIA,IAAJ,EAAU;AACR,WAAK8D,oBAAL,CAA0B9D,IAA1B;AACD;AACD,QAAI,CAACA,KAAKsC,YAAV,EAAwB;AACtB,WAAKpD,KAAL,GAAa,IAAb;AACA,aAAO6E,SAAP;AACD;AACD,QAAI/D,KAAKyC,UAAT,EAAqB;AACnBzC,WAAKyC,UAAL,GAAkBuB,SAAShE,KAAKyC,UAAd,EAA0B,EAA1B,CAAlB;AACD;AACD,QAAIzC,KAAKiE,wBAAT,EAAmC;AACjCjE,WAAKiE,wBAAL,GAAgCD,SAAShE,KAAKiE,wBAAd,EAAwC,EAAxC,CAAhC;AACD;AACD,WAAOjE,IAAP;AACD,GA9QsC;;;AAgRvC;;;;;;;;;AASA8D,sBAzRuC,gCAyRlB9D,IAzRkB,EAyRZ;AACzB,QAAMkE,eAAe,KAAKtE,KAAL,CAAWC,SAAX,GAAuB+D,cAAvB,CAAsCO,OAAtC,CAA8C7F,iBAA9C,CAArB;AACA,SAAKsB,KAAL,CAAWC,SAAX,GAAuB+D,cAAvB,CAAsCQ,UAAtC,CAAiD9F,iBAAjD;AACA,QAAI,CAAC4F,YAAL,EAAmB;AACjB;AACD;;AAED,QAAI,CAAClE,KAAKI,KAAV,EAAiB;AACf,YAAM,IAAIiE,KAAJ,0BAAiCH,YAAjC,sCAAN;AACD;;AAED,QAAI,CAAClE,KAAKI,KAAL,CAAWa,UAAhB,EAA4B;AAC1B,YAAM,IAAIoD,KAAJ,0BAAiCH,YAAjC,sCAAN;AACD;;AAED,QAAM3B,QAAQvC,KAAKI,KAAL,CAAWa,UAAzB;;AAEA,QAAIsB,UAAU2B,YAAd,EAA4B;AAC1B,YAAM,IAAIG,KAAJ,iBAAwB9B,KAAxB,qCAA6D2B,YAA7D,CAAN;AACD;AACF,GA7SsC;AAAA;AAAA,CAAnB,oXAuInBI,iBAvImB,8FAAtB;;kBAgTe/F,a","file":"authorization.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\n/* eslint camelcase: [0] */\n\nimport querystring from 'querystring';\nimport url from 'url';\nimport {base64, oneFlight, whileInFlight} from '@ciscospark/common';\nimport {grantErrors, SparkPlugin} from '@ciscospark/spark-core';\nimport {cloneDeep, isEmpty, omit} from 'lodash';\nimport uuid from 'uuid';\n\nconst OAUTH2_CSRF_TOKEN = 'oauth2-csrf-token';\n\n/**\n * Browser support for OAuth2. Automatically parses the URL hash for an access\n * token\n * @class\n * @name AuthorizationBrowser\n */\nconst Authorization = SparkPlugin.extend({\n  derived: {\n    /**\n     * Alias of {@link AuthorizationBrowser#isAuthorizing}\n     * @instance\n     * @memberof AuthorizationBrowser\n     * @type {boolean}\n     */\n    isAuthenticating: {\n      deps: ['isAuthorizing'],\n      fn() {\n        return this.isAuthorizing;\n      }\n    }\n  },\n\n  session: {\n    /**\n     * Indicates if an Authorization Code exchange is inflight\n     * @instance\n     * @memberof AuthorizationBrowser\n     * @type {boolean}\n     */\n    isAuthorizing: {\n      default: false,\n      type: 'boolean'\n    },\n    ready: {\n      default: false,\n      type: 'boolean'\n    }\n  },\n\n  namespace: 'Credentials',\n\n  /**\n   * Initializer\n   * @instance\n   * @memberof AuthorizationBrowser\n   * @param {Object} attrs {@link AmpersandState}\n   * @param {boolean} attrs.parse Controls whether or not the the url should get\n   * parsed for an access token\n   * @private\n   * @returns {Authorization}\n   */\n  // eslint-disable-next-line complexity\n  initialize(attrs, options) {\n    const ret = Reflect.apply(SparkPlugin.prototype.initialize, this, [attrs, options]);\n    // Reminder, we can't do parse based on config, because config is not\n    // available until nextTick and we want to be able to throw errors found in\n    // the url.\n    if (attrs.parse === false) {\n      this.ready = true;\n      return ret;\n    }\n    const location = url.parse(this.spark.getWindow().location.href, true);\n    this._checkForErrors(location);\n\n    let hash = location.hash;\n    if (!hash) {\n      this.ready = true;\n      return ret;\n    }\n    if (hash.includes('#')) {\n      hash = hash.substr(1);\n    }\n    location.hash = querystring.parse(hash);\n    if (location.hash.state) {\n      location.hash.state = JSON.parse(base64.decode(location.hash.state));\n    }\n    const tokenData = this._parseHash(location);\n    if (!tokenData) {\n      return ret;\n    }\n    this._cleanUrl(location);\n\n    // Wait until nextTick in case `credentials` hasn't initialized yet\n    process.nextTick(() => {\n      this.spark.credentials.set({supertoken: tokenData});\n      this.ready = true;\n    });\n\n    return ret;\n  },\n\n  /**\n   * Kicks off an oauth flow\n   * @instance\n   * @memberof AuthorizationBrowser\n   * @param {Object} options\n   * @returns {Promise}\n   */\n  initiateLogin(options = {}) {\n    options.state = options.state || {};\n    options.state.csrf_token = this._generateSecurityToken();\n\n    // If we're not explicitly a confidential client, assume we're a public\n    // client\n    if (this.config.clientType === 'confidential') {\n      return this.initiateAuthorizationCodeGrant(options);\n    }\n\n    return this.initiateImplicitGrant(options);\n  },\n\n  @whileInFlight('isAuthorizing')\n  /**\n   * Kicks off the Authorization Code grant flow. Typically called via\n   * {@link AuthorizationBrowser#initiateLogin}\n   * @instance\n   * @memberof AuthorizationBrowser\n   * @param {Object} options\n   * @returns {Promise}\n   */\n  initiateImplicitGrant(options) {\n    this.logger.info('authorization: initiating implicit grant flow');\n    this.spark.getWindow().location = this.spark.credentials.buildLoginUrl(Object.assign({response_type: 'token'}, options));\n    return Promise.resolve();\n  },\n\n  @whileInFlight('isAuthorizing')\n  /**\n   * Kicks off the Implicit Code grant flow. Typically called via\n   * {@link AuthorizationBrowser#initiateLogin}\n   * @instance\n   * @memberof AuthorizationBrowser\n   * @param {Object} options\n   * @returns {Promise}\n   */\n  initiateAuthorizationCodeGrant(options) {\n    this.logger.info('authorization: initiating authorization code grant flow');\n    this.spark.getWindow().location = this.spark.credentials.buildLoginUrl(Object.assign({response_type: 'code'}, options));\n    return Promise.resolve();\n  },\n\n  @oneFlight\n  /**\n   * Requests a Cisco Spark access token for a user already authenticated into\n   * your product.\n   *\n   * Note: You'll need to supply a jwtRefreshCallback of the form\n   * `Promise<jwt> = jwtRefreshCallback(spark)` for automatic token refresh to\n   * work.\n   *\n   * @instance\n   * @memberof AuthorizationBrowser\n   * @param {Object} options\n   * @param {Object} options.jwt This is a jwt generated by your backend that\n   * identifies a user in your system\n   * @returns {Promise}\n   */\n  requestAccessTokenFromJwt({jwt}) {\n    return this.spark.request({\n      method: 'POST',\n      service: 'hydra',\n      resource: 'jwt/login',\n      headers: {\n        authorization: jwt\n      }\n    })\n      .then(({body}) => ({\n        access_token: body.token,\n        token_type: 'Bearer',\n        expires_in: body.expiresIn\n      }))\n      .then((token) => {\n        this.spark.credentials.set({\n          supertoken: token\n        });\n      });\n  },\n\n  /**\n   * Called by {@link SparkCore#logout()}. Redirects to the logout page\n   * @instance\n   * @memberof AuthorizationBrowser\n   * @param {Object} options\n   * @param {boolean} options.noRedirect if true, does not redirect\n   * @returns {Promise}\n   */\n  logout(options = {}) {\n    if (!options.noRedirect) {\n      this.spark.getWindow().location = this.spark.credentials.buildLogoutUrl(options);\n    }\n  },\n\n  /**\n   * Checks if the result of the login redirect contains an error string\n   * @instance\n   * @memberof AuthorizationBrowser\n   * @param {Object} location\n   * @private\n   * @returns {Promise}\n   */\n  _checkForErrors(location) {\n    const query = location.query;\n    if (query && query.error) {\n      const ErrorConstructor = grantErrors.select(query.error);\n      throw new ErrorConstructor(query);\n    }\n  },\n\n  /**\n   * Removes no-longer needed values from the url (access token, csrf token, etc)\n   * @instance\n   * @memberof AuthorizationBrowser\n   * @param {Object} location\n   * @private\n   * @returns {Promise}\n   */\n  _cleanUrl(location) {\n    location = cloneDeep(location);\n    if (this.spark.getWindow().history && this.spark.getWindow().history.replaceState) {\n      [\n        'access_token',\n        'token_type',\n        'expires_in',\n        'refresh_token',\n        'refresh_token_expires_in'\n      ].forEach((key) => Reflect.deleteProperty(location.hash, key));\n      if (!isEmpty(location.hash.state)) {\n        location.hash.state = base64.encode(JSON.stringify(omit(location.hash.state, 'csrf_token')));\n      }\n      else {\n        Reflect.deleteProperty(location.hash, 'state');\n      }\n      location.hash = querystring.stringify(location.hash);\n      this.spark.getWindow().history.replaceState({}, null, url.format(location));\n    }\n  },\n\n  /**\n   * Generates a CSRF token and sticks in in sessionStorage\n   * @instance\n   * @memberof AuthorizationBrowser\n   * @private\n   * @returns {Promise}\n   */\n  _generateSecurityToken() {\n    this.logger.info('authorization: generating csrf token');\n\n    const token = uuid.v4();\n    this.spark.getWindow().sessionStorage.setItem('oauth2-csrf-token', token);\n    return token;\n  },\n\n  /**\n   * Parses the url hash into an access token object\n   * @instance\n   * @memberof AuthorizationBrowser\n   * @param {Object} location\n   * @private\n   * @returns {Object}\n   */\n  _parseHash(location) {\n    const hash = cloneDeep(location.hash);\n    if (hash) {\n      this._verifySecurityToken(hash);\n    }\n    if (!hash.access_token) {\n      this.ready = true;\n      return undefined;\n    }\n    if (hash.expires_in) {\n      hash.expires_in = parseInt(hash.expires_in, 10);\n    }\n    if (hash.refresh_token_expires_in) {\n      hash.refresh_token_expires_in = parseInt(hash.refresh_token_expires_in, 10);\n    }\n    return hash;\n  },\n\n  /**\n   * Checks if the CSRF token in sessionStorage is the same as the one returned\n   * in the url.\n   * @instance\n   * @memberof AuthorizationBrowser\n   * @param {Object} hash\n   * @private\n   * @returns {Promise}\n   */\n  _verifySecurityToken(hash) {\n    const sessionToken = this.spark.getWindow().sessionStorage.getItem(OAUTH2_CSRF_TOKEN);\n    this.spark.getWindow().sessionStorage.removeItem(OAUTH2_CSRF_TOKEN);\n    if (!sessionToken) {\n      return;\n    }\n\n    if (!hash.state) {\n      throw new Error(`Expected CSRF token ${sessionToken}, but not found in redirect hash`);\n    }\n\n    if (!hash.state.csrf_token) {\n      throw new Error(`Expected CSRF token ${sessionToken}, but not found in redirect hash`);\n    }\n\n    const token = hash.state.csrf_token;\n\n    if (token !== sessionToken) {\n      throw new Error(`CSRF token ${token} does not match stored token ${sessionToken}`);\n    }\n  }\n});\n\nexport default Authorization;\n"]}