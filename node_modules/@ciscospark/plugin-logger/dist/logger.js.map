{"version":3,"sources":["logger.js"],"names":["precedence","silent","error","warn","log","info","debug","trace","levels","filter","level","fallbacks","authTokenKeyPattern","walkAndFilter","object","map","patterns","email","test","key","value","Logger","SparkPlugin","extend","namespace","derived","cache","fn","getCurrentLevel","session","buffer","type","default","args","arg","Error","process","env","NODE_ENV","inBrowser","ret","toString","stack","shouldPrint","shouldBuffer","config","includes","CISCOSPARK_LOG_LEVEL","spark","internal","device","features","developer","get","forEach","impls","impl","slice","console","pop","prototype","wrappedConsoleMethod","filtered","stringified","item","SparkHttpError","toPrint","unshift","url","Date","now","push","length","historyLength","shift","reason"],"mappings":"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","file":"logger.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {inBrowser, patterns} from '@ciscospark/common';\n\nimport {\n  SparkHttpError,\n  SparkPlugin\n} from '@ciscospark/spark-core';\n\nimport {\n  cloneDeep,\n  has,\n  isArray,\n  isObject,\n  isString\n} from 'lodash';\n\nconst precedence = {\n  silent: 0,\n  error: 1,\n  warn: 2,\n  log: 3,\n  info: 4,\n  debug: 5,\n  trace: 6\n};\n\nexport const levels = Object.keys(precedence).filter((level) => level !== 'silent');\n\nconst fallbacks = {\n  error: ['log'],\n  warn: ['error', 'log'],\n  info: ['log'],\n  debug: ['info', 'log'],\n  trace: ['debug', 'info', 'log']\n};\n\nconst authTokenKeyPattern = /[Aa]uthorization/;\n\n/**\n * Recursively strips \"authorization\" fields from the specified object\n * @param {Object} object\n * @private\n * @returns {Object}\n */\nfunction walkAndFilter(object) {\n  if (isArray(object)) {\n    return object.map(walkAndFilter);\n  }\n  if (!isObject(object)) {\n    if (isString(object)) {\n      if (patterns.email.test(object)) {\n        return '-- REDACTED --';\n      }\n    }\n    return object;\n  }\n\n  for (const [key, value] of Object.entries(object)) {\n    if (authTokenKeyPattern.test(key)) {\n      Reflect.deleteProperty(object, key);\n    }\n    else {\n      object[key] = walkAndFilter(value);\n    }\n  }\n\n  return object;\n}\n\n/**\n * @class\n */\nconst Logger = SparkPlugin.extend({\n  namespace: 'Logger',\n\n  derived: {\n    level: {\n      cache: false,\n      fn() {\n        return this.getCurrentLevel();\n      }\n    }\n  },\n  session: {\n    buffer: {\n      type: 'array',\n      default() {\n        return [];\n      }\n    }\n  },\n\n  /**\n   * Ensures auth headers don't get printed in logs\n   * @param {Array<mixed>} args\n   * @private\n   * @memberof Logger\n   * @returns {Array<mixed>}\n   */\n  filter(...args) {\n    return args.map((arg) => {\n      // SparkHttpError already ensures auth tokens don't get printed, so, no\n      // need to alter it here.\n      if (arg instanceof Error) {\n        // karma logs won't print subclassed errors correctly, so we need\n        // explicitly call their tostring methods.\n        if (process.env.NODE_ENV === 'test' && inBrowser) {\n          let ret = arg.toString();\n          ret += 'BEGIN STACK';\n          ret += arg.stack;\n          ret += 'END STACK';\n          return ret;\n        }\n\n        return arg;\n      }\n\n      arg = cloneDeep(arg);\n      return walkAndFilter(arg);\n    });\n  },\n\n  /**\n   * Determines if the current level allows logs at the specified level to be\n   * printed\n   * @param {string} level\n   * @private\n   * @memberof Logger\n   * @returns {boolean}\n   */\n  shouldPrint(level) {\n    return precedence[level] <= precedence[this.getCurrentLevel()];\n  },\n\n  /**\n   * Determines if the current level allows logs at the specified level to be\n   * put into the log buffer. We're configuring it omit trace and debug logs\n   * because there are *a lot* of debug logs that really don't provide value at\n   * runtime (they're helpful for debugging locally, but really just pollute the\n   * uploaded logs and push useful info out).\n   * @param {string} level\n   * @private\n   * @memberof Logger\n   * @returns {boolean}\n   */\n  shouldBuffer(level) {\n    return precedence[level] <= precedence.info;\n  },\n\n  /**\n   * Indicates the current log level based on env vars, feature toggles, and\n   * user type.\n   * @instance\n   * @memberof Logger\n   * @private\n   * @memberof Logger\n   * @returns {string}\n   */\n  // eslint-disable-next-line complexity\n  getCurrentLevel() {\n    // If a level has been explicitly set via config, alway use it.\n    if (this.config.level) {\n      return this.config.level;\n    }\n\n    if (levels.includes(process.env.CISCOSPARK_LOG_LEVEL)) {\n      return process.env.CISCOSPARK_LOG_LEVEL;\n    }\n\n    // Always use debug-level logging in test mode;\n    if (process.env.NODE_ENV === 'test') {\n      return 'trace';\n    }\n\n    // Use server-side-feature toggles to configure log levels\n    const level = this.spark.internal.device && this.spark.internal.device.features.developer.get('log-level');\n    if (level) {\n      if (levels.includes(level)) {\n        return level;\n      }\n    }\n\n    return 'error';\n  }\n});\n\nlevels.forEach((level) => {\n  let impls = fallbacks[level];\n  let impl = level;\n  if (impls) {\n    impls = impls.slice();\n    // eslint-disable-next-line no-console\n    while (!console[impl]) {\n      impl = impls.pop();\n    }\n  }\n\n  // Much of the complexity in the following function is due to a test-mode-only\n  // helper\n  // eslint-disable-next-line complexity\n  Logger.prototype[level] = function wrappedConsoleMethod(...args) {\n    try {\n      const shouldPrint = this.shouldPrint(level);\n      const shouldBuffer = this.shouldBuffer(level);\n      if (!shouldBuffer && !shouldPrint) {\n        return;\n      }\n\n      const filtered = this.filter(...args);\n      const stringified = filtered.map((item) => {\n        if (item instanceof SparkHttpError) {\n          return item.toString();\n        }\n        return item;\n      });\n\n      if (shouldPrint) {\n        // when logging an object in browsers, we tend to get a dynamic\n        // reference, thus going back to look at the logged value doesn't\n        // necessarily show the state at log time, thus we print the stringified\n        // value.\n        const toPrint = inBrowser ? stringified : filtered;\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV === 'test' && has(this, 'spark.internal.device.url')) {\n          toPrint.unshift(this.spark.internal.device.url.slice(-3));\n        }\n        // eslint-disable-next-line no-console\n        console[impl](...toPrint);\n      }\n\n      if (shouldBuffer) {\n        stringified.unshift(Date.now());\n        this.buffer.push(stringified);\n        if (this.buffer.length > this.config.historyLength) {\n          this.buffer.shift();\n        }\n      }\n    }\n    catch (reason) {\n      /* istanbul ignore next */\n      // eslint-disable-next-line no-console\n      console.warn(`failed to execute Logger#${level}`, reason);\n    }\n  };\n});\n\nexport default Logger;\n"]}