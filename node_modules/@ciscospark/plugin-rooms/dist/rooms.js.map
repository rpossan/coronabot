{"version":3,"sources":["rooms.js"],"names":["Rooms","SparkPlugin","extend","create","room","request","method","service","resource","body","then","res","get","options","id","qs","items","list","Page","spark","remove","statusCode","undefined","update"],"mappings":";;;;;;AAIA;;AAEA;;;;;;;;;;;AAWA;;;;;;;;AAQA,IAAMA,QAAQC,uBAAYC,MAAZ,CAAmB;AAC/B;;;;;;;;;;;;;;;;;;;;AAoBAC,QArB+B,kBAqBxBC,IArBwB,EAqBlB;AACX,WAAO,KAAKC,OAAL,CAAa;AAClBC,cAAQ,MADU;AAElBC,eAAS,OAFS;AAGlBC,gBAAU,OAHQ;AAIlBC,YAAML;AAJY,KAAb,EAMJM,IANI,CAMC,UAACC,GAAD;AAAA,aAASA,IAAIF,IAAb;AAAA,KAND,CAAP;AAOD,GA7B8B;;;AA+B/B;;;;;;;;;;;;;;;;;;;;;AAqBAG,KApD+B,eAoD3BR,IApD2B,EAoDrBS,OApDqB,EAoDZ;AACjB,QAAMC,KAAKV,KAAKU,EAAL,IAAWV,IAAtB;;AAEA,WAAO,KAAKC,OAAL,CAAa;AAClBE,eAAS,OADS;AAElBC,2BAAmBM,EAFD;AAGlBC,UAAIF;AAHc,KAAb,EAKJH,IALI,CAKC,UAACC,GAAD;AAAA,aAASA,IAAIF,IAAJ,CAASO,KAAT,IAAkBL,IAAIF,IAA/B;AAAA,KALD,CAAP;AAMD,GA7D8B;;;AA+D/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCAQ,MA/F+B,gBA+F1BJ,OA/F0B,EA+FjB;AAAA;;AACZ,WAAO,KAAKR,OAAL,CAAa;AAClBE,eAAS,OADS;AAElBC,gBAAU,QAFQ;AAGlBO,UAAIF;AAHc,KAAb,EAKJH,IALI,CAKC,UAACC,GAAD;AAAA,aAAS,IAAIO,eAAJ,CAASP,GAAT,EAAc,MAAKQ,KAAnB,CAAT;AAAA,KALD,CAAP;AAMD,GAtG8B;;;AAwG/B;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BAC,QAnI+B,kBAmIxBhB,IAnIwB,EAmIlB;AACX,QAAMU,KAAKV,KAAKU,EAAL,IAAWV,IAAtB;AACA,WAAO,KAAKC,OAAL,CAAa;AAClBC,cAAQ,QADU;AAElBC,eAAS,OAFS;AAGlBC,2BAAmBM;AAHD,KAAb,EAKJJ,IALI,CAKC,UAACC,GAAD,EAAS;AACb;AACA;AACA,UAAIA,IAAIU,UAAJ,KAAmB,GAAvB,EAA4B;AAC1B,eAAOC,SAAP;AACD;AACD,aAAOX,IAAIF,IAAX;AACD,KAZI,CAAP;AAaD,GAlJ8B;;;AAoJ/B;;;;;;;;;;;;;;;;;;;;;;;;AAwBAc,QA5K+B,kBA4KxBnB,IA5KwB,EA4KlB;AACX,QAAMU,KAAKV,KAAKU,EAAhB;AACA,WAAO,KAAKT,OAAL,CAAa;AAClBC,cAAQ,KADU;AAElBC,eAAS,OAFS;AAGlBC,2BAAmBM,EAHD;AAIlBL,YAAML;AAJY,KAAb,EAMJM,IANI,CAMC,UAACC,GAAD;AAAA,aAASA,IAAIF,IAAb;AAAA,KAND,CAAP;AAOD,GArL8B;AAAA;AAAA,CAAnB,CAAd,C,CAzBA;;;;kBAiNeT,K","file":"rooms.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {SparkPlugin, Page} from '@ciscospark/spark-core';\n\n/**\n * @typedef {Object} RoomObject\n * @property {string} id - (server generated) Unique identifier for the room\n * @property {string} title - The display name for the room. All room members\n * will see the title so make it something good\n * @property {string} teamId - (optional) The ID of the team to which the room\n * belongs\n * @property {isoDate} created - (server generated) The date and time that the\n * room was created\n */\n\n/**\n * Rooms are virtual meeting places for getting stuff done. This resource\n * represents the room itself. Check out the {@link Memberships} API to learn\n * how to add and remove people from rooms and the {@link Messages} API for\n * posting and managing content.\n * @class\n * @name Rooms\n */\nconst Rooms = SparkPlugin.extend({\n  /**\n   * Creates a new room. The authenticated user is automatically added as a\n   * member of the room. See the {@link Memberships} API to learn how to add\n   * more people to the room.\n   * @instance\n   * @memberof Rooms\n   * @param {RoomObject} room\n   * @returns {Promise<RoomObject>}\n   * @example\n   * ciscospark.rooms.create({title: 'Create Room Example'})\n   *   .then(function(room) {\n   *     var assert = require('assert')\n   *     assert(typeof room.created === 'string');\n   *     assert(typeof room.id === 'string');\n   *     assert(room.title === 'Create Room Example');\n   *     console.log(room.title);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create(room) {\n    return this.request({\n      method: 'POST',\n      service: 'hydra',\n      resource: 'rooms',\n      body: room\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Returns a single room.\n   * @instance\n   * @memberof Rooms\n   * @param {RoomObject|string} room\n   * @param {Object} options\n   * @returns {Promise<RoomObject>}\n   * @example\n   * var room;\n   * ciscospark.rooms.create({title: 'Get Room Example'})\n   *   .then(function(r) {\n   *     room = r\n   *     return ciscospark.rooms.get(room.id)\n   *   })\n   *   .then(function(r) {\n   *     var assert = require('assert');\n   *     assert.deepEqual(r, room);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get(room, options) {\n    const id = room.id || room;\n\n    return this.request({\n      service: 'hydra',\n      resource: `rooms/${id}`,\n      qs: options\n    })\n      .then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * Returns a list of rooms. In most cases the results will only contain rooms\n   * that the authentiated user is a member of.\n   * @instance\n   * @memberof Rooms\n   * @param {Object} options\n   * @param {Object} options.max Limit the maximum number of rooms in the\n   * response.\n   * @returns {Promise<Page<RoomObject>>}\n   * @example\n   * var createdRooms;\n   * Promise.all([\n   *   ciscospark.rooms.create({title: 'List Rooms Example 1'}),\n   *   ciscospark.rooms.create({title: 'List Rooms Example 2'}),\n   *   ciscospark.rooms.create({title: 'List Rooms Example 3'})\n   * ])\n   *   .then(function(r) {\n   *     createdRooms = r;\n   *     return ciscospark.rooms.list({max: 3})\n   *       .then(function(rooms) {\n   *         var assert = require('assert');\n   *         assert(rooms.length === 3);\n   *         for (var i = 0; i < rooms.items.length; i+= 1) {\n   *           assert(createdRooms.filter(function(room) {\n   *             return room.id === rooms.items[i].id;\n   *           }).length === 1);\n   *         }\n   *         return 'success';\n   *       });\n   *   });\n   *   // => success\n   */\n  list(options) {\n    return this.request({\n      service: 'hydra',\n      resource: 'rooms/',\n      qs: options\n    })\n      .then((res) => new Page(res, this.spark));\n  },\n\n  /**\n   * Deletes a single room.\n   * @instance\n   * @memberof Rooms\n   * @param {RoomObject|string} room\n   * @returns {Promise}\n   * @example\n   * var room;\n   * ciscospark.rooms.create({title: 'Remove Room Example'})\n   *  .then(function(r) {\n   *    room = r;\n   *    return ciscospark.rooms.remove(room.id);\n   *  })\n   *  .then(function() {\n   *    return ciscospark.rooms.get(room.id);\n   *  })\n   *  .then(function() {\n   *    var assert = require('assert');\n   *    assert(false, 'the previous get should have failed');\n   *  })\n   *  .catch(function(reason) {\n   *    var assert = require('assert');\n   *    assert.equal(reason.statusCode, 404);\n   *    return 'success'\n   *  });\n   *  // => success\n   */\n  remove(room) {\n    const id = room.id || room;\n    return this.request({\n      method: 'DELETE',\n      service: 'hydra',\n      resource: `rooms/${id}`\n    })\n      .then((res) => {\n        // Firefox has some issues with 204s and/or DELETE. This should move to\n        // http-core\n        if (res.statusCode === 204) {\n          return undefined;\n        }\n        return res.body;\n      });\n  },\n\n  /**\n   * Used to update a single room's properties.\n   * @instance\n   * @memberof Rooms\n   * @param {RoomObject} room\n   * @returns {Promise<RoomObject>}\n   * @example\n   * var room;\n   * ciscospark.rooms.create({title: 'Update Room Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     room.title = 'Update Room Example (Updated Title)';\n   *     return ciscospark.rooms.update(room);\n   *   })\n   *   .then(function() {\n   *     return ciscospark.rooms.get(room.id);\n   *   })\n   *   .then(function(room) {\n   *    var assert = require('assert');\n   *     assert.equal(room.title, 'Update Room Example (Updated Title)');\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  update(room) {\n    const id = room.id;\n    return this.request({\n      method: 'PUT',\n      service: 'hydra',\n      resource: `rooms/${id}`,\n      body: room\n    })\n      .then((res) => res.body);\n  }\n});\n\nexport default Rooms;\n"]}