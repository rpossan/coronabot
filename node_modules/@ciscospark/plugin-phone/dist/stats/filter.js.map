{"version":3,"sources":["filter.js"],"names":["StatsFilter","objectMode","report","encoding","callback","incomingAudio","local","remote","incomingVideo","outgoingAudio","outgoingVideo","values","item","includes","type","isRemote","mediaType","get","remoteId","push","Transform"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAEA;;;IAGqBA,W;;;AACnB;;;;AAIA,yBAAc;AAAA;AAAA,2IACN,EAACC,YAAY,IAAb,EADM;AAEb;;AAED;;;;;;;;;;;;+BAQWC,M,EAAQC,Q,EAAUC,Q,EAAU;AACrC,UAAI,CAACF,MAAL,EAAa;AACXE;AACA;AACD;;AAED,UAAMC,gBAAgB;AACpBC,eAAO,IADa;AAEpBC,gBAAQ;AAFY,OAAtB;AAIA,UAAMC,gBAAgB;AACpBF,eAAO,IADa;AAEpBC,gBAAQ;AAFY,OAAtB;AAIA,UAAME,gBAAgB;AACpBH,eAAO,IADa;AAEpBC,gBAAQ;AAFY,OAAtB;AAIA,UAAMG,gBAAgB;AACpBJ,eAAO,IADa;AAEpBC,gBAAQ;AAFY,OAAtB;;AAlBqC;AAAA;AAAA;;AAAA;AAuBrC,wDAAmBL,OAAOS,MAAP,EAAnB,4GAAoC;AAAA,cAAzBC,IAAyB;;AAClC,cAAI,CAAC,cAAD,EAAiB,aAAjB,EAAgCC,QAAhC,CAAyCD,KAAKE,IAA9C,KAAuD,CAACF,KAAKG,QAAjE,EAA2E;AACzE,gBAAIH,KAAKI,SAAL,KAAmB,OAAvB,EAAgC;AAC9BP,4BAAcH,KAAd,GAAsBM,IAAtB;AACAH,4BAAcF,MAAd,GAAuBL,OAAOe,GAAP,CAAWL,KAAKM,QAAhB,CAAvB;AACD;;AAED,gBAAIN,KAAKI,SAAL,KAAmB,OAAvB,EAAgC;AAC9BN,4BAAcJ,KAAd,GAAsBM,IAAtB;AACAF,4BAAcH,MAAd,GAAuBL,OAAOe,GAAP,CAAWL,KAAKM,QAAhB,CAAvB;AACD;AACF;;AAED,cAAI,CAAC,aAAD,EAAgB,YAAhB,EAA8BL,QAA9B,CAAuCD,KAAKE,IAA5C,KAAqD,CAACF,KAAKG,QAA/D,EAAyE;AACvE,gBAAIH,KAAKI,SAAL,KAAmB,OAAvB,EAAgC;AAC9BX,4BAAcC,KAAd,GAAsBM,IAAtB;AACAP,4BAAcE,MAAd,GAAuBL,OAAOe,GAAP,CAAWL,KAAKM,QAAhB,CAAvB;AACD;;AAED,gBAAIN,KAAKI,SAAL,KAAmB,OAAvB,EAAgC;AAC9BR,4BAAcF,KAAd,GAAsBM,IAAtB;AACAJ,4BAAcD,MAAd,GAAuBL,OAAOe,GAAP,CAAWL,KAAKM,QAAhB,CAAvB;AACD;AACF;AACF;AA/CoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiDrC,WAAKC,IAAL,CAAU;AACRd,oCADQ;AAERG,oCAFQ;AAGRC,oCAHQ;AAIRC,oCAJQ;AAKRR;AALQ,OAAV;;AAQAE;AACD;;;EA3EsCgB,iB;;kBAApBpB,W","file":"filter.js","sourcesContent":["import {Transform} from 'stream';\n\n/**\n * Reforms the interesting data from an RTCStatsReport into something grokkable\n */\nexport default class StatsFilter extends Transform {\n  /**\n   * Tells the Stream we're operating in objectMode\n   * @private\n   */\n  constructor() {\n    super({objectMode: true});\n  }\n\n  /**\n   * Filters out just the interesting part of a RTCStatsReport\n   * @param {RTCStatsReport} report\n   * @param {*} encoding\n   * @param {Function} callback\n   * @private\n   * @returns {undefined}\n   */\n  _transform(report, encoding, callback) {\n    if (!report) {\n      callback();\n      return;\n    }\n\n    const incomingAudio = {\n      local: null,\n      remote: null\n    };\n    const incomingVideo = {\n      local: null,\n      remote: null\n    };\n    const outgoingAudio = {\n      local: null,\n      remote: null\n    };\n    const outgoingVideo = {\n      local: null,\n      remote: null\n    };\n\n    for (const item of report.values()) {\n      if (['outbound-rtp', 'outboundrtp'].includes(item.type) && !item.isRemote) {\n        if (item.mediaType === 'audio') {\n          outgoingAudio.local = item;\n          outgoingAudio.remote = report.get(item.remoteId);\n        }\n\n        if (item.mediaType === 'video') {\n          outgoingVideo.local = item;\n          outgoingVideo.remote = report.get(item.remoteId);\n        }\n      }\n\n      if (['inbound-rtp', 'inboundrtp'].includes(item.type) && !item.isRemote) {\n        if (item.mediaType === 'audio') {\n          incomingAudio.local = item;\n          incomingAudio.remote = report.get(item.remoteId);\n        }\n\n        if (item.mediaType === 'video') {\n          incomingVideo.local = item;\n          incomingVideo.remote = report.get(item.remoteId);\n        }\n      }\n    }\n\n    this.push({\n      incomingAudio,\n      incomingVideo,\n      outgoingAudio,\n      outgoingVideo,\n      report\n    });\n\n    callback();\n  }\n}\n"]}