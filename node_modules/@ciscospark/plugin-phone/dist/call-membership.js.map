{"version":3,"sources":["call-membership.js"],"names":["CallMembership","AmpState","extend","idAttribute","props","_id","required","type","isSelf","default","isInitiator","personId","personUuid","require","state","values","audioMuted","videoMuted"],"mappings":";;;;;;AAAA;;;;;;AAEA;;;AAGA,IAAMA,iBAAiBC,yBAASC,MAAT,CAAgB;AACrCC,eAAa,KADwB;;AAGrCC,SAAO;AACL;;;;;;;;AAQAC,SAAK;AACHC,gBAAU,IADP;AAEHC,YAAM;AAFH,KATA;;AAcL;;;;;;;;AAQAC,YAAQ;AACNC,eAAS,KADH;AAENF,YAAM;AAFA,KAtBH;;AA2BL;;;;;;;AAOAG,iBAAa;AACXD,eAAS,KADE;AAEXH,gBAAU,IAFC;AAGXC,YAAM;AAHK,KAlCR;;AAwCL;;;;;;AAMAI,cAAU;AACRJ,YAAM;AADE,KA9CL;;AAkDL;;;;;;;;AAQAK,gBAAY;AACVC,eAAS,IADC;AAEVN,YAAM;AAFI,KA1DP;;AA+DL;;;;;;;;;;;;AAYAO,WAAO;AACLR,gBAAU,IADL;AAELC,YAAM,QAFD;AAGLQ,cAAQ,CACN,UADM,EAEN,WAFM,EAGN,UAHM,EAIN,cAJM,EAKN,SALM;AAHH,KA3EF;;AAuFL;;;;;;;AAOAC,gBAAY;AACVP,eAAS,KADC;AAEVF,YAAM;AAFI,KA9FP;;AAmGL;;;;;;;AAOAU,gBAAY;AACVR,eAAS,KADC;AAEVF,YAAM;AAFI;AA1GP;AAH8B,CAAhB,CAAvB;;kBAoHeP,c","file":"call-membership.js","sourcesContent":["import AmpState from 'ampersand-state';\n\n/**\n * @class\n */\nconst CallMembership = AmpState.extend({\n  idAttribute: '_id',\n\n  props: {\n    /**\n     * Internal identifier for keeping track of memberships. Will be replaced at\n     * some future point with a proper {@link CallMembership#id} field.\n     * @instance\n     * @memberof CallMembership\n     * @private\n     * @readonly\n     */\n    _id: {\n      required: true,\n      type: 'string'\n    },\n\n    /**\n     * Indicates if the member is the current user. (mostly just to simplify\n     * searching the CallMemberships array)\n     * @instance\n     * @memberof CallMembership\n     * @private\n     * @readonly\n     */\n    isSelf: {\n      default: false,\n      type: 'boolean'\n    },\n\n    /**\n     * Indicates if the member started the call\n     * @instance\n     * @memberof CallMembership\n     * @type {boolean}\n     * @readonly\n     */\n    isInitiator: {\n      default: false,\n      required: true,\n      type: 'boolean'\n    },\n\n    /**\n     * @instance\n     * @memberof CallMembership\n     * @type {string}\n     * @readonly\n     */\n    personId: {\n      type: 'string'\n    },\n\n    /**\n     * Mostly here for testing and potentially for widget support. Do not use.\n     * @instance\n     * @memberof CallMembership\n     * @private\n     * @type {string}\n     * @readonly\n     */\n    personUuid: {\n      require: true,\n      type: 'string'\n    },\n\n    /**\n     * Indicates the member's relationship with the call. One of\n     * - notified - the party has been invited to the call but has not yet accepted\n     * - connected - the party is participating in the call\n     * - declined - the party chose not to accept the call\n     * - disconnected - the party is no longer participating in the call\n     * - waiting - reserved for future use\n     * @instance\n     * @memberof CallMembership\n     * @type {string}\n     * @readonly\n     */\n    state: {\n      required: true,\n      type: 'string',\n      values: [\n        'notified',\n        'connected',\n        'declined',\n        'disconnected',\n        'waiting'\n      ]\n    },\n\n    /**\n     * Indicates if the member has muted their microphone\n     * @instance\n     * @memberof CallMembership\n     * @type {boolean}\n     * @readonly\n     */\n    audioMuted: {\n      default: false,\n      type: 'boolean'\n    },\n\n    /**\n     * Indicates if the member has disable their camera\n     * @instance\n     * @memberof CallMembership\n     * @type {boolean}\n     * @readonly\n     */\n    videoMuted: {\n      default: false,\n      type: 'boolean'\n    }\n  }\n});\n\nexport default CallMembership;\n"]}