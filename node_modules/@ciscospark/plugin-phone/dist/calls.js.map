{"version":3,"sources":["calls.js"],"names":["Calls","AmpCollection","extend","model","Call","mainIndex","indexes","initialize","args","prototype","on","call","listenTo","config","enableExperimentalGroupCallingSupport","state","remove","status","has","locus","found","get","url","fullState","lastActive","replaces","replaced","locusUrl"],"mappings":";;;;;;;;;;;;;;AAIA;;;;AAEA;;;;;;AANA;;;;AAQA,IAAMA,QAAQC,8BAAcC,MAAd,CAAqB;AACjCC,SAAOC,cAD0B;;AAGjCC,aAAW,gBAHsB;;AAKjCC,WAAS,CACP,eADO,CALwB;;AASjC;;;;;;;AAOAC,YAhBiC,wBAgBb;AAAA;;AAAA,sCAANC,IAAM;AAANA,UAAM;AAAA;;AAClB,yBAAcP,8BAAcQ,SAAd,CAAwBF,UAAtC,EAAkD,IAAlD,EAAwDC,IAAxD;;AAEA,SAAKE,EAAL,CAAQ,KAAR,EAAe,UAACC,IAAD,EAAU;AACvB,YAAKC,QAAL,CAAcD,IAAd,EAAoB,cAApB,EAAoC,YAAM;AACxC,YAAIA,KAAKE,MAAL,CAAYC,qCAAhB,EAAuD;AACrD,cAAIH,KAAKI,KAAL,KAAe,UAAnB,EAA+B;AAC7B,kBAAKC,MAAL,CAAYL,IAAZ;AACD;AACF,SAJD,MAKK,IAAIA,KAAKM,MAAL,KAAgB,cAApB,EAAoC;AACvC,gBAAKD,MAAL,CAAYL,IAAZ;AACD;AACF,OATD;AAUD,KAXD;AAYD,GA/BgC;;;AAiCjC;;;;;AAKAO,KAtCiC,eAsC7BC,KAtC6B,EAsCtB;AACT,QAAMC,QAAQ,KAAKC,GAAL,CAAYF,MAAMG,GAAlB,SAAyBH,MAAMI,SAAN,CAAgBC,UAAzC,CAAd;AACA,QAAIJ,KAAJ,EAAW;AACT,aAAO,IAAP;AACD;;AAED,QAAID,MAAMM,QAAV,EAAoB;AAAA;AAAA;AAAA;;AAAA;AAClB,wDAAuBN,MAAMM,QAA7B,4GAAuC;AAAA,cAA5BC,QAA4B;;AACrC,cAAI,KAAKL,GAAL,CAAYK,SAASC,QAArB,SAAiCD,SAASF,UAA1C,CAAJ,EAA6D;AAC3D,mBAAO,IAAP;AACD;AACF;AALiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMnB;AACD,WAAO,KAAP;AACD;AApDgC,CAArB,CAAd;;kBAuDexB,K","file":"calls.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport AmpCollection from 'ampersand-collection';\n\nimport Call from './call';\n\nconst Calls = AmpCollection.extend({\n  model: Call,\n\n  mainIndex: 'internalCallId',\n\n  indexes: [\n    'correlationId'\n  ],\n\n  /**\n   * Initializer\n   * @private\n   * @param {Object} attrs\n   * @param {Object} options\n   * @returns {undefined}\n   */\n  initialize(...args) {\n    Reflect.apply(AmpCollection.prototype.initialize, this, args);\n\n    this.on('add', (call) => {\n      this.listenTo(call, 'change:state', () => {\n        if (call.config.enableExperimentalGroupCallingSupport) {\n          if (call.state === 'inactive') {\n            this.remove(call);\n          }\n        }\n        else if (call.status === 'disconnected') {\n          this.remove(call);\n        }\n      });\n    });\n  },\n\n  /**\n   * Indicates if this collection already contains the specified locus\n   * @param {Types~Locus} locus\n   * @returns {boolean}\n   */\n  has(locus) {\n    const found = this.get(`${locus.url}_${locus.fullState.lastActive}`);\n    if (found) {\n      return true;\n    }\n\n    if (locus.replaces) {\n      for (const replaced of locus.replaces) {\n        if (this.get(`${replaced.locusUrl}_${replaced.lastActive}`)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n});\n\nexport default Calls;\n"]}