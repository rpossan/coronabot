{"version":3,"sources":["authorization.js"],"names":["Authorization","SparkPlugin","extend","derived","isAuthenticating","deps","fn","isAuthorizing","session","default","type","namespace","logout","options","spark","request","method","uri","config","logoutUrl","body","token","cisService","service","requestAuthorizationCodeGrant","logger","info","code","reject","Error","tokenUrl","form","grant_type","redirect_uri","self_contained_token","auth","user","client_id","pass","client_secret","sendImmediately","shouldRefreshAccessToken","then","res","credentials","set","supertoken","catch","statusCode","ErrorConstructor","grantErrors","select","error","_res","requestAccessTokenFromJwt","jwt","resource","headers","authorization","access_token","token_type","expires_in","expiresIn","oneFlight"],"mappings":"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","file":"authorization.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\n/* eslint camelcase: [0] */\n\nimport {oneFlight, whileInFlight} from '@ciscospark/common';\nimport {grantErrors, SparkPlugin} from '@ciscospark/spark-core';\n\n/**\n * NodeJS support for OAuth2\n * @class\n * @name AuthorizationNode\n */\nconst Authorization = SparkPlugin.extend({\n  derived: {\n    /**\n     * Alias of {@link AuthorizationNode#isAuthorizing}\n     * @instance\n     * @memberof AuthorizationNode\n     * @type {boolean}\n     */\n    isAuthenticating: {\n      deps: ['isAuthorizing'],\n      fn() {\n        return this.isAuthorizing;\n      }\n    }\n  },\n\n  session: {\n    /**\n     * Indicates if an Authorization Code exchange is inflight\n     * @instance\n     * @memberof AuthorizationNode\n     * @type {boolean}\n     */\n    isAuthorizing: {\n      default: false,\n      type: 'boolean'\n    }\n  },\n\n  namespace: 'Credentials',\n\n  logout(options = {}) {\n    this.spark.request({\n      method: 'POST',\n      uri: this.config.logoutUrl,\n      body: {\n        token: options.token,\n        cisService: this.config.service\n      }\n    });\n  },\n\n  @whileInFlight('isAuthorizing')\n  @oneFlight\n  /**\n   * Exchanges an authorization code for an access token\n   * @instance\n   * @memberof AuthorizationNode\n   * @param {Object} options\n   * @param {Object} options.code\n   * @returns {Promise}\n   */\n  requestAuthorizationCodeGrant(options = {}) {\n    this.logger.info('credentials: requesting authorization code grant');\n\n    if (!options.code) {\n      return Promise.reject(new Error('`options.code` is required'));\n    }\n\n    return this.spark.request({\n      method: 'POST',\n      uri: this.config.tokenUrl,\n      form: {\n        grant_type: 'authorization_code',\n        redirect_uri: this.config.redirect_uri,\n        code: options.code,\n        self_contained_token: true\n      },\n      auth: {\n        user: this.config.client_id,\n        pass: this.config.client_secret,\n        sendImmediately: true\n      },\n      shouldRefreshAccessToken: false\n    })\n      .then((res) => {\n        this.spark.credentials.set({supertoken: res.body});\n      })\n      .catch((res) => {\n        if (res.statusCode !== 400) {\n          return Promise.reject(res);\n        }\n\n        const ErrorConstructor = grantErrors.select(res.body.error);\n        return Promise.reject(new ErrorConstructor(res._res || res));\n      });\n  },\n\n  @oneFlight\n  /**\n   * Requests a Cisco Spark access token for a user already authenticated into\n   * your product.\n   *\n   * Note: You'll need to supply a jwtRefreshCallback of the form\n   * `Promise<jwt> = jwtRefreshCallback(spark)` for automatic token refresh to\n   * work.\n   *\n   * @instance\n   * @memberof AuthorizationNode\n   * @param {Object} options\n   * @param {Object} options.jwt This is a jwt generated by your backend that\n   * identifies a user in your system\n   * @returns {Promise}\n   */\n  requestAccessTokenFromJwt({jwt}) {\n    return this.spark.request({\n      method: 'POST',\n      service: 'hydra',\n      resource: 'jwt/login',\n      headers: {\n        authorization: jwt\n      }\n    })\n      .then(({body}) => ({\n        access_token: body.token,\n        token_type: 'Bearer',\n        expires_in: body.expiresIn\n      }))\n      .then((token) => {\n        this.spark.credentials.set({\n          supertoken: token\n        });\n      });\n  }\n});\n\nexport default Authorization;\n"]}