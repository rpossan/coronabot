{"version":3,"sources":["metrics.js"],"names":["Metrics","SparkPlugin","extend","children","batcher","Batcher","clientMetricsBatcher","ClientMetricsBatcher","callDiagnosticEventsBatcher","CallDiagnosticEventsBatcher","namespace","sendUnstructured","key","value","submit","request","submitClientMetrics","eventName","props","preLoginId","payload","metricName","tags","fields","type","timestamp","Date","now","_payload","metrics","postPreLoginMetric","aliasUser","method","api","resource","headers","body","qs","alias","spark","credentials","getClientToken","then","token","authorization","toString","submitCallDiagnosticEvents","event","eventPayload"],"mappings":";;;;;;;;;;;;;;+BAAA;;;;AAIA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,UAAUC,uBAAYC,MAAZ,SASb,wBAAW,uEAAX,CATa,UAAmB;AACjCC,YAAU;AACRC,aAASC,iBADD;AAERC,0BAAsBC,8BAFd;AAGRC,iCAA6BC;AAHrB,GADuB;;AAOjCC,aAAW,SAPsB;;AAUjCC,kBAViC,4BAUhBC,GAVgB,EAUXC,KAVW,EAUJ;AAC3B,WAAO,KAAKC,MAAL,CAAYF,GAAZ,EAAiBC,KAAjB,CAAP;AACD,GAZgC;AAcjCC,QAdiC,kBAc1BF,GAd0B,EAcrBC,KAdqB,EAcd;AACjB,WAAO,KAAKT,OAAL,CAAaW,OAAb,CAAqB,sBAAc,EAACH,QAAD,EAAd,EAAqBC,KAArB,CAArB,CAAP;AACD,GAhBgC;;;AAkBjC;;;;;;;AAOAG,qBAzBiC,+BAyBbC,SAzBa,EAyBFC,KAzBE,EAyBKC,UAzBL,EAyBiB;AAChD,QAAMC,UAAU,EAACC,YAAYJ,SAAb,EAAhB;AACA,QAAIC,MAAMI,IAAV,EAAgB;AACdF,cAAQE,IAAR,GAAeJ,MAAMI,IAArB;AACD;AACD,QAAIJ,MAAMK,MAAV,EAAkB;AAChBH,cAAQG,MAAR,GAAiBL,MAAMK,MAAvB;AACD;AACD,QAAIL,MAAMM,IAAV,EAAgB;AACdJ,cAAQI,IAAR,GAAeN,MAAMM,IAArB;AACD;AACDJ,YAAQK,SAAR,GAAoBC,KAAKC,GAAL,EAApB;AACA,QAAIR,UAAJ,EAAgB;AACd,UAAMS,WAAW;AACfC,iBAAS,CACPT,OADO;AADM,OAAjB;AAKA;AACA;AACA;AACA,aAAO,KAAKU,kBAAL,CAAwBF,QAAxB,EAAkCT,UAAlC,CAAP;AACD;AACD,WAAO,KAAKb,oBAAL,CAA0BS,OAA1B,CAAkCK,OAAlC,CAAP;AACD,GAjDgC;;;AAoDjC;;;;;AAKAW,WAzDiC,qBAyDvBZ,UAzDuB,EAyDX;AACpB,WAAO,KAAKJ,OAAL,CAAa;AAClBiB,cAAQ,MADU;AAElBC,WAAK,SAFa;AAGlBC,gBAAU,eAHQ;AAIlBC,eAAS;AACP,6BAAqBhB;AADd,OAJS;AAOlBiB,YAAM,EAPY;AAQlBC,UAAI;AACFC,eAAO;AADL;AARc,KAAb,CAAP;AAYD,GAtEgC;AAwEjCR,oBAxEiC,8BAwEdV,OAxEc,EAwELD,UAxEK,EAwEO;AAAA;;AACtC,WAAO,KAAKoB,KAAL,CAAWC,WAAX,CAAuBC,cAAvB,GACJC,IADI,CACC,UAACC,KAAD;AAAA,aAAW,MAAK5B,OAAL,CAAa;AAC5BiB,gBAAQ,MADoB;AAE5BC,aAAK,SAFuB;AAG5BC,kBAAU,wBAHkB;AAI5BC,iBAAS;AACPS,yBAAeD,MAAME,QAAN,EADR;AAEP,+BAAqB1B;AAFd,SAJmB;AAQ5BiB,cAAMhB;AARsB,OAAb,CAAX;AAAA,KADD,CAAP;AAWD,GApFgC;AAsFjC0B,4BAtFiC,sCAsFN1B,OAtFM,EAsFG;AAClC,QAAM2B,QAAQ;AACZvB,YAAM,kBADM;AAEZwB,oBAAc5B;AAFF,KAAd;AAIA,WAAO,KAAKZ,2BAAL,CAAiCO,OAAjC,CAAyCgC,KAAzC,CAAP;AACD,GA5FgC;AAAA;AAAA,CAAnB,iJAAhB;;kBAgGe/C,O","file":"metrics.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {SparkPlugin} from '@ciscospark/spark-core';\nimport Batcher from './batcher';\nimport ClientMetricsBatcher from './client-metrics-batcher';\nimport CallDiagnosticEventsBatcher from './call-diagnostic-events-batcher';\nimport {deprecated} from '@ciscospark/common';\n\nconst Metrics = SparkPlugin.extend({\n  children: {\n    batcher: Batcher,\n    clientMetricsBatcher: ClientMetricsBatcher,\n    callDiagnosticEventsBatcher: CallDiagnosticEventsBatcher\n  },\n\n  namespace: 'Metrics',\n\n  @deprecated('Metrics#sendUnstructured() is deprecated; please use Metrics#submit()')\n  sendUnstructured(key, value) {\n    return this.submit(key, value);\n  },\n\n  submit(key, value) {\n    return this.batcher.request(Object.assign({key}, value));\n  },\n\n  /**\n   * This corresponds to #sendSemiStructured() in the deprecated metrics handler\n   * @param {string} eventName\n   * @param {Object} props\n   * @param {string} preLoginId\n   * @returns {Object} HttpResponse object\n   */\n  submitClientMetrics(eventName, props, preLoginId) {\n    const payload = {metricName: eventName};\n    if (props.tags) {\n      payload.tags = props.tags;\n    }\n    if (props.fields) {\n      payload.fields = props.fields;\n    }\n    if (props.type) {\n      payload.type = props.type;\n    }\n    payload.timestamp = Date.now();\n    if (preLoginId) {\n      const _payload = {\n        metrics: [\n          payload\n        ]\n      };\n      // Do not batch these because pre-login events occur during onboarding, so we will be partially blind\n      // to users' progress through the reg flow if we wait to persist pre-login metrics for people who drop off because\n      // their metrics will not post from a queue flush in time\n      return this.postPreLoginMetric(_payload, preLoginId);\n    }\n    return this.clientMetricsBatcher.request(payload);\n  },\n\n\n  /**\n   * Issue request to alias a user's pre-login ID with their CI UUID\n   * @param {string} preLoginId\n   * @returns {Object} HttpResponse object\n   */\n  aliasUser(preLoginId) {\n    return this.request({\n      method: 'POST',\n      api: 'metrics',\n      resource: 'clientmetrics',\n      headers: {\n        'x-prelogin-userid': preLoginId\n      },\n      body: {},\n      qs: {\n        alias: true\n      }\n    });\n  },\n\n  postPreLoginMetric(payload, preLoginId) {\n    return this.spark.credentials.getClientToken()\n      .then((token) => this.request({\n        method: 'POST',\n        api: 'metrics',\n        resource: 'clientmetrics-prelogin',\n        headers: {\n          authorization: token.toString(),\n          'x-prelogin-userid': preLoginId\n        },\n        body: payload\n      }));\n  },\n\n  submitCallDiagnosticEvents(payload) {\n    const event = {\n      type: 'diagnostic-event',\n      eventPayload: payload\n    };\n    return this.callDiagnosticEventsBatcher.request(event);\n  }\n\n});\n\nexport default Metrics;\n"]}