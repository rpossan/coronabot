{"version":3,"sources":["http-error.js"],"names":["HttpError","res","body","message","JSON","parse","parseObject","err","defaultMessage","enumerable","value","httpVersion","headers","rawHeaders","trailers","rawTrailers","method","url","statusCode","statusMessage","socket","_res","messages","errorKeys","length","Exception","makeSubTypes"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mBAAA;;;;AAKA;;AACA;;;;;;AAEA;;;;IAIqBA,S;;;;;;;;;;;;AA2BnB;;;;;;;AA1BA;;;;;;;;;;;0BAgCMC,G,EAAK;AACT;AACA;AACA,UAAIC,OAAOD,IAAIC,IAAf;AACA,UAAIC,gBAAJ;;AAEA,qBAAeD,IAAf,uDAAeA,IAAf;AACE,aAAK,QAAL;AACE,cAAI;AACFA,mBAAOE,KAAKC,KAAL,CAAWH,IAAX,CAAP;AACAC,sBAAU,KAAKG,WAAL,CAAiBJ,IAAjB,CAAV;AACD,WAHD,CAIA,OAAOK,GAAP,EAAY;AACVJ,sBAAUD,IAAV;AACD;AACD;AACF,aAAK,QAAL;AACEC,oBAAU,KAAKG,WAAL,CAAiBJ,IAAjB,CAAV;AACA;AACF;AAbF;;AAgBA,UAAI,CAACC,OAAL,EAAc;AACZA,kBAAU,KAAKK,cAAf;AACD;;AAED,sCAAwB,IAAxB,EAA8B;AAC5BN,cAAM;AACJO,sBAAY,KADR;AAEJC,iBAAOR;AAFH,SADsB;AAK5BS,qBAAa;AACXF,sBAAY,KADD;AAEXC,iBAAOT,IAAIU;AAFA,SALe;AAS5BC,iBAAS;AACPH,sBAAY,KADL;AAEPC,iBAAOT,IAAIW,OAAJ,IAAe;AAFf,SATmB;AAa5BC,oBAAY;AACVJ,sBAAY,KADF;AAEVC,iBAAOT,IAAIY,UAAJ,IAAkB;AAFf,SAbgB;AAiB5BC,kBAAU;AACRL,sBAAY,KADJ;AAERC,iBAAOT,IAAIa,QAAJ,IAAgB;AAFf,SAjBkB;AAqB5BC,qBAAa;AACXN,sBAAY,KADD;AAEXC,iBAAOT,IAAIc,WAAJ,IAAmB;AAFf,SArBe;AAyB5BC,gBAAQ;AACNP,sBAAY,KADN;AAENC,iBAAOT,IAAIe;AAFL,SAzBoB;AA6B5BC,aAAK;AACHR,sBAAY,KADT;AAEHC,iBAAOT,IAAIgB;AAFR,SA7BuB;AAiC5BC,oBAAY;AACVT,sBAAY,KADF;AAEVC,iBAAOT,IAAIiB;AAFD,SAjCgB;AAqC5BC,uBAAe;AACbV,sBAAY,KADC;AAEbC,iBAAOT,IAAIkB;AAFE,SArCa;AAyC5BC,gBAAQ;AACNX,sBAAY,KADN;AAENC,iBAAOT,IAAImB;AAFL,SAzCoB;AA6C5BC,cAAM;AACJZ,sBAAY,KADR;AAEJC,iBAAOT;AAFH;AA7CsB,OAA9B;;AAmDA,aAAOE,OAAP;AACD;;AAED;;;;;;;AA5FA;;;;;;;gCAiGYD,I,EAAM;AAChB;AACA,UAAMoB,WAAW,sBAAc,oBAAKpB,IAAL,EAAWF,UAAUuB,SAArB,CAAd,CAAjB;;AAEA;AACA,UAAID,SAASE,MAAT,KAAoB,CAAxB,EAA2B;AACzB,eAAO,yBAAetB,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAP;AACD;;AAED;AACA,UAAMC,UAAUmB,SAAS,CAAT,CAAhB;;AAEA;AACA,UAAI,QAAOnB,OAAP,uDAAOA,OAAP,OAAmB,QAAvB,EAAiC;AAC/B,eAAO,KAAKG,WAAL,CAAiBH,OAAjB,CAAP;AACD;;AAED;AACA,aAAOA,OAAP;AACD;;;EAzIoCsB,iB,UAY9BF,S,GAAY,CACjB,OADiB,EAEjB,aAFiB,EAGjB,UAHiB,EAIjB,eAJiB,EAKjB,SALiB,EAMjB,KANiB,C,SAaZf,c,GAAiB,2D;kBAzBLR,S;;;AA4IrB,iCAAaA,SAAb;AACAA,UAAU0B,YAAV,GAAyBA,2BAAzB","file":"http-error.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {pick} from 'lodash';\nimport {Exception} from '@ciscospark/common';\nimport makeSubTypes from './http-error-subtypes';\n\n/**\n * Base HttpError class. Unlikely to be thrown directly, but handy for general\n * type comparison.\n */\nexport default class HttpError extends Exception {\n  /**\n   * @example Extend via\n   * MyError extends HttpError {\n   *  static errorKeys = HttpError.errorKeys.concat([\n   *    `key1`,\n   *    `key2`\n   *  ])\n   * }\n   *\n   * @type {Array}\n   */\n  static errorKeys = [\n    'error',\n    'errorString',\n    'response',\n    'errorResponse',\n    'message',\n    'msg'\n  ];\n\n  /**\n   * Default error string if no error can be extracted from the http response\n   * @type {string}\n   */\n  static defaultMessage = 'An error was received while trying to fulfill the request';\n\n  /**\n   * Parses HttpResponse objects for useful information (status, headers, etc)\n   * as well as attempting to extract a useful error message.\n   * @param {HttpResponse} res\n   * @returns {string}\n   */\n  parse(res) {\n    // complexity is high here because of all the default values below.\n    /* eslint complexity: [0] */\n    let body = res.body;\n    let message;\n\n    switch (typeof body) {\n      case 'string':\n        try {\n          body = JSON.parse(body);\n          message = this.parseObject(body);\n        }\n        catch (err) {\n          message = body;\n        }\n        break;\n      case 'object':\n        message = this.parseObject(body);\n        break;\n      default:\n    }\n\n    if (!message) {\n      message = this.defaultMessage;\n    }\n\n    Object.defineProperties(this, {\n      body: {\n        enumerable: false,\n        value: body\n      },\n      httpVersion: {\n        enumerable: false,\n        value: res.httpVersion\n      },\n      headers: {\n        enumerable: false,\n        value: res.headers || {}\n      },\n      rawHeaders: {\n        enumerable: false,\n        value: res.rawHeaders || []\n      },\n      trailers: {\n        enumerable: false,\n        value: res.trailers || {}\n      },\n      rawTrailers: {\n        enumerable: false,\n        value: res.rawTrailers || []\n      },\n      method: {\n        enumerable: false,\n        value: res.method\n      },\n      url: {\n        enumerable: false,\n        value: res.url\n      },\n      statusCode: {\n        enumerable: false,\n        value: res.statusCode\n      },\n      statusMessage: {\n        enumerable: false,\n        value: res.statusMessage\n      },\n      socket: {\n        enumerable: false,\n        value: res.socket\n      },\n      _res: {\n        enumerable: false,\n        value: res\n      }\n    });\n\n    return message;\n  }\n\n  /**\n   * Recursively parses an error body looking for a likely error candidate\n   * @param {object} body\n   * @returns {string}\n   */\n  parseObject(body) {\n    // Search body for common names of error strings\n    const messages = Object.values(pick(body, HttpError.errorKeys));\n\n    // If no error candidate was found, stringify the entire body\n    if (messages.length === 0) {\n      return JSON.stringify(body, null, 2);\n    }\n\n    // Assume the first key found was the error explanation\n    const message = messages[0];\n\n    // If the explanation is an object, recurse and try again\n    if (typeof message === 'object') {\n      return this.parseObject(message);\n    }\n\n    // Return the first key\n    return message;\n  }\n}\n\nmakeSubTypes(HttpError);\nHttpError.makeSubTypes = makeSubTypes;\n"]}