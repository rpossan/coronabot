{"version":3,"sources":["http-error-subtypes.js"],"names":["makeSubTypes","Base","NetworkOrCORSError","BadRequest","Unauthorized","PaymentRequired","Forbidden","NotFound","MethodNotAllowed","NotAcceptable","ProxyAuthenticationRequired","RequestTimeout","Conflict","Gone","LengthRequired","PreconditionFailed","RequestEntityTooLarge","RequestUriTooLong","UnsupportedMediaType","RequestRangeNotSatisfiable","ExpectationFailed","TooManyRequests","InternalServerError","NotImplemented","BadGateway","ServiceUnavailable","GatewayTimeout","HttpVersionNotSupported","select","statusCode","E","toString","split","shift","parseInt"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;kBAQwBA,Y;;;;AARxB;;;;AAIA;;;;AAIe,SAASA,YAAT,CAAsBC,IAAtB,EAA4B;AACzC;;;AADyC,MAInCC,kBAJmC;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,IAIRD,IAJQ;AAKzC;;;;;AALyC,MAQnCE,UARmC;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,IAQhBF,IARgB;AASzC;;;;;AATyC,MAYnCG,YAZmC;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,IAYdD,UAZc;AAazC;;;;;AAbyC,MAgBnCE,eAhBmC;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,IAgBXF,UAhBW;AAiBzC;;;;;AAjByC,MAoBnCG,SApBmC;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,IAoBjBH,UApBiB;AAqBzC;;;;;AArByC,MAwBnCI,QAxBmC;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,IAwBlBJ,UAxBkB;AAyBzC;;;;;AAzByC,MA4BnCK,gBA5BmC;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,IA4BVL,UA5BU;AA6BzC;;;;;AA7ByC,MAgCnCM,aAhCmC;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,IAgCbN,UAhCa;AAiCzC;;;;;AAjCyC,MAoCnCO,2BApCmC;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,IAoCCP,UApCD;AAqCzC;;;;;AArCyC,MAwCnCQ,cAxCmC;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,IAwCZR,UAxCY;AAyCzC;;;;;AAzCyC,MA4CnCS,QA5CmC;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,IA4ClBT,UA5CkB;AA6CzC;;;;;AA7CyC,MAgDnCU,IAhDmC;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,IAgDtBV,UAhDsB;AAiDzC;;;;;AAjDyC,MAoDnCW,cApDmC;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,IAoDZX,UApDY;AAqDzC;;;;;AArDyC,MAwDnCY,kBAxDmC;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,IAwDRZ,UAxDQ;AAyDzC;;;;;AAzDyC,MA4DnCa,qBA5DmC;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,IA4DLb,UA5DK;AA6DzC;;;;;AA7DyC,MAgEnCc,iBAhEmC;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,IAgETd,UAhES;AAiEzC;;;;;AAjEyC,MAoEnCe,oBApEmC;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,IAoENf,UApEM;AAqEzC;;;;;AArEyC,MAwEnCgB,0BAxEmC;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,IAwEAhB,UAxEA;AAyEzC;;;;;AAzEyC,MA4EnCiB,iBA5EmC;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,IA4ETjB,UA5ES;AA6EzC;;;;;AA7EyC,MAgFnCkB,eAhFmC;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,IAgFXlB,UAhFW;AAiFzC;;;;;AAjFyC,MAoFnCmB,mBApFmC;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,IAoFPrB,IApFO;AAqFzC;;;;;AArFyC,MAwFnCsB,cAxFmC;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,IAwFZD,mBAxFY;AAyFzC;;;;;AAzFyC,MA4FnCE,UA5FmC;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,IA4FhBF,mBA5FgB;AA6FzC;;;;;AA7FyC,MAgGnCG,kBAhGmC;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,IAgGRH,mBAhGQ;AAiGzC;;;;;AAjGyC,MAoGnCI,cApGmC;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,IAoGZJ,mBApGY;AAqGzC;;;;;AArGyC,MAwGnCK,uBAxGmC;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,IAwGHL,mBAxGG;;AA0GzC,wBAAcrB,IAAd,EAAoB;AAClB,OAAGC,kBADe;AAElBA,0CAFkB;AAGlB,SAAKC,UAHa;AAIlBA,0BAJkB;AAKlB,SAAKC,YALa;AAMlBA,8BANkB;AAOlB,SAAKC,eAPa;AAQlBA,oCARkB;AASlB,SAAKC,SATa;AAUlBA,wBAVkB;AAWlB,SAAKC,QAXa;AAYlBA,sBAZkB;AAalB,SAAKC,gBAba;AAclBA,sCAdkB;AAelB,SAAKC,aAfa;AAgBlBA,gCAhBkB;AAiBlB,SAAKC,2BAjBa;AAkBlBA,4DAlBkB;AAmBlB,SAAKC,cAnBa;AAoBlBA,kCApBkB;AAqBlB,SAAKC,QArBa;AAsBlBA,sBAtBkB;AAuBlB,SAAKC,IAvBa;AAwBlBA,cAxBkB;AAyBlB,SAAKC,cAzBa;AA0BlBA,kCA1BkB;AA2BlB,SAAKC,kBA3Ba;AA4BlBA,0CA5BkB;AA6BlB,SAAKC,qBA7Ba;AA8BlBA,gDA9BkB;AA+BlB,SAAKC,iBA/Ba;AAgClBA,wCAhCkB;AAiClB,SAAKC,oBAjCa;AAkClBA,8CAlCkB;AAmClB,SAAKC,0BAnCa;AAoClBA,0DApCkB;AAqClB,SAAKC,iBArCa;AAsClBA,wCAtCkB;AAuClB,SAAKC,eAvCa;AAwClBA,oCAxCkB;AAyClB,SAAKC,mBAzCa;AA0ClBA,4CA1CkB;AA2ClB,SAAKC,cA3Ca;AA4ClBA,kCA5CkB;AA6ClB,SAAKC,UA7Ca;AA8ClBA,0BA9CkB;AA+ClB,SAAKC,kBA/Ca;AAgDlBA,0CAhDkB;AAiDlB,SAAKC,cAjDa;AAkDlBA,kCAlDkB;AAmDlB,SAAKC,uBAnDa;AAoDlBA,oDApDkB;AAqDlBC,UArDkB,kBAqDXC,UArDW,EAqDC;AACjB,UAAI,OAAOA,UAAP,KAAsB,WAAtB,IAAqCA,eAAe,IAAxD,EAA8D;AAC5D,eAAO5B,IAAP;AACD;;AAED4B,mBAAaA,WAAWA,UAAX,IAAyBA,UAAtC;AACA,UAAMC,IAAI7B,KAAK4B,UAAL,CAAV;AACA,UAAIC,CAAJ,EAAO;AACL,eAAOA,CAAP;AACD;;AAED;AACAD,mBAAgBA,WAAWE,QAAX,GAAsBC,KAAtB,CAA4B,EAA5B,EAAgCC,KAAhC,EAAhB;AACAJ,mBAAaK,SAASL,UAAT,EAAqB,EAArB,CAAb;;AAEA,aAAO5B,KAAK4B,UAAL,KAAoB5B,IAA3B;AACD;AArEiB,GAApB;AAuED","file":"http-error-subtypes.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\n/**\n * @param {Error} Base\n * @returns {undefined}\n */\nexport default function makeSubTypes(Base) {\n  /**\n   * NetworkOrCORSError\n   */\n  class NetworkOrCORSError extends Base {}\n  /**\n   * BadRequest\n   */\n  class BadRequest extends Base {}\n  /**\n   * Unauthorized\n   */\n  class Unauthorized extends BadRequest {}\n  /**\n   * PaymentRequired\n   */\n  class PaymentRequired extends BadRequest {}\n  /**\n   * Forbidden\n   */\n  class Forbidden extends BadRequest {}\n  /**\n   * NotFound\n   */\n  class NotFound extends BadRequest {}\n  /**\n   * MethodNotAllowed\n   */\n  class MethodNotAllowed extends BadRequest {}\n  /**\n   * NotAcceptable\n   */\n  class NotAcceptable extends BadRequest {}\n  /**\n   * ProxyAuthenticationRequired\n   */\n  class ProxyAuthenticationRequired extends BadRequest {}\n  /**\n   * RequestTimeout\n   */\n  class RequestTimeout extends BadRequest {}\n  /**\n   * Conflict\n   */\n  class Conflict extends BadRequest {}\n  /**\n   * Gone\n   */\n  class Gone extends BadRequest {}\n  /**\n   * LengthRequired\n   */\n  class LengthRequired extends BadRequest {}\n  /**\n   * PreconditionFailed\n   */\n  class PreconditionFailed extends BadRequest {}\n  /**\n   * RequestEntityTooLarge\n   */\n  class RequestEntityTooLarge extends BadRequest {}\n  /**\n   * RequestUriTooLong\n   */\n  class RequestUriTooLong extends BadRequest {}\n  /**\n   * UnsupportedMediaType\n   */\n  class UnsupportedMediaType extends BadRequest {}\n  /**\n   * RequestRangeNotSatisfiable\n   */\n  class RequestRangeNotSatisfiable extends BadRequest {}\n  /**\n   * ExpectationFailed\n   */\n  class ExpectationFailed extends BadRequest {}\n  /**\n   * TooManyRequests\n   */\n  class TooManyRequests extends BadRequest {}\n  /**\n   * InternalServerError\n   */\n  class InternalServerError extends Base {}\n  /**\n   * NotImplemented\n   */\n  class NotImplemented extends InternalServerError {}\n  /**\n   * BadGateway\n   */\n  class BadGateway extends InternalServerError {}\n  /**\n   * ServiceUnavailable\n   */\n  class ServiceUnavailable extends InternalServerError {}\n  /**\n   * GatewayTimeout\n   */\n  class GatewayTimeout extends InternalServerError {}\n  /**\n   * HttpVersionNotSupported\n   */\n  class HttpVersionNotSupported extends InternalServerError {}\n\n  Object.assign(Base, {\n    0: NetworkOrCORSError,\n    NetworkOrCORSError,\n    400: BadRequest,\n    BadRequest,\n    401: Unauthorized,\n    Unauthorized,\n    402: PaymentRequired,\n    PaymentRequired,\n    403: Forbidden,\n    Forbidden,\n    404: NotFound,\n    NotFound,\n    405: MethodNotAllowed,\n    MethodNotAllowed,\n    406: NotAcceptable,\n    NotAcceptable,\n    407: ProxyAuthenticationRequired,\n    ProxyAuthenticationRequired,\n    408: RequestTimeout,\n    RequestTimeout,\n    409: Conflict,\n    Conflict,\n    410: Gone,\n    Gone,\n    411: LengthRequired,\n    LengthRequired,\n    412: PreconditionFailed,\n    PreconditionFailed,\n    413: RequestEntityTooLarge,\n    RequestEntityTooLarge,\n    414: RequestUriTooLong,\n    RequestUriTooLong,\n    415: UnsupportedMediaType,\n    UnsupportedMediaType,\n    416: RequestRangeNotSatisfiable,\n    RequestRangeNotSatisfiable,\n    417: ExpectationFailed,\n    ExpectationFailed,\n    429: TooManyRequests,\n    TooManyRequests,\n    500: InternalServerError,\n    InternalServerError,\n    501: NotImplemented,\n    NotImplemented,\n    502: BadGateway,\n    BadGateway,\n    503: ServiceUnavailable,\n    ServiceUnavailable,\n    504: GatewayTimeout,\n    GatewayTimeout,\n    505: HttpVersionNotSupported,\n    HttpVersionNotSupported,\n    select(statusCode) {\n      if (typeof statusCode === 'undefined' || statusCode === null) {\n        return Base;\n      }\n\n      statusCode = statusCode.statusCode || statusCode;\n      const E = Base[statusCode];\n      if (E) {\n        return E;\n      }\n\n      // Fallback to the default for the category (e.g. BadRequest for 429)\n      statusCode = `${statusCode.toString().split('').shift()}00`;\n      statusCode = parseInt(statusCode, 10);\n\n      return Base[statusCode] || Base;\n    }\n  });\n}\n"]}