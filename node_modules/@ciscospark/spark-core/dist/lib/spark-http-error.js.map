{"version":3,"sources":["spark-http-error.js"],"names":["SparkHttpError","res","message","HttpError","prototype","parse","enumerable","value","options","url","method","uri","service","toUpperCase","resource","headers","trackingid","writeable","retryAfter","makeSubTypes","TooManyRequests","BadRequest"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;;;AAEA;;;IAGqBA,c;;;;;;;;;;;AACnB;;;;;;0BAMMC,G,EAAK;AACT,UAAIC,UAAU,qBAAcC,oBAAUC,SAAV,CAAoBC,KAAlC,EAAyC,IAAzC,EAA+C,CAACJ,GAAD,CAA/C,CAAd;;AAEA,oCAAuB,IAAvB,EAA6B,SAA7B,EAAwC;AACtCK,oBAAY,KAD0B;AAEtCC,eAAON,IAAIO;AAF2B,OAAxC;;AAKA,UAAI,KAAKA,OAAL,CAAaC,GAAjB,EAAsB;AACpBP,0BAAgB,KAAKM,OAAL,CAAaE,MAA7B,SAAuC,KAAKF,OAAL,CAAaC,GAApD;AACD,OAFD,MAGK,IAAI,KAAKD,OAAL,CAAaG,GAAjB,EAAsB;AACzBT,0BAAgB,KAAKM,OAAL,CAAaE,MAA7B,SAAuC,KAAKF,OAAL,CAAaG,GAApD;AACD,OAFI,MAGA;AACHT,0BAAgB,KAAKM,OAAL,CAAaE,MAA7B,SAAuC,KAAKF,OAAL,CAAaI,OAAb,CAAqBC,WAArB,EAAvC,SAA6E,KAAKL,OAAL,CAAaM,QAA1F;AACD;AACDZ,2CAAmC,KAAKM,OAAL,CAAaO,OAAb,CAAqBC,UAAxD;AACA,UAAI,KAAKR,OAAL,CAAaO,OAAb,IAAwB,KAAKP,OAAL,CAAaO,OAAb,CAAqB,YAArB,CAA5B,EAAgE;AAC9Db,sCAA4B,KAAKM,OAAL,CAAaO,OAAb,CAAqB,YAArB,CAA5B;AACD;AACD,UAAI,KAAKA,OAAL,CAAa,aAAb,CAAJ,EAAiC;AAC/B,sCAAuB,IAAvB,EAA6B,YAA7B,EAA2C;AACzCT,sBAAY,IAD6B;AAEzCC,iBAAO,KAAKQ,OAAL,CAAa,aAAb,CAFkC;AAGzCE,qBAAW;AAH8B,SAA3C;;AAMAf,uCAA6B,KAAKgB,UAAlC;AACD;AACDhB,iBAAW,IAAX;;AAEA,aAAOA,OAAP;AACD;;;EAxCyCC,mB,GAT5C;;;;kBASqBH,c;;;AA2CrBG,oBAAUgB,YAAV,CAAuBnB,cAAvB;;AAGA;;;;IAGMoB,e;;;;;;;;;EAAwBjB,oBAAUkB,U;;AAExClB,oBAAU,GAAV,IAAiBiB,eAAjB;AACAjB,oBAAUiB,eAAV,GAA4BA,eAA5B","file":"spark-http-error.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {HttpError} from '@ciscospark/http-core';\n\n/**\n * Spark-specific http error class\n */\nexport default class SparkHttpError extends HttpError {\n  /**\n   * Very similar to {@link HttpError#parse()}, but additionally adds some\n   * useful headers to the message string\n   * @param {HttpResponse} res\n   * @returns {string}\n   */\n  parse(res) {\n    let message = Reflect.apply(HttpError.prototype.parse, this, [res]);\n\n    Reflect.defineProperty(this, 'options', {\n      enumerable: false,\n      value: res.options\n    });\n\n    if (this.options.url) {\n      message += `\\n${this.options.method} ${this.options.url}`;\n    }\n    else if (this.options.uri) {\n      message += `\\n${this.options.method} ${this.options.uri}`;\n    }\n    else {\n      message += `\\n${this.options.method} ${this.options.service.toUpperCase()}/${this.options.resource}`;\n    }\n    message += `\\nWEBEX_TRACKING_ID: ${this.options.headers.trackingid}`;\n    if (this.options.headers && this.options.headers['x-trans-id']) {\n      message += `\\nX-Trans-Id: ${this.options.headers['x-trans-id']}`;\n    }\n    if (this.headers['retry-after']) {\n      Reflect.defineProperty(this, 'retryAfter', {\n        enumerable: true,\n        value: this.headers['retry-after'],\n        writeable: false\n      });\n\n      message += `\\nRETRY-AFTER: ${this.retryAfter}`;\n    }\n    message += '\\n';\n\n    return message;\n  }\n}\n\nHttpError.makeSubTypes(SparkHttpError);\n\n\n/**\n * TooManyRequests\n */\nclass TooManyRequests extends HttpError.BadRequest {}\n\nHttpError[429] = TooManyRequests;\nHttpError.TooManyRequests = TooManyRequests;\n"]}