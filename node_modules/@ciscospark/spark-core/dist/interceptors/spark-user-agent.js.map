{"version":3,"sources":["spark-user-agent.js"],"names":["strings","SparkUserAgentInterceptor","options","appName","appVersion","libName","libVersion","set","inBrowser","headers","uri","includes","spark","config","credentials","samlUrl","tokenUrl","authorizeUrl","get","Interceptor"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;AACA;;;;AALA;;;;AAQA,IAAMA,UAAU,uBAAhB;AACA;;;;IAGqBC,yB;;;AACnB;;;;;;AAMA,uCAA0B;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAAA;;AACxB,QAAMC,UAAU,mBAAID,OAAJ,EAAa,sBAAb,CAAhB;AACA,QAAME,aAAa,mBAAIF,OAAJ,EAAa,yBAAb,CAAnB;;AAEA,QAAMG,UAAU,mBAAIH,OAAJ,EAAa,kBAAb,EAAiC,KAAjC,IAA0C,YAA1C,GAAyD,cAAzE;AACA,QAAMI,aAAa,mBAAIJ,OAAJ,EAAa,eAAb,EAA8B,aAA9B,CAAnB;;AALwB,4KAOlBA,OAPkB;;AAQxB,QAAIC,WAAWC,UAAf,EAA2B;AACzBJ,cAAQO,GAAR,QAAqBJ,OAArB,SAAgCC,UAAhC,WAA+CI,oBAAY,KAAZ,GAAoB,MAAnE,WAA8EH,OAA9E,SAAyFC,UAAzF;AACD,KAFD,MAGK;AACHN,cAAQO,GAAR,QAAqBF,OAArB,SAAgCC,UAAhC,WAA+CE,oBAAY,KAAZ,GAAoB,MAAnE;AACD;AAbuB;AAczB;;AAED;;;;;;;;;AAOA;;;;;8BAKUN,O,EAAS;AACjBA,cAAQO,OAAR,GAAkBP,QAAQO,OAAR,IAAmB,EAArC;;AAEA,UAAIP,QAAQQ,GAAR,KAAgBR,QAAQQ,GAAR,CAAYC,QAAZ,CAAqB,KAAKC,KAAL,CAAWC,MAAX,CAAkBC,WAAlB,CAA8BC,OAAnD,KAA+Db,QAAQQ,GAAR,CAAYC,QAAZ,CAAqB,KAAKC,KAAL,CAAWC,MAAX,CAAkBC,WAAlB,CAA8BE,QAAnD,CAA/D,IAA+Hd,QAAQQ,GAAR,CAAYC,QAAZ,CAAqB,KAAKC,KAAL,CAAWC,MAAX,CAAkBC,WAAlB,CAA8BG,YAAnD,CAA/I,CAAJ,EAAsN;AACpN,eAAOf,OAAP;AACD;;AAED,UAAI,sBAAsBA,QAAQO,OAAlC,EAA2C;AACzC,YAAI,CAACP,QAAQO,OAAR,CAAgB,kBAAhB,CAAL,EAA0C;AACxC,wCAAuBP,QAAQO,OAA/B,EAAwC,kBAAxC;AACD;AACD,eAAOP,OAAP;AACD;;AAEDA,cAAQO,OAAR,CAAgB,kBAAhB,IAAsCT,QAAQkB,GAAR,CAAY,IAAZ,CAAtC;;AAEA,aAAOhB,OAAP;AACD;;;6BA1Be;AACd,aAAO,IAAID,yBAAJ,CAA8B,EAACW,OAAO,IAAR,EAA9B,CAAP;AACD;;;EA5BoDO,qB;;kBAAlClB,yB","file":"spark-user-agent.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {inBrowser} from '@ciscospark/common';\nimport {Interceptor} from '@ciscospark/http-core';\nimport {get} from 'lodash';\n\nconst strings = new WeakMap();\n/**\n * @class\n */\nexport default class SparkUserAgentInterceptor extends Interceptor {\n  /**\n   * @param {Object} [options={}]\n   * @param {SparkCore} [options.spark]\n   * @private\n   * @returns {SparkUserAgentInterceptor}\n   */\n  constructor(options = {}) {\n    const appName = get(options, 'spark.config.appName');\n    const appVersion = get(options, 'spark.config.appVersion');\n\n    const libName = get(options, 'spark.ciscospark', false) ? 'ciscospark' : 'spark-js-sdk';\n    const libVersion = get(options, 'spark.version', 'development');\n\n    super(options);\n    if (appName && appVersion) {\n      strings.set(this, `${appName}/${appVersion} (${inBrowser ? 'web' : 'node'}) ${libName}/${libVersion}`);\n    }\n    else {\n      strings.set(this, `${libName}/${libVersion} (${inBrowser ? 'web' : 'node'})`);\n    }\n  }\n\n  /**\n   * @returns {SparkUserAgentInterceptor}\n   */\n  static create() {\n    return new SparkUserAgentInterceptor({spark: this});\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @returns {Object}\n   */\n  onRequest(options) {\n    options.headers = options.headers || {};\n\n    if (options.uri && (options.uri.includes(this.spark.config.credentials.samlUrl) || options.uri.includes(this.spark.config.credentials.tokenUrl) || options.uri.includes(this.spark.config.credentials.authorizeUrl))) {\n      return options;\n    }\n\n    if ('spark-user-agent' in options.headers) {\n      if (!options.headers['spark-user-agent']) {\n        Reflect.deleteProperty(options.headers, 'spark-user-agent');\n      }\n      return options;\n    }\n\n    options.headers['spark-user-agent'] = strings.get(this);\n\n    return options;\n  }\n}\n"]}