{"version":3,"sources":["redirect.js"],"names":["requestHeaderName","responseHeaderName","RedirectInterceptor","options","uri","includes","spark","config","credentials","samlUrl","tokenUrl","authorizeUrl","headers","$redirectCount","response","maxAppLevelRedirects","reject","Error","request","Interceptor"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;AAEA,IAAMA,oBAAoB,wBAA1B,C,CAPA;;;;AAQA,IAAMC,qBAAqB,gBAA3B;;AAEA;;;;IAGqBC,mB;;;;;;;;;;;;AAQnB;;;;;8BAKUC,O,EAAS;AACjB,UAAIA,QAAQC,GAAR,CAAYC,QAAZ,CAAqB,KAAKC,KAAL,CAAWC,MAAX,CAAkBC,WAAlB,CAA8BC,OAAnD,KAA+DN,QAAQC,GAAR,CAAYC,QAAZ,CAAqB,KAAKC,KAAL,CAAWC,MAAX,CAAkBC,WAAlB,CAA8BE,QAAnD,CAA/D,IAA+HP,QAAQC,GAAR,CAAYC,QAAZ,CAAqB,KAAKC,KAAL,CAAWC,MAAX,CAAkBC,WAAlB,CAA8BG,YAAnD,CAAnI,EAAqM;AACnM,eAAOR,OAAP;AACD;;AAED;AACA,UAAIH,qBAAqBG,QAAQS,OAAjC,EAA0C;AACxC;AACA;AACA,YAAI,CAACT,QAAQS,OAAR,CAAgBZ,iBAAhB,CAAL,EAAyC;AACvC,wCAAuBG,QAAQS,OAA/B,EAAwCZ,iBAAxC;AACD;AACD,eAAOG,OAAP;AACD;AACDA,cAAQS,OAAR,CAAgBZ,iBAAhB,IAAqC,IAArC;AACAG,cAAQU,cAAR,GAAyBV,QAAQU,cAAR,IAA0B,CAAnD;AACA,aAAOV,OAAP;AACD;;AAED;;;;;;;;;+BAMWA,O,EAASW,Q,EAAU;AAC5B,UAAIA,SAASF,OAAT,IAAoBE,SAASF,OAAT,CAAiBX,kBAAjB,CAAxB,EAA8D;AAC5DE,kBAAU,qBAAMA,OAAN,CAAV;AACAA,gBAAQC,GAAR,GAAcU,SAASF,OAAT,CAAiBX,kBAAjB,CAAd;AACAE,gBAAQU,cAAR,IAA0B,CAA1B;AACA,YAAIV,QAAQU,cAAR,GAAyB,KAAKP,KAAL,CAAWC,MAAX,CAAkBQ,oBAA/C,EAAqE;AACnE,iBAAO,kBAAQC,MAAR,CAAe,IAAIC,KAAJ,CAAU,4BAAV,CAAf,CAAP;AACD;;AAED,eAAO,KAAKX,KAAL,CAAWY,OAAX,CAAmBf,OAAnB,CAAP;AACD;;AAED,aAAOW,QAAP;AACD;;;;AAlDD;;;6BAGgB;AACd,aAAO,IAAIZ,mBAAJ,CAAwB,EAACI,OAAO,IAAR,EAAxB,CAAP;AACD;;;EAN8Ca,qB;;kBAA5BjB,mB","file":"redirect.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {clone} from 'lodash';\nimport {Interceptor} from '@ciscospark/http-core';\n\nconst requestHeaderName = 'cisco-no-http-redirect';\nconst responseHeaderName = 'cisco-location';\n\n/**\n * @class\n */\nexport default class RedirectInterceptor extends Interceptor {\n  /**\n   * @returns {RedirectInterceptor}\n   */\n  static create() {\n    return new RedirectInterceptor({spark: this});\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @returns {Object}\n   */\n  onRequest(options) {\n    if (options.uri.includes(this.spark.config.credentials.samlUrl) || options.uri.includes(this.spark.config.credentials.tokenUrl) || options.uri.includes(this.spark.config.credentials.authorizeUrl)) {\n      return options;\n    }\n\n    // If cisco-no-http-redirect is already set, don't overwrite it\n    if (requestHeaderName in options.headers) {\n      // If cisco-no-http-redirect is set to null, false, or undefined, delete\n      // it to prevent a CORS preflight.\n      if (!options.headers[requestHeaderName]) {\n        Reflect.deleteProperty(options.headers, requestHeaderName);\n      }\n      return options;\n    }\n    options.headers[requestHeaderName] = true;\n    options.$redirectCount = options.$redirectCount || 0;\n    return options;\n  }\n\n  /**\n   * @see Interceptor#onResponse\n   * @param {Object} options\n   * @param {HttpResponse} response\n   * @returns {Object}\n   */\n  onResponse(options, response) {\n    if (response.headers && response.headers[responseHeaderName]) {\n      options = clone(options);\n      options.uri = response.headers[responseHeaderName];\n      options.$redirectCount += 1;\n      if (options.$redirectCount > this.spark.config.maxAppLevelRedirects) {\n        return Promise.reject(new Error('Maximum redirects exceeded'));\n      }\n\n      return this.spark.request(options);\n    }\n\n    return response;\n  }\n}\n"]}