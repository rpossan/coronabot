{"version":3,"sources":["spark-tracking-id.js"],"names":["sequenceNumbers","SparkTrackingIdInterceptor","options","headers","trackingid","requiresTrackingId","spark","sessionId","sequence","replayCount","tid","split","join","sq","get","set","Interceptor"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;;;AAEA,IAAMA,kBAAkB,uBAAxB;;AAEA;;;AARA;;;;IAWqBC,0B;;;;;;;;;;;;AAmBnB;;;;;8BAKUC,O,EAAS;AACjBA,cAAQC,OAAR,GAAkBD,QAAQC,OAAR,IAAmB,EAArC;AACA;AACA,UAAI,gBAAgBD,QAAQC,OAA5B,EAAqC;AACnC;AACA;AACA,YAAI,CAACD,QAAQC,OAAR,CAAgBC,UAArB,EAAiC;AAC/B,wCAAuBF,QAAQC,OAA/B,EAAwC,YAAxC;AACD;AACD,eAAOD,OAAP;AACD;;AAED,UAAI,KAAKG,kBAAL,CAAwBH,OAAxB,CAAJ,EAAsC;AACpCA,gBAAQC,OAAR,CAAgBC,UAAhB,GAAgC,KAAKE,KAAL,CAAWC,SAA3C,SAAwD,KAAKC,QAA7D;AACD;;AAED,UAAIN,QAAQC,OAAR,CAAgBC,UAAhB,IAA8BF,QAAQO,WAA1C,EAAuD;AACrD,YAAMC,MAAMR,QAAQC,OAAR,CAAgBC,UAAhB,CAA2BO,KAA3B,CAAiC,GAAjC,CAAZ;AACAD,YAAI,CAAJ,IAASR,QAAQO,WAAjB;AACAP,gBAAQC,OAAR,CAAgBC,UAAhB,GAA6BM,IAAIE,IAAJ,CAAS,GAAT,CAA7B;AACD;;AAED,aAAOV,OAAP;AACD;;AAED;;;;;;;;uCAKmBA,O,EAAS;AAC1B,aAAO,CAACA,QAAQC,OAAR,CAAgBC,UAAxB;AACD;;;;AAvDD;;;;wBAIe;AACb,UAAIS,KAAKb,gBAAgBc,GAAhB,CAAoB,IAApB,KAA6B,CAAtC;AACAD,YAAM,CAAN;AACAb,sBAAgBe,GAAhB,CAAoB,IAApB,EAA0BF,EAA1B;AACA,aAAOA,EAAP;AACD;;AAED;;;;;;6BAGgB;AACd,aAAO,IAAIZ,0BAAJ,CAA+B,EAACK,OAAO,IAAR,EAA/B,CAAP;AACD;;;EAjBqDU,qB;;kBAAnCf,0B","file":"spark-tracking-id.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {Interceptor} from '@ciscospark/http-core';\n\nconst sequenceNumbers = new WeakMap();\n\n/**\n * @class\n */\nexport default class SparkTrackingIdInterceptor extends Interceptor {\n  /**\n   * Sequence number; increments on access\n   * @type {Number}\n   */\n  get sequence() {\n    let sq = sequenceNumbers.get(this) || 0;\n    sq += 1;\n    sequenceNumbers.set(this, sq);\n    return sq;\n  }\n\n  /**\n   * @returns {SparkTrackingIdInterceptor}\n   */\n  static create() {\n    return new SparkTrackingIdInterceptor({spark: this});\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @returns {Object}\n   */\n  onRequest(options) {\n    options.headers = options.headers || {};\n    // If trackingid is already set, don't overwrite it\n    if ('trackingid' in options.headers) {\n      // If trackingid is set to null, false, or undefined, delete it to\n      // prevent a CORS preflight.\n      if (!options.headers.trackingid) {\n        Reflect.deleteProperty(options.headers, 'trackingid');\n      }\n      return options;\n    }\n\n    if (this.requiresTrackingId(options)) {\n      options.headers.trackingid = `${this.spark.sessionId}_${this.sequence}`;\n    }\n\n    if (options.headers.trackingid && options.replayCount) {\n      const tid = options.headers.trackingid.split('+');\n      tid[1] = options.replayCount;\n      options.headers.trackingid = tid.join('+');\n    }\n\n    return options;\n  }\n\n  /**\n   * Determines whether or not include a tracking id\n   * @param {Object} options\n   * @returns {boolean}\n   */\n  requiresTrackingId(options) {\n    return !options.headers.trackingid;\n  }\n}\n"]}