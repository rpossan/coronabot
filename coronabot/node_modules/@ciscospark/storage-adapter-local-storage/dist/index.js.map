{"version":3,"sources":["index.js"],"names":["namespaces","loggers","StorageAdapterLocalStorage","basekey","Bound","namespace","options","set","logger","rawData","localStorage","getItem","JSON","parse","allData","_getRawData","get","data","setItem","info","resolve","removeItem","key","_load","_save","reject","value","NotFoundError","Error"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;;;;AAEA,IAAMA,aAAa,uBAAnB,C,CARA;;;;AAIA;;AAKA,IAAMC,UAAU,uBAAhB;;AAEA;;;;IAGqBC,0B;AACnB;;;;;AAKA,sCAAYC,OAAZ,EAAqB;AAAA;;AACnB;;;AAGA,SAAKC,KAAL;AACE;;;;;AAKA,sBAAYC,SAAZ,EAAuBC,OAAvB,EAAgC;AAAA;;AAC9BN,mBAAWO,GAAX,CAAe,IAAf,EAAqBF,SAArB;AACAJ,gBAAQM,GAAR,CAAY,IAAZ,EAAkBD,QAAQE,MAA1B;AACD;;AAED;;;;;;AAXF;AAAA;AAAA,sCAegB;AACZ,cAAMC,UAAUC,aAAaC,OAAb,CAAqBR,OAArB,CAAhB;AACA,iBAAOM,UAAUG,KAAKC,KAAL,CAAWJ,OAAX,CAAV,GAAgC,EAAvC;AACD;;AAED;;;;;AApBF;AAAA;AAAA,gCAwBU;AACN,cAAMK,UAAU,KAAKC,WAAL,EAAhB;AACA,iBAAOD,QAAQd,WAAWgB,GAAX,CAAe,IAAf,CAAR,KAAiC,EAAxC;AACD;;AAED;;;;;;AA7BF;AAAA;AAAA,8BAkCQC,IAlCR,EAkCc;AACV,cAAMH,UAAU,KAAKC,WAAL,EAAhB;AACAD,kBAAQd,WAAWgB,GAAX,CAAe,IAAf,CAAR,IAAgCC,IAAhC;;AAEAP,uBAAaQ,OAAb,CAAqBf,OAArB,EAA8B,yBAAeW,OAAf,CAA9B;AACD;;AAED;;;;;;AAzCF;AAAA;AAAA,gCA8CU;AACNb,kBAAQe,GAAR,CAAY,IAAZ,EAAkBG,IAAlB,CAAuB,oDAAvB;AACA,iBAAO,kBAAQC,OAAR,CAAgBV,aAAaW,UAAb,CAAwBlB,OAAxB,CAAhB,CAAP;AACD;;AAED;;;;;;AAnDF;AAAA;AAAA,4BAwDMmB,GAxDN,EAwDW;AAAA;;AACP,iBAAO,sBAAY,UAACF,OAAD,EAAa;AAC9BnB,oBAAQe,GAAR,CAAY,KAAZ,EAAkBG,IAAlB,6CAAkEG,GAAlE;AACA,gBAAML,OAAO,MAAKM,KAAL,EAAb;AACA,0CAAuBN,IAAvB,EAA6BK,GAA7B;AACA,kBAAKE,KAAL,CAAWP,IAAX;AACAG;AACD,WANM,CAAP;AAOD;;AAED;;;;;;AAlEF;AAAA;AAAA,4BAuEME,GAvEN,EAuEW;AAAA;;AACP,iBAAO,sBAAY,UAACF,OAAD,EAAUK,MAAV,EAAqB;AACtCxB,oBAAQe,GAAR,CAAY,MAAZ,EAAkBG,IAAlB,4CAAiEG,GAAjE;AACA,gBAAML,OAAO,OAAKM,KAAL,EAAb;AACA,gBAAMG,QAAQT,KAAKK,GAAL,CAAd;AACA,gBAAI,OAAOI,KAAP,KAAiB,WAArB,EAAkC;AAChC,qBAAON,QAAQM,KAAR,CAAP;AACD;;AAED,mBAAOD,OAAO,IAAIE,wBAAJ,yBAAwCL,GAAxC,CAAP,CAAP;AACD,WATM,CAAP;AAUD;;AAED;;;;;;;AApFF;AAAA;AAAA,4BA0FMA,GA1FN,EA0FWI,KA1FX,EA0FkB;AAAA;;AACd,iBAAO,sBAAY,UAACN,OAAD,EAAa;AAC9BnB,oBAAQe,GAAR,CAAY,MAAZ,EAAkBG,IAAlB,4CAAiEG,GAAjE;AACA,gBAAML,OAAO,OAAKM,KAAL,EAAb;AACAN,iBAAKK,GAAL,IAAYI,KAAZ;AACA,mBAAKF,KAAL,CAAWP,IAAX;AACAG;AACD,WANM,CAAP;AAOD;AAlGH;AAAA;AAAA;AAoGD;;AAED;;;;;;;;;;yBAMKf,S,EAAWC,O,EAAS;AACvBA,gBAAUA,WAAW,EAArB;AACA,UAAI,CAACD,SAAL,EAAgB;AACd,eAAO,kBAAQoB,MAAR,CAAe,IAAIG,KAAJ,CAAU,yBAAV,CAAf,CAAP;AACD;;AAED,UAAI,CAACtB,QAAQE,MAAb,EAAqB;AACnB,eAAO,kBAAQiB,MAAR,CAAe,IAAIG,KAAJ,CAAU,8BAAV,CAAf,CAAP;AACD;;AAEDtB,cAAQE,MAAR,CAAeW,IAAf,CAAoB,gDAApB;;AAEA,aAAO,kBAAQC,OAAR,CAAgB,IAAI,KAAKhB,KAAT,CAAeC,SAAf,EAA0BC,OAA1B,CAAhB,CAAP;AACD;;;;;kBAnIkBJ,0B","file":"index.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\n/* eslint-env browser */\n\nimport {NotFoundError} from '@ciscospark/spark-core';\n\nconst namespaces = new WeakMap();\nconst loggers = new WeakMap();\n\n/**\n * localStorage adapter for spark-core storage layer\n */\nexport default class StorageAdapterLocalStorage {\n  /**\n   * @constructs {StorageAdapterLocalStorage}\n   * @param {string} basekey localStorage key underwhich all namespaces will be\n   * stored\n   */\n  constructor(basekey) {\n    /**\n     * localStorage binding\n     */\n    this.Bound = class {\n      /**\n       * @constructs {Bound}\n       * @param {string} namespace\n       * @param {Object} options\n       */\n      constructor(namespace, options) {\n        namespaces.set(this, namespace);\n        loggers.set(this, options.logger);\n      }\n\n      /**\n       * @private\n       * @returns {rawData}\n       */\n      _getRawData() {\n        const rawData = localStorage.getItem(basekey);\n        return rawData ? JSON.parse(rawData) : {};\n      }\n\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      _load() {\n        const allData = this._getRawData();\n        return allData[namespaces.get(this)] || {};\n      }\n\n      /**\n       * @param {Object} data\n       * @private\n       * @returns {undefined}\n       */\n      _save(data) {\n        const allData = this._getRawData();\n        allData[namespaces.get(this)] = data;\n\n        localStorage.setItem(basekey, JSON.stringify(allData));\n      }\n\n      /**\n       * Clears the localStorage\n       * @param {string} key\n       * @returns {Promise}\n       */\n      clear() {\n        loggers.get(this).info('local-storage-store-adapter: clearing localStorage');\n        return Promise.resolve(localStorage.removeItem(basekey));\n      }\n\n      /**\n       * Removes the specified key\n       * @param {string} key\n       * @returns {Promise}\n       */\n      del(key) {\n        return new Promise((resolve) => {\n          loggers.get(this).info(`local-storage-store-adapter: deleting \\`${key}\\``);\n          const data = this._load();\n          Reflect.deleteProperty(data, key);\n          this._save(data);\n          resolve();\n        });\n      }\n\n      /**\n       * Retrieves the data at the specified key\n       * @param {string} key\n       * @returns {Promise<mixed>}\n       */\n      get(key) {\n        return new Promise((resolve, reject) => {\n          loggers.get(this).info(`local-storage-store-adapter: reading \\`${key}\\``);\n          const data = this._load();\n          const value = data[key];\n          if (typeof value !== 'undefined') {\n            return resolve(value);\n          }\n\n          return reject(new NotFoundError(`No value found for ${key}`));\n        });\n      }\n\n      /**\n       * Stores the specified value at the specified key\n       * @param {string} key\n       * @param {mixed} value\n       * @returns {Promise}\n       */\n      put(key, value) {\n        return new Promise((resolve) => {\n          loggers.get(this).info(`local-storage-store-adapter: writing \\`${key}\\``);\n          const data = this._load();\n          data[key] = value;\n          this._save(data);\n          resolve();\n        });\n      }\n    };\n  }\n\n  /**\n   * Returns an adapter bound to the specified namespace\n   * @param {string} namespace\n   * @param {Object} options\n   * @returns {Promise<Bound>}\n   */\n  bind(namespace, options) {\n    options = options || {};\n    if (!namespace) {\n      return Promise.reject(new Error('`namespace` is required'));\n    }\n\n    if (!options.logger) {\n      return Promise.reject(new Error('`options.logger` is required'));\n    }\n\n    options.logger.info('local-storage-store-adapter: returning binding');\n\n    return Promise.resolve(new this.Bound(namespace, options));\n  }\n}\n"]}