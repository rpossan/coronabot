{"version":3,"sources":["service-collection.js"],"names":["ServiceCollection","AmpCollection","extend","mainIndex","model","ServiceModel","markFailedAndCycleUrl","uri","reject","Error","inferServiceFromUrl","then","service","markHostFailed","cycleNextHost","url","resetAllAndRetry","resetAllHosts","services","filter","doesUrlBelongToService","length","resolve","inferServiceNameFromUrl"],"mappings":";;;;;;;;;;AAIA;;;;AACA;;;;;;AAEA;;;;;AAPA;;;;AAYA,IAAMA,oBAAoBC,8BAAcC,MAAd,CAAqB;AAC7CC,aAAW,SADkC;AAE7CC,SAAOC,sBAFsC;;AAI7C;;;;;AAKAC,uBAT6C,iCASvBC,GATuB,EASlB;AACzB,QAAI,CAACA,GAAL,EAAU;AACR,aAAO,kBAAQC,MAAR,CAAe,IAAIC,KAAJ,CAAU,+BAAV,CAAf,CAAP;AACD;;AAED,WAAO,KAAKC,mBAAL,CAAyBH,GAAzB,EACJI,IADI,CACC,UAACC,OAAD,EAAa;AACjBA,cAAQC,cAAR,CAAuBN,GAAvB;AACA,aAAOK,QAAQE,aAAR,GACJH,IADI,CACC;AAAA,eAAMC,QAAQG,GAAd;AAAA,OADD,CAAP;AAED,KALI,CAAP;AAMD,GApB4C;;;AAsB7C;;;;;AAKAC,kBA3B6C,4BA2B5BT,GA3B4B,EA2BvB;AACpB,QAAI,CAACA,GAAL,EAAU;AACR,aAAO,kBAAQC,MAAR,CAAe,IAAIC,KAAJ,CAAU,+BAAV,CAAf,CAAP;AACD;;AAED,WAAO,KAAKC,mBAAL,CAAyBH,GAAzB,EACJI,IADI,CACC,UAACC,OAAD,EAAa;AACjBA,cAAQK,aAAR;AACA,aAAOL,QAAQG,GAAf;AACD,KAJI,CAAP;AAKD,GArC4C;;;AAuC7C;;;;;AAKAL,qBA5C6C,+BA4CzBH,GA5CyB,EA4CpB;AACvB,QAAMW,WAAW,KAAKC,MAAL,CAAY,UAACP,OAAD;AAAA,aAAaA,QAAQQ,sBAAR,CAA+Bb,GAA/B,CAAb;AAAA,KAAZ,CAAjB;AACA,QAAIW,SAASG,MAAT,IAAmB,CAAvB,EAA0B;AACxB,aAAO,kBAAQC,OAAR,CAAgBJ,SAAS,CAAT,CAAhB,CAAP;AACD;;AAED,WAAO,kBAAQV,MAAR,CAAe,IAAIC,KAAJ,2CAAkDF,GAAlD,CAAf,CAAP;AACD,GAnD4C;;;AAqD7C;;;;;;AAMAgB,yBA3D6C,mCA2DrBhB,GA3DqB,EA2DhB;AAC3B,WAAO,KAAKG,mBAAL,CAAyBH,GAAzB,EACJI,IADI,CACC,UAACC,OAAD;AAAA,aAAaA,QAAQA,OAArB;AAAA,KADD,CAAP;AAED;AA9D4C,CAArB,CAA1B;;kBAiEeZ,iB","file":"service-collection.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport AmpCollection from 'ampersand-collection';\nimport ServiceModel from './service-model';\n\n/**\n * Collection of catalog services parsed from wdm registration.services and\n * registration.serviceHostMap.hostCatalog\n * @class\n */\nconst ServiceCollection = AmpCollection.extend({\n  mainIndex: 'service',\n  model: ServiceModel,\n\n  /**\n   * Mark the current host as failed and grab another url for connection\n   * @param {string} uri Mark the host of this url as fail\n   * @returns {string} new Url for connection\n   */\n  markFailedAndCycleUrl(uri) {\n    if (!uri) {\n      return Promise.reject(new Error('`uri` is a required parameter'));\n    }\n\n    return this.inferServiceFromUrl(uri)\n      .then((service) => {\n        service.markHostFailed(uri);\n        return service.cycleNextHost()\n          .then(() => service.url);\n      });\n  },\n\n  /**\n   * Reset the available hosts if we are done trying all the host URLs\n   * @param {string} uri to fetch the available hosts\n   * @returns {string} new Url for connection\n   */\n  resetAllAndRetry(uri) {\n    if (!uri) {\n      return Promise.reject(new Error('`uri` is a required parameter'));\n    }\n\n    return this.inferServiceFromUrl(uri)\n      .then((service) => {\n        service.resetAllHosts();\n        return service.url;\n      });\n  },\n\n  /**\n   * Find out what service this url belongs to (by looking at the host name)\n   * @param {string} uri\n   * @returns {Promise<ServiceModel>}\n   */\n  inferServiceFromUrl(uri) {\n    const services = this.filter((service) => service.doesUrlBelongToService(uri));\n    if (services.length >= 1) {\n      return Promise.resolve(services[0]);\n    }\n\n    return Promise.reject(new Error(`Unable to infer service for this url ${uri}`));\n  },\n\n  /**\n   * Find out what service this url belongs to, this returns the service name\n   * instead of the service object\n   * @param {string} uri Mark the host of this url as fail\n   * @returns {Promise<ServiceModel.Service>}\n   */\n  inferServiceNameFromUrl(uri) {\n    return this.inferServiceFromUrl(uri)\n      .then((service) => service.service);\n  }\n});\n\nexport default ServiceCollection;\n"]}