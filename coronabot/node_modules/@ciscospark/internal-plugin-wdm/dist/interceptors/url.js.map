{"version":3,"sources":["url.js"],"names":["pattern","UrlInterceptor","options","uri","checkOptions","normalizeOptions","spark","internal","device","getServiceUrl","service","then","reject","Error","resource","replace","api","Interceptor"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;;;AAEA,IAAMA,UAAU,iBAAhB;;AAEA;;;AARA;;;;IAWqBC,c;;;;;;;;;;;;AASnB;;;;;8BAKUC,O,EAAS;AACjB,UAAI,CAACA,QAAQC,GAAb,EAAkB;AAChB,aAAKC,YAAL,CAAkBF,OAAlB;AACA,aAAKG,gBAAL,CAAsBH,OAAtB;;AAEA,eAAO,KAAKI,KAAL,CAAWC,QAAX,CAAoBC,MAApB,CAA2BC,aAA3B,CAAyCP,QAAQQ,OAAjD,EACJC,IADI,CACC,UAACR,GAAD,EAAS;AACb,cAAI,CAACA,GAAL,EAAU;AACR,mBAAO,kBAAQS,MAAR,CAAe,IAAIC,KAAJ,OAAeX,QAAQQ,OAAvB,8BAAf,CAAP;AACD;;AAED;AACA,cAAIR,QAAQY,QAAZ,EAAsB;AACpBX,kBAASA,IAAIY,OAAJ,CAAYf,OAAZ,EAAqB,EAArB,CAAT,SAAqCE,QAAQY,QAAR,CAAiBC,OAAjB,CAAyBf,OAAzB,EAAkC,EAAlC,CAArC;AACD;;AAEDE,kBAAQC,GAAR,GAAcA,GAAd;AACA,iBAAOD,OAAP;AACD,SAbI,CAAP;AAcD;;AAED,aAAOA,OAAP;AACD;;AAED;;;;;;;;iCAKaA,O,EAAS;AACpB,UAAI,CAACA,QAAQc,GAAT,IAAgB,CAACd,QAAQQ,OAA7B,EAAsC;AACpC,cAAM,IAAIG,KAAJ,CAAU,4CAAV,CAAN;AACD;;AAED,UAAI,CAACX,QAAQY,QAAb,EAAuB;AACrB,cAAM,IAAID,KAAJ,CAAU,oCAAV,CAAN;AACD;AACF;;AAED;;;;;;;;;qCAMiBX,O,EAAS;AACxB,UAAIA,QAAQQ,OAAZ,EAAqB;AACnB;AACD;;AAED,4BAAcR,OAAd,EAAuB;AACrBQ,iBAASR,QAAQQ,OAAR,IAAmBR,QAAQc;AADf,OAAvB;;AAIA,oCAAuBd,OAAvB,EAAgC,KAAhC;AACD;;;;AApED;;;6BAGgB;AACd;AACA,aAAO,IAAID,cAAJ,CAAmB,EAACK,OAAO,IAAR,EAAnB,CAAP;AACD;;;EAPyCW,qB;;kBAAvBhB,c","file":"url.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {Interceptor} from '@ciscospark/http-core';\n\nconst pattern = /(?:^\\/)|(?:\\/$)/;\n\n/**\n * @class\n */\nexport default class UrlInterceptor extends Interceptor {\n  /**\n   * @returns {UrlInterceptor}\n   */\n  static create() {\n    /* eslint no-invalid-this: [0] */\n    return new UrlInterceptor({spark: this});\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @returns {Object}\n   */\n  onRequest(options) {\n    if (!options.uri) {\n      this.checkOptions(options);\n      this.normalizeOptions(options);\n\n      return this.spark.internal.device.getServiceUrl(options.service)\n        .then((uri) => {\n          if (!uri) {\n            return Promise.reject(new Error(`\\`${options.service}\\` is not a known service`));\n          }\n\n          // strip leading and trailing slashes before assembling the full uri\n          if (options.resource) {\n            uri = `${uri.replace(pattern, '')}/${options.resource.replace(pattern, '')}`;\n          }\n\n          options.uri = uri;\n          return options;\n        });\n    }\n\n    return options;\n  }\n\n  /**\n   * Verify that all required parameters have been specified.\n   * @param {Object} options\n   * @returns {Object}\n   */\n  checkOptions(options) {\n    if (!options.api && !options.service) {\n      throw new Error('A `service` or `uri` parameter is required');\n    }\n\n    if (!options.resource) {\n      throw new Error('A `resource` parameter is required');\n    }\n  }\n\n  /**\n   * accept api or service and rename to service\n   * @param {Object} options\n   * @private\n   * @returns {Object}\n   */\n  normalizeOptions(options) {\n    if (options.service) {\n      return;\n    }\n\n    Object.assign(options, {\n      service: options.service || options.api\n    });\n\n    Reflect.deleteProperty(options, 'api');\n  }\n}\n"]}