{"version":3,"sources":["device-url.js"],"names":["DeviceUrlInterceptor","options","spark","internal","device","url","headers","resolve","service","determineService","uri","then","catch","err","message","match","Interceptor"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;;;AAGA;;;IAGqBA,oB;;;;;;;;;;;;AASnB;;;;;8BAKUC,O,EAAS;AAAA;;AACjB,UAAI,CAAC,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,MAApB,CAA2BC,GAA5B,IAAmCJ,QAAQK,OAAR,IAAmB,sBAAsBL,QAAQK,OAAjD,IAA4D,CAACL,QAAQK,OAAR,CAAgB,kBAAhB,CAApG,EAAyI;AACvI,eAAO,kBAAQC,OAAR,CAAgBN,OAAhB,CAAP;AACD;;AAED,aAAO,kBAAQM,OAAR,CAAgBN,QAAQO,OAAR,IAAmB,KAAKN,KAAL,CAAWC,QAAX,CAAoBC,MAApB,CAA2BK,gBAA3B,CAA4CR,QAAQS,GAApD,CAAnC,EACJC,IADI,CACC,UAACH,OAAD,EAAa;AACjB,YAAIA,WAAWA,YAAY,OAAvB,IAAkCA,YAAY,MAAlD,EAA0D;AACxD,6BAAIP,OAAJ,EAAa,+BAAb,EAA8C,OAAKC,KAAL,CAAWC,QAAX,CAAoBC,MAApB,CAA2BC,GAAzE;AACD;AACD,eAAOJ,OAAP;AACD,OANI,EAOJW,KAPI,CAOE,UAACC,GAAD,EAAS;AACd,YAAIA,IAAIC,OAAJ,CAAYC,KAAZ,CAAkB,kCAAlB,CAAJ,EAA2D;AACzD,iBAAOd,OAAP;AACD;;AAED,cAAMY,GAAN;AACD,OAbI,CAAP;AAcD;;;;AAhCD;;;6BAGgB;AACd;AACA,aAAO,IAAIb,oBAAJ,CAAyB,EAACE,OAAO,IAAR,EAAzB,CAAP;AACD;;;EAP+Cc,qB,GAVlD;;;;kBAUqBhB,oB","file":"device-url.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {Interceptor} from '@ciscospark/http-core';\nimport {set} from 'lodash';\n\n/**\n * Adds 'cisco-device-url' header, as appropriate, to requests\n */\nexport default class DeviceUrlInterceptor extends Interceptor {\n  /**\n  * @returns {DeviceUrlInterceptor}\n  */\n  static create() {\n    /* eslint no-invalid-this: [0] */\n    return new DeviceUrlInterceptor({spark: this});\n  }\n\n  /**\n  * @see Interceptor#onRequest\n  * @param {Object} options\n  * @returns {Object}\n  */\n  onRequest(options) {\n    if (!this.spark.internal.device.url || options.headers && 'cisco-device-url' in options.headers && !options.headers['cisco-device-url']) {\n      return Promise.resolve(options);\n    }\n\n    return Promise.resolve(options.service || this.spark.internal.device.determineService(options.uri))\n      .then((service) => {\n        if (service && service !== 'oauth' && service !== 'saml') {\n          set(options, 'headers[\\'cisco-device-url\\']', this.spark.internal.device.url);\n        }\n        return options;\n      })\n      .catch((err) => {\n        if (err.message.match(/does not reflect a known service/)) {\n          return options;\n        }\n\n        throw err;\n      });\n  }\n}\n"]}