{"version":3,"sources":["messages.js"],"names":["Messages","SparkPlugin","extend","create","message","key","file","logger","warn","files","reduce","type","options","method","service","resource","request","then","res","body","get","id","items","list","qs","Page","spark","remove","statusCode","undefined"],"mappings":";;;;;;;;;;;;;;;;;;AAIA;;;;AAGA;;;;;;;;;;;;;;AAcA;;;;;;;;AAQA,IAAMA,WAAWC,uBAAYC,MAAZ,CAAmB;AAClC;;;;;;;;;;;;;;;;;;;;;;;;;AAyBAC,QA1BkC,kBA0B3BC,OA1B2B,EA0BlB;AACd,QAAIC,MAAM,MAAV;AACA,QAAID,QAAQE,IAAZ,EAAkB;AAChB,WAAKC,MAAL,CAAYC,IAAZ,CAAiB,iFAAjB;AACAJ,cAAQK,KAAR,GAAgB,CAACL,QAAQE,IAAT,CAAhB;AACA,oCAAuBF,OAAvB,EAAgC,MAAhC;AACD;;AAED,QAAI,uBAAQA,QAAQK,KAAhB,KAA0BL,QAAQK,KAAR,CAAcC,MAAd,CAAqB,UAACC,IAAD,EAAOL,IAAP;AAAA,aAAgBK,QAAQ,OAAOL,IAAP,KAAgB,QAAxC;AAAA,KAArB,EAAuE,KAAvE,CAA9B,EAA6G;AAC3GD,YAAM,UAAN;AACD;;AAED,QAAMO;AACJC,cAAQ,MADJ;AAEJC,eAAS,OAFL;AAGJC,gBAAU;AAHN,OAIHV,GAJG,EAIGD,OAJH,CAAN;;AAOA,WAAO,KAAKY,OAAL,CAAaJ,OAAb,EACJK,IADI,CACC,UAACC,GAAD;AAAA,aAASA,IAAIC,IAAb;AAAA,KADD,CAAP;AAED,GA/CiC;;;AAiDlC;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BAC,KA3EkC,eA2E9BhB,OA3E8B,EA2ErB;AACX,QAAMiB,KAAKjB,QAAQiB,EAAR,IAAcjB,OAAzB;;AAEA,WAAO,KAAKY,OAAL,CAAa;AAClBF,eAAS,OADS;AAElBC,8BAAsBM;AAFJ,KAAb,EAIJJ,IAJI,CAIC,UAACC,GAAD;AAAA,aAASA,IAAIC,IAAJ,CAASG,KAAT,IAAkBJ,IAAIC,IAA/B;AAAA,KAJD,CAAP;AAKD,GAnFiC;;;AAqFlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCAI,MA5HkC,gBA4H7BX,OA5H6B,EA4HpB;AAAA;;AACZ,WAAO,KAAKI,OAAL,CAAa;AAClBF,eAAS,OADS;AAElBC,gBAAU,UAFQ;AAGlBS,UAAIZ;AAHc,KAAb,EAKJK,IALI,CAKC,UAACC,GAAD;AAAA,aAAS,IAAIO,eAAJ,CAASP,GAAT,EAAc,MAAKQ,KAAnB,CAAT;AAAA,KALD,CAAP;AAMD,GAnIiC;;;AAqIlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCAC,QA7KkC,kBA6K3BvB,OA7K2B,EA6KlB;AACd,QAAMiB,KAAKjB,QAAQiB,EAAR,IAAcjB,OAAzB;;AAEA,WAAO,KAAKY,OAAL,CAAa;AAClBH,cAAQ,QADU;AAElBC,eAAS,OAFS;AAGlBC,8BAAsBM;AAHJ,KAAb,EAKJJ,IALI,CAKC,UAACC,GAAD,EAAS;AACb;AACA;AACA,UAAIA,IAAIU,UAAJ,KAAmB,GAAvB,EAA4B;AAC1B,eAAOC,SAAP;AACD;AACD,aAAOX,IAAIC,IAAX;AACD,KAZI,CAAP;AAaD,GA7LiC;AAAA;AAAA,CAAnB,CAAjB,C,CA7BA;;;;kBA6NenB,Q","file":"messages.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {SparkPlugin, Page} from '@ciscospark/spark-core';\nimport {isArray} from 'lodash';\n\n/**\n * @typedef {Object} MessageObject\n * @property {string} id - (server generated) Unique identifier for the message\n * @property {string} personId - The ID for the author of the messasge\n * @property {email} personEmail - The email for the author of the messasge\n * @property {string} roomId - The ID for the room of the message\n * @property {string} text - The message posted to the room in plain text\n * @property {string} markdown - The message posted to the room in markdown\n * @property {Array<string>} files - The source URL(s) for the message attachment(s).\n * See the {@link https://developer.webex.com/attachments.html|Message Attachments}\n * Guide for a list of supported media types.\n * @property {isoDate} created - (server generated) The date and time that the message was created\n */\n\n/**\n * Messages are how people communicate in rooms. Each message timestamped and\n * represented in Spark as a distinct block of content. Messages can contain\n * plain text and a single file attachment. See the\n * {@link https://developer.webex.com/attachments.html|Message Attachments} Guide\n * for a list of supported media types.\n * @class\n */\nconst Messages = SparkPlugin.extend({\n  /**\n   * Post a new message and/or media content into a room.\n   * @instance\n   * @memberof Messages\n   * @param {MessageObject} message\n   * @returns {Promise<MessageObject>}\n   * @example\n   * ciscospark.rooms.create({title: 'Create Message Example'})\n   *   .then(function(room) {\n   *     return ciscospark.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(message) {\n   *     var assert = require('assert');\n   *     assert(message.id);\n   *     assert(message.personId);\n   *     assert(message.personEmail);\n   *     assert(message.roomId);\n   *     assert(message.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create(message) {\n    let key = 'body';\n    if (message.file) {\n      this.logger.warn('Supplying a single `file` property is deprecated; please supply a `files` array');\n      message.files = [message.file];\n      Reflect.deleteProperty(message, 'file');\n    }\n\n    if (isArray(message.files) && message.files.reduce((type, file) => type || typeof file !== 'string', false)) {\n      key = 'formData';\n    }\n\n    const options = {\n      method: 'POST',\n      service: 'hydra',\n      resource: 'messages',\n      [key]: message\n    };\n\n    return this.request(options)\n      .then((res) => res.body);\n  },\n\n  /**\n   * Returns a single message.\n   * @instance\n   * @memberof Messages\n   * @param {RoomObject|string} message\n   * @returns {Promise<MessageObject>}\n   * @example\n   * var message;\n   * ciscospark.rooms.create({title: 'Get Message Example'})\n   *   .then(function(room) {\n   *     return ciscospark.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message = m;\n   *     return ciscospark.messages.get(message.id);\n   *   })\n   *   .then(function(message2) {\n   *     var assert = require('assert');\n   *     assert.deepEqual(message2, message);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get(message) {\n    const id = message.id || message;\n\n    return this.request({\n      service: 'hydra',\n      resource: `messages/${id}`\n    })\n      .then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * Returns a list of messages. In most cases the results will only contain\n   * messages posted in rooms that the authentiated user is a member of.\n   * @instance\n   * @memberof Messages\n   * @param {Object} options\n   * @param {string} options.roomId\n   * @param {number} options.max\n   * @returns {Promise<Page<MessageObject>>}\n   * @example\n   * var message1, message2, room;\n   * ciscospark.rooms.create({title: 'List Messages Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return ciscospark.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message1 = m;\n   *     return ciscospark.messages.create({\n   *       text: 'How are you?',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message2 = m;\n   *     return ciscospark.messages.list({roomId: room.id});\n   *   })\n   *   .then(function(messages) {\n   *     var assert = require('assert');\n   *     assert.equal(messages.length, 2);\n   *     assert.equal(messages.items[0].id, message2.id);\n   *     assert.equal(messages.items[1].id, message1.id);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list(options) {\n    return this.request({\n      service: 'hydra',\n      resource: 'messages',\n      qs: options\n    })\n      .then((res) => new Page(res, this.spark));\n  },\n\n  /**\n   * Deletes a single message. Deleting a message will notify all members of the\n   * room that the authenticated user deleted the message. Generally, users can\n   * only delete their own messages except for the case of Moderated Rooms and\n   * Org Administrators.\n   * @instance\n   * @memberof Messages\n   * @param {MessageObject|uuid} message\n   * @returns {Promise}}\n   * @example\n   * var message1, room;\n   * ciscospark.rooms.create({title: 'Messages Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return ciscospark.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message1 = m;\n   *     return ciscospark.messages.create({\n   *       text: 'How are you?',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return ciscospark.messages.remove(message1);\n   *   })\n   *   .then(function() {\n   *     return ciscospark.messages.list({roomId: room.id});\n   *   })\n   *   .then(function(messages) {\n   *     var assert = require('assert');\n   *     assert.equal(messages.items.length, 1);\n   *     assert(messages.items[0].id !== message1.id);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  remove(message) {\n    const id = message.id || message;\n\n    return this.request({\n      method: 'DELETE',\n      service: 'hydra',\n      resource: `messages/${id}`\n    })\n      .then((res) => {\n        // Firefox has some issues with 204s and/or DELETE. This should move to\n        // http-core\n        if (res.statusCode === 204) {\n          return undefined;\n        }\n        return res.body;\n      });\n  }\n});\n\nexport default Messages;\n"]}