{"version":3,"sources":["state-parsers.js"],"names":["activeParticipants","direction","waitForMediaShare","isActive","isCall","joined","joinedOnThisDevice","participantsToCallMemberships","participantToCallMembership","participantStateToCallMembershipState","makeInternalCallId","mediaDirection","participantIsJoined","remoteParticipant","remoteParticipants","remoteAudioMuted","remoteVideoMuted","shouldRing","getState","getStatus","getThisDevice","locus","participants","state","self","isCreator","call","curriedFindShare","promise","resolve","reject","findShare","logger","info","mediaShare","mediaShares","find","share","name","once","err","error","race","setTimeout","Error","fullState","type","Boolean","spark","internal","device","url","deviceUrl","users","devices","participant","set","memberships","forEach","membership","deviceParticipant","get","audioMuted","videoMuted","push","personId","personUuid","person","isExternal","id","people","inferPersonIdFromUuid","_id","isSelf","isInitiator","toLowerCase","lastActive","mediaType","status","filter","audioStatus","includes","videoStatus","previousLocus","remote","replaces","replaced","locusUrl","local","item"],"mappings":"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","file":"state-parsers.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {filter, get} from 'lodash';\n\n/**\n * Finds the Locus's active participants\n * @param {Types~Locus} locus\n * @private\n * @returns {Array<Types~LocusParticipant>}\n */\nexport function activeParticipants(locus) {\n  return filter(locus.participants, {state: 'JOINED'});\n}\n\n/**\n * Indicates if the locus was activated form this device\n * @param {Types~Locus} locus\n * @private\n * @returns {string} unknown|in|out\n */\nexport function direction(locus) {\n  if (!locus || !locus.self) {\n    return 'unknown';\n  }\n  return locus.self.isCreator ? 'out' : 'in';\n}\n\n/**\n * Finds the media share share for the call, potentially setting up event\n * listeners to wait for a new Locus\n * @param {Call} call\n * @private\n * @returns {Promise<Types~MediaShare>}\n */\nexport function waitForMediaShare(call) {\n  return function curriedFindShare() {\n    const promise = new Promise((resolve, reject) => {\n      /**\n       * Searches the call's current locus for the screen share entry in media\n       * shares\n       *\n       * @returns {undefined}\n       */\n      function findShare() {\n        try {\n          call.logger.info('checking for media share');\n          const mediaShare = call.locus.mediaShares.find((share) => share.name === 'content');\n          if (!mediaShare) {\n            call.logger.info('did not find media share, waiting for next locus change');\n            call.once('change:locus', findShare);\n            return;\n          }\n\n          call.logger.info('found media share');\n          resolve(mediaShare);\n        }\n        catch (err) {\n          call.logger.error('something unexpected happened');\n          call.logger.error(err);\n          reject(err);\n        }\n      }\n\n      findShare();\n    });\n\n    return Promise.race([\n      promise,\n      new Promise((resolve, reject) => setTimeout(reject(new Error('Could not find media share after 10000ms')), 10000))\n    ]);\n  };\n}\n\n/**\n * Indicates of the specified locus is active\n * @param {Types~Locus} locus\n * @private\n * @returns {Boolean}\n */\nexport function isActive(locus) {\n  return locus.fullState.state === 'ACTIVE';\n}\n\n/**\n * Indicates if the specified locus represents a call (in other words, has\n * exactly two participants)\n * @param {Types~Locus} locus\n * @private\n * @returns {Boolean}\n */\nexport function isCall(locus) {\n  return locus && locus.fullState && locus.fullState.type === 'CALL';\n}\n\n/**\n * Indicates if the current user has joined the Locus\n * @param {Types~Locus} locus\n * @private\n * @returns {Boolean}\n */\nexport function joined(locus) {\n  return Boolean(locus.self && participantIsJoined(locus.self));\n}\n\n/**\n * Indicates if this device has joined the locus\n * @param {ProxySpark} spark\n * @param {Types~Locus} locus\n * @private\n * @returns {Boolean}\n */\nexport function joinedOnThisDevice(spark, locus) {\n  return joined(locus) && spark.internal.device.url === locus.self.deviceUrl;\n}\n\n/**\n * Converts a list of participants to a list of memberships\n * @param {SparkCore} spark\n * @param {Types~Locus} locus\n * @private\n * @returns {Array<CallMembership>}\n */\nexport function participantsToCallMemberships(spark, locus) {\n  const users = new Map();\n  const devices = new Map();\n\n  for (const participant of locus.participants) {\n    if (participant.type === 'USER') {\n      users.set(participant.url, participant);\n    }\n    else if (participant.type === 'RESOURCE_ROOM') {\n      devices.set(participant.url, participant);\n    }\n  }\n  const memberships = [];\n  users.forEach((participant) => {\n    const membership = participantToCallMembership(spark, locus, participant);\n    if (participant.devices) {\n      for (const device of participant.devices) {\n        if (device.state === 'JOINED' && get(device, 'intent.type') === 'OBSERVE') {\n          const deviceParticipant = devices.get(device.url);\n          membership.audioMuted = remoteAudioMuted(deviceParticipant);\n          membership.videoMuted = remoteVideoMuted(deviceParticipant);\n        }\n      }\n    }\n    memberships.push(membership);\n  });\n\n  return memberships;\n}\n\n/**\n * Converts a single participant to a membership\n * @param {SparkCore} spark\n * @param {Types~Locus} locus\n * @param {Object} participant\n * @private\n * @returns {CallMembership}\n */\nexport function participantToCallMembership(spark, locus, participant) {\n  let personId, personUuid;\n  if (!participant.person.isExternal) {\n    personUuid = participant.person.id;\n    personId = spark.people.inferPersonIdFromUuid(participant.person.id);\n  }\n\n  return {\n    _id: participant.id,\n    isSelf: locus.self.url === participant.url,\n    isInitiator: participant.isCreator || false,\n    personUuid,\n    personId,\n    state: participantStateToCallMembershipState(participant),\n    audioMuted: remoteAudioMuted(participant),\n    videoMuted: remoteVideoMuted(participant)\n  };\n}\n\n/**\n *\n * Maps participant details to membership state enum\n * @param {LocusParticipant} participant\n * @private\n * @returns {string}\n */\nexport function participantStateToCallMembershipState(participant) {\n  const state = participant.state && participant.state.toLowerCase();\n  switch (state) {\n    case 'idle':\n      return 'notified';\n    case 'joined':\n      return 'connected';\n    case 'left':\n      return 'disconnected';\n    default:\n      return state;\n  }\n}\n\n/**\n * Creates a unique identifier for a call (but not necessarily the \"callId\" that\n * we'll someday expose as a first-class property)\n *\n * @param {Object} locus\n * @private\n * @returns {string}\n */\nexport function makeInternalCallId(locus) {\n  return `${locus.url}_${locus.fullState.lastActive}`;\n}\n\n/**\n * Indicates the direction of the specified media type for the specified\n * participant\n * @param {string} mediaType\n * @param {Types~LocusParticipant} participant\n * @private\n * @returns {string} One of `sendonly`, `recvonly`, `sendrecv`, or `inactive`\n */\nexport function mediaDirection(mediaType, participant) {\n  if (!participant) {\n    return 'inactive';\n  }\n\n  if (!participant.status) {\n    return 'inactive';\n  }\n\n  return (participant.status[`${mediaType}Status`] || 'inactive').toLowerCase();\n}\n\n/**\n * Indicates if the specified participant has joined the Locus\n * @param {Types~LocusParticipant} participant\n * @private\n * @returns {Boolean}\n */\nexport function participantIsJoined(participant) {\n  return participant && participant.state === 'JOINED';\n}\n\n/**\n * Finds the party in the call that is not the current user\n * @param {Types~Locus} locus\n * @private\n * @returns {Types~LocusParticipant}\n */\nexport function remoteParticipant(locus) {\n  return remoteParticipants(locus)[0];\n}\n\n/**\n * Finds all participants of the Locus that are not the current user\n * @param {Types~Locus} locus\n * @private\n * @returns {Types~LocusParticipant}\n */\nexport function remoteParticipants(locus) {\n  return locus.participants.filter((participant) => participant.type === 'USER' && participant.url !== locus.self.url);\n}\n\n/**\n * Indicates if the remote party is sending audio\n * @param {Types~LocusParticipant} participant\n * @private\n * @returns {Boolean}\n */\nexport function remoteAudioMuted(participant) {\n  return participantIsJoined(participant) && !participant.status.audioStatus.includes('SEND');\n}\n\n/**\n * Indicates if the remote party is sending video\n * @param {Types~LocusParticipant} participant\n * @private\n * @returns {Boolean}\n */\nexport function remoteVideoMuted(participant) {\n  return participantIsJoined(participant) && !participant.status.videoStatus.includes('SEND');\n}\n\n/**\n * Indicates if the `call:incoming` event should be fired for the specified Locus\n * @param {Types~Locus} locus Event which delivered the Locus\n * @param {ProxySpark} spark\n * @private\n * @returns {Boolean}\n */\nexport function shouldRing(locus) {\n  return get(locus, 'self.alertType.action') !== 'NONE';\n}\n\n/**\n * Determines the call state from a locus object\n * @param {Types~Locus} locus\n * @private\n * @returns {string}\n */\nexport function getState(locus) {\n  return locus && locus.fullState && locus.fullState.state.toLowerCase();\n}\n\n// there's really no good way to split getStatus() up that won't make it less readable\n/* eslint-disable complexity */\n/**\n * Determines the call state from a locus object. avoids the caching caused by\n * amp state because that leads to out-of-order updates\n * @param {ProxySpark} spark\n * @param {Types~Locus} locus\n * @param {Types~Locus} previousLocus\n * @private\n * @returns {string}\n */\nexport function getStatus(spark, locus, previousLocus) {\n  if (locus) {\n    const remote = remoteParticipant(locus);\n\n    if (remote) {\n      if (joinedOnThisDevice(spark, locus) && remote && participantIsJoined(remote)) {\n        return 'connected';\n      }\n      if (locus.replaces) {\n        for (const replaced of locus.replaces) {\n          if (replaced.locusUrl === previousLocus.url && replaced.lastActive === get(previousLocus, 'fullState.lastActive')) {\n            return 'replaced';\n          }\n        }\n      }\n\n      const local = locus.self;\n      if (remote.state === 'LEFT' || local.state === 'LEFT') {\n        return 'disconnected';\n      }\n\n      if (remote.state === 'DECLINED') {\n        return 'disconnected';\n      }\n\n      if (remote.state === 'NOTIFIED') {\n        return 'ringing';\n      }\n    }\n  }\n  return 'initiated';\n}\n\n/**\n * Finds the `self` entry for the specified locus\n * @param {ProxySpark} spark\n * @param {Types~Locus} locus\n * @returns {Object}\n */\nexport function getThisDevice(spark, locus) {\n  return locus && locus.self && locus.self.devices.find((item) => item.url === spark.internal.device.url);\n}\n"]}