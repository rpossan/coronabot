{"version":3,"sources":["call.js"],"names":["boolToDirection","webrtcHelpers","deprecatedCallEventNames","getMediaDirectionFromSDP","kind","sdp","parsed","media","find","m","type","content","direction","reverseMediaDirection","dir","Error","capitalize","audio","video","Call","SparkPlugin","extend","namespace","children","WebRTCMediaEngine","collections","memberships","CallMemberships","session","activeParticipantsCount","default","required","remoteAudioMuted","remoteVideoMuted","correlationId","facingMode","values","internalCallId","setOnce","locus","localMediaStream","locusJoinInFlight","locusLeaveInFlight","me","derived","id","deps","fn","isActive","joinedOnThisDevice","spark","locusUrl","device","mediaConnection","mediaId","remoteMember","isSelf","undefined","from","isCall","isInitiator","to","state","config","enableExperimentalGroupCallingSupport","status","previousAttributes","remoteMediaStream","localScreenShare","receivingAudio","receivingVideo","sendingAudio","sendingVideo","supportsDtmf","acknowledge","logger","info","internal","alert","then","setLocus","answer","options","resolve","pc","remoteDescription","createOrJoinLocus","changeReceivingMedia","value","offerSdp","section","includes","once","newDirection","console","warn","setMedia","changeSendingMedia","tracks","senderTracks","filter","t","length","updateMuteToggles","reject","cleanup","process","nextTick","stop","stopListening","mercury","off","target","constraints","ideal","phone","defaultFacingMode","mode","recvOnly","offerOptions","offerToReceiveAudio","offerToReceiveVideo","fake","uuid","v4","bandwidthLimit","audioBandwidthLimit","videoBandwidthLimit","createOffer","createOrJoin","localSdp","JSON","parse","remoteSdp","signalingState","ended","acceptAnswer","catch","err","error","decline","dial","invitee","base64","validate","decode","split","resourceType","url","services","conversationServiceUrl","connect","reason","trigger","getRawStatsStream","StatsStream","getStatsStream","pipe","StatsFilter","hangup","when","leave","initialize","initArgs","prototype","on","onChangeActiveParticipantsCount","onChangeIsActive","onChangeLocalMediaStream","onChangeRemoteMember","forEach","key","listenTo","args","onMembershipsAudioMuted","onMembershipsChangeState","onMembershipsVideoMuted","event","onLocusEvent","onMediaNegotiationNeeded","listenToAndRun","participants","set","eventName","rest","stack","toString","devices","item","data","eventType","replaces","replaced","lastActive","audioMuted","videoMuted","model","offer","audioOfferDir","videoOfferDir","screenOfferDir","updateMediaOptions","updateMedia","pollForExpectedLocusAndSdp","emit","track","getTracks","enabled","hangupIfLastActive","call","meeting","previousLocus","self","count","isExpectedDirection","validateLocusMediaState","setTimeout","sync","audioAnswerDir","videoAnswerDir","screenAnswerDir","expectedAudioAnswerDir","expectedVideoAnswerDir","expectedScreenAnswerDir","releaseFloor","mediaShare","releaseFloorGrant","requestFloor","requestFloorGrant","incoming","recursing","current","action","compare","USE_INCOMING","merge","FETCH","get","sendDtmf","tones","sendFeedback","feedback","metrics","submit","startApplicationShare","mediaSource","startScreenShare","startReceivingAudio","startReceivingVideo","startSendingAudio","startSendingVideo","stopScreenShare","stopReceivingAudio","stopReceivingVideo","stopSendingAudio","stopSendingVideo","toggleFacingMode","constraint","toggleReceivingAudio","toggleReceivingVideo","toggleSendingAudio","toggleSendingVideo","payload","updateVideoMuteSdp","isMuted","newDir","oldDir","replace","RegExp","locusAudio","audioStatus","toLowerCase","mediaAudio","audioDirection","locusVideo","videoStatus","mediaVideo","videoDirection","waitForExpectedLocus","listener","oneFlight","retry","make","attrs"],"mappings":"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","file":"call.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\n/* eslint-env browser: true */\n\nimport {defaults, find, get, wrap} from 'lodash';\nimport {debounce} from 'lodash-decorators';\nimport {parse} from 'sdp-transform';\nimport uuid from 'uuid';\nimport {SparkPlugin} from '@ciscospark/spark-core';\nimport {\n  base64,\n  deprecated,\n  oneFlight,\n  retry,\n  tap,\n  whileInFlight\n} from '@ciscospark/common';\nimport {\n  USE_INCOMING,\n  FETCH\n} from '@ciscospark/internal-plugin-locus';\nimport WebRTCMediaEngine, {webrtcHelpers} from '@ciscospark/media-engine-webrtc';\n\nimport {\n  waitForMediaShare,\n  getState,\n  getStatus,\n  getThisDevice,\n  isCall,\n  activeParticipants,\n  direction,\n  isActive,\n  joinedOnThisDevice,\n  makeInternalCallId,\n  participantsToCallMemberships\n} from './state-parsers';\nimport boolToStatus from './bool-to-status';\nimport CallMemberships from './call-memberships';\nimport StatsFilter from './stats/filter';\nimport StatsStream from './stats/stream';\n\nconst {\n  boolToDirection\n} = webrtcHelpers;\n\nconst deprecatedCallEventNames = [\n  'ringing',\n  'connected',\n  'disconnected',\n  'replaced'\n];\n\n/**\n * Pulls the direction line for the specified media kind from an sdp\n * @param {string} kind\n * @param {string} sdp\n * @private\n * @returns {string}\n */\nfunction getMediaDirectionFromSDP(kind, sdp) {\n  const parsed = typeof sdp === 'string' ? parse(sdp) : sdp;\n\n  let media;\n  if (kind === 'screen') {\n    media = parsed.media.find((m) => m.type === 'video' && m.content);\n  }\n  else {\n    media = parsed.media.find((m) => m.type === kind);\n  }\n  if (!media || !media.direction) {\n    return 'inactive';\n  }\n\n  return media.direction;\n}\n\n/**\n * Reverses a media direction from offer to answer (e.g. sendonly -> recvonly)\n * @param {string} dir\n * @private\n * @returns {string}\n */\nfunction reverseMediaDirection(dir) {\n  switch (dir) {\n    case 'inactive':\n    case 'sendrecv':\n      return dir;\n    case 'sendonly':\n      return 'recvonly';\n    case 'recvonly':\n      return 'sendonly';\n    default:\n      throw new Error(`direction \"${dir}\" is not valid`);\n  }\n}\n\nconst capitalize = {\n  audio: 'Audio',\n  video: 'Video'\n};\n\n/**\n * @event ringing\n * @instance\n * @memberof Call\n * @deprecated with {@link PhoneConfig.enableExperimentalGroupCallingSupport}\n * enabled; instead, listen for {@link Call.membership:notified}\n */\n\n/**\n * @event connected\n * @instance\n * @memberof Call\n * @deprecated with {@link PhoneConfig.enableExperimentalGroupCallingSupport}\n * enabled; instead, listen for {@link Call.active}\n */\n\n/**\n * @event disconnected\n * @instance\n * @memberof Call\n * @deprecated with {@link PhoneConfig.enableExperimentalGroupCallingSupport}\n * enabled; instead, listen for {@link Call.inactive}\n */\n\n/**\n * @event active\n * @instance\n * @memberof Call\n * @description only emitted if enableExperimentalGroupCallingSupport is enabled\n */\n\n/**\n * @event initializing\n * @instance\n * @memberof Call\n * @description only emitted if enableExperimentalGroupCallingSupport is enabled\n */\n\n/**\n * @event inactive\n * @instance\n * @memberof Call\n * @description only emitted if enableExperimentalGroupCallingSupport is enabled\n */\n\n/**\n * @event terminating\n * @instance\n * @memberof Call\n * @description only emitted if enableExperimentalGroupCallingSupport is enabled\n */\n\n/**\n * @event localMediaStream:change\n * @instance\n * @memberof Call\n */\n\n/**\n * @event remoteMediaStream:change\n * @instance\n * @memberof Call\n */\n\n/**\n * @event error\n * @instance\n * @memberof Call\n */\n\n/**\n * @event membership:notified\n * @instance\n * @memberof Call\n * @type {CallMembership}\n * @description This replaces the {@link Call.ringing} event, but note that it's\n * subtly different. {@link Call.ringing} is emitted when the remote party calls\n * {@link Call#acknowledge()} whereas {@link Call.membership:notified} emits\n * shortly after (but as a direct result of) locally calling\n * {@link Phone#dial()}\n */\n\n/**\n * @event membership:connected\n * @instance\n * @memberof Call\n * @type {CallMembership}\n */\n\n/**\n * @event membership:declined\n * @instance\n * @memberof Call\n * @type {CallMembership}\n */\n\n/**\n * @event membership:disconnected\n * @instance\n * @memberof Call\n * @type {CallMembership}\n */\n\n/**\n * @event membership:waiting\n * @instance\n * @memberof Call\n * @type {CallMembership}\n */\n\n/**\n * @event membership:change\n * @instance\n * @memberof Call\n * @type {CallMembership}\n */\n\n/**\n * @event memberships:add\n * @instance\n * @memberof Call\n * @description Emitted when a new {@link CallMembership} is added to\n * {@link Call#memberships}. Note that {@link CallMembership#state} still needs\n * to be read to determine if the instance represents someone actively\n * participating the call.\n */\n\n/**\n * @event memberships:remove\n * @instance\n * @memberof Call\n * @description Emitted when a {@link CallMembership} is removed from\n * {@link Call#memberships}.\n */\n\n/**\n * Payload for {@link Call#sendFeedback}\n * @typedef {Object} FeedbackObject\n * @property {number} userRating Number between 1 and 5 (5 being best) to let\n * the user score the call\n * @property {string} userComments Freeform feedback from the user about the\n * call\n * @property {Boolean} includeLogs set to true to submit client logs to the\n * Cisco Spark cloud. Note: at this time, all logs, not just call logs,\n * generated by the sdk will be uploaded to the Spark Cloud. Care has been taken\n * to avoid including PII in these logs, but if you've taken advantage of the\n * SDK's logger, you should make sure to avoid logging PII as well.\n */\n\n/**\n * @class\n */\nconst Call = SparkPlugin.extend({\n  namespace: 'Phone',\n\n  children: {\n    media: WebRTCMediaEngine\n  },\n\n  collections: {\n    /**\n     * @instance\n     * @memberof Call\n     * @type CallMemberships\n     */\n    memberships: CallMemberships\n  },\n\n  session: {\n    activeParticipantsCount: {\n      default: 0,\n      required: true,\n      type: 'number'\n    },\n    /**\n     * Indicates if the other party in the call has turned off their microphone.\n     * `undefined` for multiparty calls\n     * @instance\n     * @memberof Call\n     * @readonly\n     * @type {boolean}\n     */\n    remoteAudioMuted: {\n      default: false,\n      required: false,\n      type: 'boolean'\n    },\n\n    /**\n     * Indicates if the other party in the call has turned off their camera.\n     * `undefined` for multiparty calls\n     * @instance\n     * @memberof Call\n     * @readonly\n     * @type {boolean}\n     */\n    remoteVideoMuted: {\n      default: false,\n      required: false,\n      type: 'boolean'\n    },\n\n    correlationId: 'string',\n    /**\n     * @instance\n     * @memberof Call\n     * @readonly\n     * @type {string}\n     */\n    facingMode: {\n      type: 'string',\n      values: ['user', 'environment']\n    },\n    /**\n     * Derived from locus.id and locus.fullState.lastActive. Not actually a\n     * \"derived\" property because it shouldn't be reset in event a locus\n     * replacement. Marked as private because this isn't necessarily the callId\n     * that we'll eventually expose as a first-class feature.\n     * @instance\n     * @memberof Call\n     * @private\n     * @readonly\n     * @type {string}\n     */\n    internalCallId: {\n      setOnce: true,\n      type: 'string'\n    },\n    locus: 'object',\n    /**\n     * Returns the local MediaStream for the call. May initially be `null`\n     * between the time @{Phone#dial is invoked and the  media stream is\n     * acquired if {@link Phone#dial} is invoked without a `localMediaStream`\n     * option.\n     *\n     * This property can also be set mid-call in which case the streams sent to\n     * the remote party are replaced by this stream. On success, the\n     * {@link Call}'s {@link localMediaStream:change} event fires, notifying any\n     * listeners that we are now sending media from a new source.\n     * @instance\n     * @memberof Call\n     * @type {MediaStream}\n     */\n    localMediaStream: 'object',\n\n    locusJoinInFlight: {\n      default: false,\n      type: 'boolean'\n    },\n    locusLeaveInFlight: {\n      default: false,\n      type: 'boolean'\n    },\n    /**\n     * Test helper. Shortcut to the current user's membership object. not\n     * official for now, but may get published at some point\n     * @instance\n     * @memberof Call\n     * @private\n     * @type {CallMembership}\n     */\n    me: {\n      type: 'object'\n    }\n  },\n\n  // Note, in its current form, any derived property that is an object will emit\n  // a change event everytime a locus gets replaced, even if no values change.\n  // For the moment, this is probably ok; once we have multi-party, regular\n  // change events on activeParticipants may be a problem.\n  derived: {\n    id: {\n      deps: ['locus'],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        return get(this, 'locus.url');\n      }\n    },\n    isActive: {\n      deps: ['locus'],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        return !!(this.locus && isActive(this.locus));\n      }\n    },\n    joinedOnThisDevice: {\n      deps: ['locus'],\n      default: false,\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        return !!(this.locus && joinedOnThisDevice(this.spark, this.locus));\n      }\n    },\n    locusUrl: {\n      deps: ['locus'],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        return get(this, 'locus.url');\n      }\n    },\n    device: {\n      deps: ['locus'],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        return getThisDevice(this.spark, this.locus);\n      }\n    },\n    mediaConnection: {\n      deps: ['locus'],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        const device = getThisDevice(this.spark, this.locus);\n        return get(device, 'mediaConnections[0]');\n      }\n    },\n    mediaId: {\n      deps: ['locus'],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        const device = getThisDevice(this.spark, this.locus);\n        return get(device, 'mediaConnections[0].mediaId');\n      }\n    },\n    /**\n     * The other participant in a two-party call. `undefined` for multiparty\n     * calls\n     * @instance\n     * @memberof Call\n     * @readyonly\n     * @type {CallMembership}\n     */\n    remoteMember: {\n      deps: [\n        'memberships',\n        'locus'\n      ],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        if (isCall(this.locus)) {\n          return this.memberships.find((m) => !m.isSelf);\n        }\n\n        return undefined;\n      }\n    },\n    direction: {\n      deps: ['locus'],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        // This seems brittle, but I can't come up with a better way. The only\n        // way we should have a Call without a locus is if we just initiated a\n        // call but haven't got the response from locus yet.\n        if (!this.locus) {\n          return 'out';\n        }\n        return direction(this.locus);\n      }\n    },\n    from: {\n      deps: [\n        'memberships'\n      ],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        if (this.isCall) {\n          return this.memberships.find((m) => m.isInitiator);\n        }\n        return undefined;\n      }\n    },\n    to: {\n      deps: [\n        'memberships'\n      ],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        if (this.isCall) {\n          return this.memberships.find((m) => !m.isInitiator);\n        }\n        return undefined;\n      }\n    },\n    /**\n     * <b>active</b> - At least one person (not necessarily this user) is\n     * participating in the call<br/>\n     * <b>inactive</b> - No one is participating in the call<br/>\n     * <b>initializing</b> - reserved for future use<br/>\n     * <b>terminating</b> - reserved for future use<br/>\n     * Only defined if\n     * {@link PhoneConfig.enableExperimentalGroupCallingSupport} has been\n     * enabled\n     * @instance\n     * @memberof Call\n     * @member {string}\n     * @readonly\n     */\n    state: {\n      deps: [\n        'locus'\n      ],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        if (this.config.enableExperimentalGroupCallingSupport) {\n          return getState(this.locus);\n        }\n\n        return undefined;\n      }\n    },\n    /**\n     * <b>initiated</b> - Offer was sent to remote party but they have not yet\n     * accepted <br>\n     * <b>ringing</b> - Remote party has acknowledged the call <br>\n     * <b>connected</b> - At least one party is still on the call <br>\n     * <b>disconnected</b> - All parties have dropped <br>\n     * <b>replaced</b> - In (hopefully) rare cases, the underlying data backing\n     * a Call instance may change in such a way that further interaction with\n     * that Call is handled by a different instance. In such cases, the first\n     * Call's status, will transition to `replaced`, which is almost the same\n     * state as `disconnected`. Generally speaking, such a transition should not\n     * happen for a Call instance that is actively sending/receiving media.\n     * @deprecated The {@link Call#status} attribute will likely be replaced by\n     * the {@link Call#state}.\n     * @instance\n     * @memberof Call\n     * @member {string}\n     * @readonly\n     */\n    status: {\n      deps: [\n        'locus'\n      ],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        return getStatus(this.spark, this.locus, this.previousAttributes().locus);\n      }\n    },\n    /**\n     * Access to the remote party’s `MediaStream`.\n     * @instance\n     * @memberof Call\n     * @member {MediaStream}\n     * @readonly\n     */\n    remoteMediaStream: {\n      deps: ['media.remoteMediaStream'],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        return this.media.remoteMediaStream;\n      }\n    },\n    /**\n     * Access to the local party’s screen share `MediaStream`.\n     * @instance\n     * @memberof Call\n     * @member {MediaStream}\n     * @readonly\n     */\n    localScreenShare: {\n      deps: ['media.localScreenShare'],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        return this.media.localScreenShare;\n      }\n    },\n    receivingAudio: {\n      deps: ['media.receivingAudio'],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        return this.media.receivingAudio;\n      }\n    },\n    receivingVideo: {\n      deps: ['media.receivingVideo'],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        return this.media.receivingVideo;\n      }\n    },\n    sendingAudio: {\n      deps: ['media.sendingAudio'],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        return this.media.sendingAudio;\n      }\n    },\n    sendingVideo: {\n      deps: ['media.sendingVideo'],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        return this.media.sendingVideo;\n      }\n    },\n    isCall: {\n      deps: ['locus'],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        return isCall(this.locus);\n      }\n    },\n    supportsDtmf: {\n      deps: ['locus'],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        return get(this, 'locus.self.enableDTMF');\n      }\n    }\n  },\n\n  @oneFlight\n  /**\n   * Use to acknowledge (without answering) an incoming call. Will cause the\n   * initiator's Call instance to emit the ringing event.\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  acknowledge() {\n    this.logger.info('call: acknowledging');\n    return this.spark.internal.locus.alert(this.locus)\n      .then((locus) => this.setLocus(locus))\n      .then(tap(() => this.logger.info('call: acknowledged')));\n  },\n\n  @oneFlight\n  @whileInFlight('locusJoinInFlight')\n  // Note: the `whileInFlight` decorator screws up name inferrence, so we need\n  // to include @name below.\n  /**\n   * Answers an incoming call.\n   * @instance\n   * @name answer\n   * @memberof Call\n   * @param {Object} options\n   * @param {MediaStreamConstraints} options.constraints\n   * @returns {Promise}\n   */\n  answer(options) {\n    this.logger.info('call: answering');\n    if (!this.locus) {\n      this.logger.info('call: no locus provided, answer() is a noop');\n      return Promise.resolve();\n    }\n    // Locus may think we're joined on this device if we e.g. reload the page,\n    // so, we need to check if we also have a working peer connection\n    // this.media.pc.remoteDescription.sdp is a temporary proxy for\n    // pc.connectionState until chrome catches up to the spec\n    if (this.joinedOnThisDevice && this.media.pc.remoteDescription && this.media.pc.remoteDescription.sdp) {\n      this.logger.info('call: already joined on this device');\n      return Promise.resolve();\n    }\n    return this.createOrJoinLocus(this.locus, options)\n      .then(tap(() => this.logger.info('call: answered')));\n  },\n\n  /**\n   * Change the receiving media state. may induce a renegoatiation\n   * @instance\n   * @memberof Call\n   * @param {string} kind one of \"audio\" or \"video\"\n   * @param {boolean} value\n   * @private\n   * @returns {Promise}\n   */\n  changeReceivingMedia(kind, value) {\n    return new Promise((resolve) => {\n      const sdp = parse(this.media.offerSdp);\n      const section = find(sdp.media, {type: kind});\n      // If the current offer is going to trigger a renegotiation, then we don't\n      // need to renegotiate here.\n      if (!section || !section.direction.includes('recv')) {\n        this.logger.info('changeReceivingMedia: expecting to renegotiate, waiting for media to emit \"answeraccepted\"');\n        this.media.once('answeraccepted', () => resolve());\n      }\n      else {\n        this.logger.info(`changeReceivingMedia: expecting to renegotiate, waiting for call to emit \"change:receiving${capitalize[kind]}\"`);\n        this.once(`change:receiving${capitalize[kind]}`, () => resolve());\n      }\n\n      const newDirection = boolToStatus(this.media[`sending${capitalize[kind]}`], value);\n      console.warn(`starting to setMedia ${kind} to ${newDirection}`);\n      this.media.setMedia(kind, newDirection);\n    });\n  },\n\n  /**\n   * Change the receiving media state. may induce a renegoatiation\n   * @instance\n   * @memberof Call\n   * @param {string} kind one of \"audio\" or \"video\"\n   * @param {boolean} value\n   * @private\n   * @returns {Promise}\n   */\n  changeSendingMedia(kind, value) {\n    // Changing media direction only should not trigger renegotiation as long as a new\n    // track is not introduced. If that is the case we would expect renegotiation to happen.\n    this.logger.info(`changeSendingMedia: changing sending \"${kind}\" to \"${value}\"`);\n    if (['audio', 'video'].includes(kind)) {\n      const tracks = this.media.senderTracks.filter((t) => t.kind === kind);\n      const newDirection = boolToStatus(value, this.media[`receiving${capitalize[kind]}`]);\n\n      if (tracks.length > 0) {\n        // track already exists, we only need to toggle direction\n        return this.media.setMedia(kind, newDirection)\n          .then(() => this.updateMuteToggles(kind, value));\n      }\n\n      // adding a new track and needs renegotiation\n      return new Promise((resolve) => {\n        this.once('mediaNegotiationCompleted', () => resolve());\n        this.media.setMedia(kind, newDirection);\n      });\n    }\n\n    return Promise.reject(new Error('kind must be one of \"audio\" or \"video\"'));\n  },\n\n\n  /**\n   * Does the cleanup after a call has ended\n   * @instance\n   * @memberof Call\n   * @private\n   * @returns {Promise}\n   */\n  cleanup() {\n    return new Promise((resolve) => {\n      // need to do this on next tick otherwise this.off() prevents remaining\n      // events from being received (e.g. other listeners for `disconnected`\n      // won't execute)\n      process.nextTick(() => {\n        this.media.stop();\n        this.stopListening(this.spark.internal.mercury);\n        this.off();\n        resolve();\n      });\n    });\n  },\n\n  // The complexity in createOrJoinLocus is largely driven up by fairly readable `||`s\n  /* eslint-disable complexity */\n  @oneFlight\n  /**\n   * Call and answer require nearly identical logic, so this method unifies them.\n   * @instance\n   * @memberof Call\n   * @param {Object|locus} target\n   * @param {Object} options\n   * @todo remove 'locusMethodName' and move that logic to locus plugin\n   * @todo move options and target processing to separate function\n   * @todo rename to join()?\n   * @returns {Promise}\n   */\n  createOrJoinLocus(target, options = {}) {\n    if (options.localMediaStream) {\n      this.localMediaStream = options.localMediaStream;\n    }\n    else {\n      if (!options.constraints) {\n        options.constraints = {\n          audio: true,\n          video: {\n            facingMode: {\n              ideal: this.spark.phone.defaultFacingMode\n            }\n          }\n        };\n      }\n\n      const mode = get(options, 'constraints.video.facingMode.ideal', get(options, 'constraints.video.facingMode.exact'));\n      if (mode === 'user' || mode === 'environment') {\n        this.facingMode = mode;\n      }\n\n      const recvOnly = !options.constraints.audio && !options.constraints.video;\n      options.offerOptions = defaults(options.offerOptions, {\n        offerToReceiveAudio: recvOnly || !!options.constraints.audio,\n        offerToReceiveVideo: recvOnly || !!options.constraints.video\n      });\n\n      if (options.constraints.fake) {\n        this.media.constraints.fake = true;\n      }\n\n      this.media.setMedia('audio', boolToStatus(options.constraints.audio, options.offerOptions.offerToReceiveAudio), options.constraints.audio);\n      if (get(options, 'constraints.video.mediaSource') === 'screen' || get(options, 'constraints.video.mediaSource') === 'application') {\n        this.media.setMedia('screen', 'sendonly');\n      }\n      else {\n        this.media.setMedia('video', boolToStatus(options.constraints.video, options.offerOptions.offerToReceiveVideo), options.constraints.video);\n      }\n    }\n\n    if (!target.correlationId) {\n      options.correlationId = uuid.v4();\n      this.correlationId = options.correlationId;\n    }\n\n    if (!this.correlationId) {\n      this.correlationId = target.correlationId;\n    }\n\n    // reminder: not doing this copy in initialize() because config may not yet\n    // be available\n    this.media.bandwidthLimit = {\n      audioBandwidthLimit: this.config.audioBandwidthLimit,\n      videoBandwidthLimit: this.config.videoBandwidthLimit\n    };\n\n    return this.media.createOffer()\n      .then(tap(() => this.logger.info('created offer')))\n      .then(() => this.spark.internal.locus.createOrJoin(target, Object.assign({\n        localSdp: this.media.offerSdp,\n        correlationId: this.correlationId\n      }, options)))\n      .then(tap(() => this.logger.info('sent offer to locus')))\n      .then(tap(() => this.logger.info('setting locus')))\n      .then((locus) => this.setLocus(locus))\n      .then(tap(() => this.logger.info('successfully set locus')))\n      .then(() => {\n        const answer = JSON.parse(this.mediaConnection.remoteSdp).sdp;\n        this.logger.info('accepting answer');\n        this.logger.info('peer state', this.media.pc && this.media.pc.signalingState);\n        if (!this.media.ended) {\n          return this.media.acceptAnswer(answer)\n            .then(() => this.logger.info('answer accepted'))\n            .catch((err) => {\n              this.logger.error('failed to accept answer', err);\n              return Promise.reject(err);\n            });\n        }\n        this.logger.info('call: already ended, not accepting answer');\n        return Promise.resolve();\n      });\n  },\n  /* eslint-enable complexity */\n\n  @deprecated('Please use Call#reject()')\n  /**\n   * Alias of {@link Call#reject}\n   * @see {@link Call#reject}\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  decline() {\n    return this.reject();\n  },\n\n  @oneFlight\n  /**\n   * Used by {@link Phone#dial} to initiate an outbound call\n   * @instance\n   * @memberof Call\n   * @param {[type]} invitee\n   * @param {[type]} options\n   * @private\n   * @returns {[type]}\n   */\n  dial(invitee, options) {\n    this.locusJoinInFlight = true;\n    this.logger.info('call: dialing');\n\n    let target = invitee;\n\n    if (base64.validate(invitee)) {\n      // eslint-disable-next-line no-unused-vars\n      const parsed = base64.decode(invitee).split('/');\n      const resourceType = parsed[3];\n      const id = parsed[4];\n      if (resourceType === 'PEOPLE') {\n        target = id;\n      }\n\n      if (resourceType === 'ROOM') {\n        if (!get(this, 'config.enableExperimentalGroupCallingSupport')) {\n          throw new Error('Group calling is not enabled. Please enable config.phone.enableExperimentalGroupCallingSupport');\n        }\n\n        target = {\n          url: `${this.spark.internal.device.services.conversationServiceUrl}/conversations/${id}/locus`\n        };\n      }\n    }\n\n    // Note: mercury.connect() will call device.register() if needed. We're not\n    // using phone.register() here because it guarantees a device refresh, which\n    // is probably unnecessary.\n    this.spark.internal.mercury.connect()\n      .then(() => this.createOrJoinLocus(target, options))\n      .then(tap(() => this.logger.info('call: dialed')))\n      .catch((reason) => {\n        this.trigger('error', reason);\n      })\n      .then(() => {\n        this.locusJoinInFlight = false;\n      });\n\n    return this;\n  },\n\n  /**\n   * Returns a {@link Readable} that emits {@link Call#media.pc}'s\n   * {@link RTCStatsReport} every second.\n   * @instance\n   * @memberof Call\n   * @returns {StatsStream}\n   */\n  getRawStatsStream() {\n    return new StatsStream(this.media.pc);\n  },\n\n  /**\n   * Returns a {@link StatsStream} piped through a {@link StatsFilter}\n   * @instance\n   * @memberof Call\n   * @returns {Readable}\n   */\n  getStatsStream() {\n    return this.getRawStatsStream()\n      .pipe(new StatsFilter());\n  },\n\n  /**\n   * Disconnects the active call. Applies to both incoming and outgoing calls.\n   * This method may be invoked in any call state and the SDK should take care\n   * to tear down the call and free up all resources regardless of the state.\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  hangup() {\n    // Note: not a @oneFlight because this function must call itself\n    if (this.direction === 'in' && !this.joinedOnThisDevice) {\n      return this.reject();\n    }\n\n    this.logger.info('call: hanging up');\n\n    this.media.stop();\n\n    if (this.locusJoinInFlight) {\n      this.logger.info('call: locus join in flight, waiting for rest call to complete before hanging up');\n      return this.when('change:locusJoinInFlight')\n        .then(() => this.hangup());\n    }\n\n    if (!this.locus) {\n      return this.cleanup()\n        .then(() => this.logger.info('call: hang up complete, call never created'));\n    }\n\n    return this.leave();\n  },\n\n  /**\n   * Initializer\n   * @instance\n   * @memberof Call\n   * @private\n   * @param {Object} attrs\n   * @param {Object} options\n   * @returns {undefined}\n   */\n  initialize(...initArgs) {\n    Reflect.apply(SparkPlugin.prototype.initialize, this, initArgs);\n\n    this.on('change:activeParticipantsCount', (...args) => this.onChangeActiveParticipantsCount(...args));\n    // This handler is untested because there's no way to provoke it. It's\n    // probably actually only relevant for group calls.\n    this.on('change:isActive', (...args) => this.onChangeIsActive(...args));\n    this.on('change:localMediaStream', (...args) => this.onChangeLocalMediaStream(...args));\n    // Reminder: this is not a derived property so that we can reassign the\n    // stream midcall\n    this.on('change:media.localMediaStream', () => {\n      this.localMediaStream = this.media.localMediaStream;\n    });\n    this.on('change:remoteMember', (...args) => this.onChangeRemoteMember(...args));\n    [\n      'localMediaStream',\n      'remoteAudioMuted',\n      'remoteMediaStream',\n      'remoteVideoMuted',\n      'localScreenShare'\n    ].forEach((key) => {\n      this.on(`change:${key}`, () => this.trigger(`${key}:change`));\n    });\n    this.on('replaced', () => this.cleanup());\n\n    this.listenTo(this.memberships, 'add', (...args) => this.trigger('memberships:add', ...args));\n    this.listenTo(this.memberships, 'change', (...args) => this.trigger('membership:change', ...args));\n    this.listenTo(this.memberships, 'change:audioMuted', (...args) => this.onMembershipsAudioMuted(...args));\n    this.listenTo(this.memberships, 'change:state', (...args) => this.onMembershipsChangeState(...args));\n    this.listenTo(this.memberships, 'change:videoMuted', (...args) => this.onMembershipsVideoMuted(...args));\n    this.listenTo(this.memberships, 'remove', (...args) => this.trigger('memberships:remove', ...args));\n\n    this.listenTo(this.spark.internal.mercury, 'event:locus', (event) => this.onLocusEvent(event));\n    this.listenTo(this.spark.internal.mercury, 'event:locus.difference', (event) => this.onLocusEvent(event));\n\n    this.listenTo(this.media, 'error', (error) => this.trigger('error', error));\n    this.listenTo(this.media, 'internalTrackUpdate', () => {\n      this.trigger('remoteMediaStream:change');\n    });\n    this.listenTo(this.media, 'negotiationneeded', (...args) => this.onMediaNegotiationNeeded(...args));\n\n    if (this.locus) {\n      this.internalCallId = makeInternalCallId(this.locus);\n    }\n    else {\n      this.once('change:locus', () => {\n        this.internalCallId = makeInternalCallId(this.locus);\n      });\n    }\n\n    this.memberships.listenToAndRun(this, 'change:locus', () => {\n      if (this.locus && this.locus.participants) {\n        // Reminder: we're parsing here instead of CallMembership(s) so that we\n        // can avoid making those classes spark aware and therefore keep them a\n        // lot simpler\n        this.memberships.set(participantsToCallMemberships(this.spark, this.locus));\n        this.me = this.memberships.find((m) => m.isSelf);\n      }\n    });\n\n    if (this.config.enableExperimentalGroupCallingSupport) {\n      this.on('inactive', () => this.hangup());\n      this.on('inactive', () => this.cleanup());\n\n      this.on('change:state', () => {\n        process.nextTick(() => this.trigger(this.state));\n      });\n      this.on = wrap(this.on, (fn, eventName, ...rest) => {\n        if (deprecatedCallEventNames.includes(eventName)) {\n          throw new Error(`The \"${eventName}\" event is no longer valid with \"enableExperimentalGroupCallingSupport===true\"`);\n        }\n\n        return Reflect.apply(fn, this, [eventName, ...rest]);\n      });\n    }\n    else {\n      this.on('disconnected', () => this.hangup());\n      this.on('disconnected', () => this.cleanup());\n\n      this.on('change:status', () => {\n        process.nextTick(() => this.trigger(this.status));\n      });\n    }\n  },\n\n\n  @oneFlight\n  @whileInFlight('locusLeaveInFlight')\n  /**\n   * Does the internal work necessary to end a call while allowing hangup() to\n   * call itself without getting stuck in promise change because of oneFlight\n   * The name of this function is temporary to address the no-underscore-dangle\n   * rule. A future commit in this PR will rename all of the\n   * reject/end/hangup/finish functions to be more meaningful and not just be\n   * synonyms the same word.\n   * @private\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  leave() {\n    this.logger.info('leave: attempting to leave locus');\n    const status = get(this, this.config.enableExperimentalGroupCallingSupport ? 'me.state' : 'status');\n    if (status === 'disconnected') {\n      this.logger.info('already hung up, not calling locus again');\n      return Promise.resolve();\n    }\n\n    if (status === 'declined') {\n      this.logger.info('call was declined, not leaving again');\n      return Promise.resolve();\n    }\n\n    if (status !== 'connected') {\n      this.logger.info('call is neither connected, disconnected, or declined, declining instead of leaving');\n      return this.decline();\n    }\n\n    this.logger.info('leave: leaving locus');\n    return this.spark.internal.locus.leave(this.locus)\n      .catch((err) => {\n        this.logger.error('leave: locus leave error: ', err.stack || err.toString());\n        return Promise.reject(err);\n      })\n      .then(tap(() => this.logger.info(`leave ${this.locus.id}: finished leaving via locus`)))\n      .then(tap(() => this.logger.info(`leave ${this.locus.id}: setting locus`)))\n      .then((locus) => this.setLocus(locus))\n      .then(tap(() => this.logger.info(`leave ${this.locus.id}: finished setting locus`)))\n      // Note: not stopping event-listening here; that'll happening\n      // automatically when `disconnected` fires.\n      .then(tap(() => this.logger.info('call: hung up')));\n  },\n\n  /**\n   * Handles an incoming mercury event if relevant to this call.\n   * @instance\n   * @memberof Call\n   * @param {Types~MercuryEvent} event\n   * @private\n   * @returns {undefined}\n   */\n  onLocusEvent(event) {\n    const devices = get(event, 'data.locus.self.devices');\n    const device = devices && find(devices, (item) => item.url === this.spark.internal.device.url);\n\n    const internalCallId = this.locus && makeInternalCallId(event.data.locus);\n    if (internalCallId === this.internalCallId || device && this.correlationId === device.correlationId) {\n      this.logger.info(`locus event: ${event.data.eventType}`);\n      this.setLocus(event.data.locus);\n    }\n\n\n    if (event.data.locus.replaces) {\n      for (const replaced of event.data.locus.replaces) {\n        if (`${replaced.locusUrl}_${replaced.lastActive}` === this.internalCallId) {\n          this.setLocus(event.data.locus);\n          this.logger.info(`locus replacement event: ${event.data.eventType}`, this.locusUrl, '->', event.data.locus.url);\n          return;\n        }\n      }\n    }\n  },\n\n  /**\n   * Event handler\n   * @instance\n   * @memberof Call\n   * @private\n   * @returns {undefined}\n   */\n  onMembershipsAudioMuted() {\n    this.logger.info('onMembershipsAudioMuted');\n    if (this.remoteMember) {\n      this.remoteAudioMuted = this.remoteMember.audioMuted;\n    }\n  },\n\n  /**\n   * Event handler\n   * @instance\n   * @memberof Call\n   * @private\n   * @returns {undefined}\n   */\n  onMembershipsVideoMuted() {\n    this.logger.info('onMembershipsVideoMuted');\n    if (this.remoteMember) {\n      this.remoteVideoMuted = this.remoteMember.videoMuted;\n    }\n  },\n\n  /**\n   * Event handler\n   * @instance\n   * @memberof Call\n   * @private\n   * @returns {undefined}\n   */\n  onChangeRemoteMember() {\n    if (this.remoteMember) {\n      this.remoteAudioMuted = this.remoteMember.audioMuted;\n      this.remoteVideoMuted = this.remoteMember.videoMuted;\n    }\n    else {\n      this.remoteAudioMuted = undefined;\n      this.remoteVideoMuted = undefined;\n    }\n  },\n\n  /**\n   * Event handler\n   * @instance\n   * @memberof Call\n   * @param {Membership} model\n   * @private\n   * @returns {undefined}\n   */\n  onMembershipsChangeState(model) {\n    this.activeParticipantsCount = this\n      .memberships\n      .filter((m) => m.state === 'connected')\n      .length;\n\n    this.trigger(`membership:${model.state}`, model);\n  },\n\n  @debounce()\n  /**\n   * Event handler\n   * @instance\n   * @memberof Call\n   * @private\n   * @returns {undefined}\n   */\n  onMediaNegotiationNeeded() {\n    this.logger.info('onMediaNegotiationNeeded');\n    this.media.createOffer()\n      .then(() => {\n        // Determine mute state for locus from sdp\n        const offer = parse(this.media.offerSdp);\n        const audioOfferDir = getMediaDirectionFromSDP('audio', offer);\n        const audioMuted = !audioOfferDir.includes('send');\n        const videoOfferDir = getMediaDirectionFromSDP('video', offer);\n        const videoMuted = !videoOfferDir.includes('send');\n        const screenOfferDir = getMediaDirectionFromSDP('screen', offer);\n        this.logger.info(`onMediaNegotiationNeeded: audioOfferDir=${audioOfferDir} videoOfferDir=${videoOfferDir} screenOfferDir=${screenOfferDir}`);\n        this.logger.info(`onMediaNegotiationNeeded: audioMuted=${audioMuted} videoMuted=${videoMuted}`);\n        const updateMediaOptions = {\n          sdp: this.media.offerSdp,\n          mediaId: this.mediaId,\n          audioMuted,\n          videoMuted\n        };\n        return this.updateMedia(updateMediaOptions);\n      })\n      .then(() => this.pollForExpectedLocusAndSdp())\n      .then(() => {\n        const {sdp} = JSON.parse(this.mediaConnection.remoteSdp);\n        return this.media.acceptAnswer(sdp);\n      })\n      .then(() => this.emit('mediaNegotiationCompleted'))\n      .catch((reason) => this.emit('error', reason));\n  },\n\n  /**\n   * Event handler\n   * @instance\n   * @memberof Call\n   * @private\n   * @returns {undefined}\n   */\n  onChangeLocalMediaStream() {\n    if (this.localMediaStream && this.localMediaStream !== this.media.localMediaStream) {\n      [\n        'audio',\n        'video'\n      ]\n        .forEach((kind) => {\n          // eslint-disable-next-line max-nested-callbacks\n          const track = this.localMediaStream.getTracks().find((t) => t.kind === kind);\n          if (track) {\n            this.media.setMedia(kind, boolToStatus(track.enabled, this[`receiving${capitalize[kind]}`]), track);\n          }\n          else {\n            this.media.setMedia(kind, boolToStatus(false, this[`receiving${capitalize[kind]}`]));\n          }\n        });\n      this.localMediaStream = this.media.localMediaStream;\n    }\n  },\n\n  /**\n   * Event handler\n   * @instance\n   * @memberof Call\n   * @private\n   * @returns {undefined}\n   */\n  onChangeIsActive() {\n    if (!this.isActive) {\n      if (this.joinedOnThisDevice) {\n        this.logger.info('call: hanging up due to locus going inactive');\n        this.hangup();\n      }\n    }\n  },\n\n  /**\n   * Event handler\n   * @instance\n   * @memberof Call\n   * @private\n   * @returns {undefined}\n   */\n  onChangeActiveParticipantsCount() {\n    if (!this.joinedOnThisDevice) {\n      return;\n    }\n\n    if (this.activeParticipantsCount !== 1) {\n      return;\n    }\n\n    if (this.isCall && !this.config.hangupIfLastActive.call) {\n      return;\n    }\n\n    if (!this.isCall && !this.config.hangupIfLastActive.meeting) {\n      return;\n    }\n\n    const previousLocus = this.previousAttributes().locus;\n    if (!previousLocus) {\n      return;\n    }\n\n    if (activeParticipants(previousLocus).length > 1) {\n      this.logger.info('call: hanging up due to last participant in call');\n      this.hangup();\n    }\n  },\n\n  @retry\n  /**\n   * The response to a PUT to LOCUS/media may not be fully up-to-date when we\n   * receive it. This method polls locus until we get a locus with the status\n   * properties we expect (or three errors occur)\n   * @instance\n   * @memberof Call\n   * @private\n   * @returns {Promise<Types~Locus>}\n   */\n  pollForExpectedLocusAndSdp() {\n    return new Promise((resolve, reject) => {\n      const offer = parse(this.media.offerSdp);\n\n      const audioOfferDir = getMediaDirectionFromSDP('audio', offer);\n      const videoOfferDir = getMediaDirectionFromSDP('video', offer);\n      const screenOfferDir = getMediaDirectionFromSDP('screen', offer);\n\n      const self = this;\n      let count = 0;\n      const validate = () => {\n        count += 1;\n        try {\n          this.logger.info(`iteration ${count}: checking if current locus sdp has the expected audio and video directions`);\n          if (isExpectedDirection(JSON.parse(this.mediaConnection.remoteSdp).sdp)) {\n            this.logger.info(`iteration ${count}: the current locus sdp has the expected audio and video directions`);\n            try {\n              this.logger.info(`iteration ${count}: checking if current locus has the expected audio and video directions`);\n              this.validateLocusMediaState(this.locus);\n              this.logger.info(`iteration ${count}: the current locus has the expected audio and video directions; not syncing`);\n              resolve();\n              return;\n            }\n            catch (err) {\n              this.logger.info(`iteration ${count}: the current locus does not have the expected audio and video directions; syncing`);\n            }\n          }\n          else {\n            this.logger.info(`iteration ${count}: the current locus sdp does not have the expected audio and video directions; syncing`);\n          }\n\n          if (count > 4) {\n            reject(new Error(`After ${count} attempts polling locus`));\n            return;\n          }\n\n          setTimeout(() => this.spark.internal.locus.sync(this.locus)\n            .then((locus) => this.setLocus(locus))\n            .then(validate)\n            .catch(reject), 1000 * (2 ** count));\n        }\n        catch (err) {\n          reject(err);\n        }\n      };\n\n      validate();\n      /**\n       * Determine if the incoming sdp has the expected media directions\n       * @private\n       * @param {string} sdp\n       * @returns {boolean}\n       */\n      function isExpectedDirection(sdp) {\n        const answer = parse(sdp);\n\n        const audioAnswerDir = getMediaDirectionFromSDP('audio', answer);\n        const videoAnswerDir = getMediaDirectionFromSDP('video', answer);\n        const screenAnswerDir = getMediaDirectionFromSDP('screen', answer);\n\n        const expectedAudioAnswerDir = reverseMediaDirection(audioOfferDir);\n        const expectedVideoAnswerDir = reverseMediaDirection(videoOfferDir);\n        const expectedScreenAnswerDir = reverseMediaDirection(screenOfferDir);\n\n        self.logger.info(`audio: ${audioOfferDir}, ${audioAnswerDir}, ${expectedAudioAnswerDir}`);\n        self.logger.info(`video: ${videoOfferDir}, ${videoAnswerDir}, ${expectedVideoAnswerDir}`);\n        self.logger.info(`screen: ${screenOfferDir}, ${screenAnswerDir}, ${expectedScreenAnswerDir}`);\n\n        // eslint-disable-next-line max-len\n        return audioAnswerDir === expectedAudioAnswerDir && videoAnswerDir === expectedVideoAnswerDir && screenAnswerDir === expectedScreenAnswerDir;\n      }\n    });\n  },\n\n  /**\n   * Tells locus we're done sharing some or all of our screen.\n   * @instance\n   * @memberof Call\n   * @private\n   * @returns {Promise}\n   */\n  releaseFloor() {\n    this.logger.info('call: releasing floor grant');\n    return Promise.resolve()\n      .then(waitForMediaShare(this))\n      .then((mediaShare) => this.spark.internal.locus.releaseFloorGrant(this.locus, mediaShare));\n  },\n\n  @oneFlight\n  /**\n   * Rejects an incoming call. Only applies to incoming calls. Invoking this\n   * method on an outgoing call is a no-op.\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  reject() {\n    if (this.direction === 'out') {\n      return Promise.resolve();\n    }\n\n    this.logger.info('call: rejecting');\n    /* eslint no-invalid-this: [0] */\n    return this.spark.internal.locus.decline(this.locus)\n      .then((locus) => this.setLocus(locus))\n      .then(tap(() => this.cleanup()))\n      .then(tap(() => this.logger.info('call: rejected')));\n  },\n\n  /**\n   * Tells locus we'd like to share some or all of our screen.\n   * @instance\n   * @memberof Call\n   * @private\n   * @returns {Promise}\n   */\n  requestFloor() {\n    this.logger.info('call: requesting floor grant');\n    return Promise.resolve()\n      .then(waitForMediaShare(this))\n      .then((mediaShare) => this.spark.internal.locus.requestFloorGrant(this.locus, mediaShare));\n  },\n\n  /**\n   * Assigns a new locus to this.locus according to locus sequencing rules\n   * @instance\n   * @memberof Call\n   * @param {Types~Locus} incoming\n   * @param {boolean} recursing - when true, indicates that this method has\n   * called itself and we should fall back to {@link locus.get()} instead of\n   * calling {@link locus.sync()}\n   * @private\n   * @returns {Promise}\n   */\n  setLocus(incoming, recursing = false) {\n    const current = this.locus;\n    if (!current) {\n      this.locus = incoming;\n      return Promise.resolve();\n    }\n    const action = this.spark.internal.locus.compare(current, incoming);\n\n    switch (action) {\n      case USE_INCOMING:\n        this.locus = this.spark.internal.locus.merge(this.locus, incoming);\n        if (this.device) {\n          this.correlationId = this.device.correlationId;\n        }\n        break;\n      case FETCH:\n        if (recursing) {\n          this.logger.info('call: fetching locus according to sequencing algorithm');\n          return this.spark.internal.locus.get(current)\n            .then((locus) => this.setLocus(locus, true));\n        }\n\n        this.logger.info('call: syncing locus according to sequencing algorithm');\n\n        return this.spark.internal.locus.sync(current)\n          .then((locus) => this.setLocus(locus, true));\n\n      default:\n      // do nothing\n    }\n\n    return Promise.resolve();\n  },\n\n  /**\n   * Send DTMF tones to the current call\n   * @instance\n   * @memberof Call\n   * @param {string} tones\n   * @returns {Promise}\n   */\n  sendDtmf(tones) {\n    if (!this.supportsDtmf) {\n      return Promise.reject(new Error('this call does not support dtmf'));\n    }\n\n    return this.spark.internal.locus.sendDtmf(this.locus, tones);\n  },\n\n  /**\n   * Sends feedback about the call to the Cisco Spark cloud\n   * @instance\n   * @memberof Call\n   * @param {FeedbackObject} feedback\n   * @returns {Promise}\n   */\n  sendFeedback(feedback) {\n    return this.spark.internal.metrics.submit('meetup_call_user_rating', feedback);\n  },\n\n  /**\n   * Shares a particular application as a second stream in the call\n   * @returns {Promise}\n   */\n  startApplicationShare() {\n    this.logger.info('call: sharing application');\n    return new Promise((resolve) => {\n      this.media.once('answeraccepted', resolve);\n      this.media.setMedia('screen', 'sendonly', {\n        mediaSource: 'application'\n      });\n    })\n      .then(() => this.requestFloor());\n  },\n\n  /**\n   * Shares the whole screen as a second stream in the call\n   * @returns {Promise}\n   */\n  startScreenShare() {\n    this.logger.info('call: sharing screen');\n\n    return new Promise((resolve) => {\n      this.media.once('answeraccepted', resolve);\n      this.media.setMedia('screen', 'sendonly', {\n        mediaSource: 'screen'\n      });\n    })\n      .then(() => this.requestFloor());\n  },\n\n  /**\n   * Start receiving audio\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  startReceivingAudio() {\n    return this.changeReceivingMedia('audio', true);\n  },\n\n  /**\n   * Start receiving video\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  startReceivingVideo() {\n    return this.changeReceivingMedia('video', true);\n  },\n\n  /**\n   * Starts sending audio to the Cisco Spark Cloud\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  startSendingAudio() {\n    return this.changeSendingMedia('audio', true);\n  },\n\n  /**\n   * Starts sending video to the Cisco Spark Cloud\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  startSendingVideo() {\n    return this.changeSendingMedia('video', true);\n  },\n\n  /**\n   * Stops sharing an application or whole screen media stream\n   * @returns {Promise}\n   */\n  stopScreenShare() {\n    this.logger.info('call: stopping screen/application share');\n\n    return this.releaseFloor()\n      .then(() => new Promise((resolve) => {\n        this.media.once('answeraccepted', resolve);\n        this.media.setMedia('screen', 'inactive');\n      }));\n  },\n\n  /**\n   * Stop receiving audio\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  stopReceivingAudio() {\n    return this.changeReceivingMedia('audio', false);\n  },\n\n  /**\n   * Stop receiving video\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  stopReceivingVideo() {\n    return this.changeReceivingMedia('video', false);\n  },\n\n  /**\n   * Stops sending audio to the Cisco Spark Cloud. (stops broadcast immediately,\n   * even if renegotiation has not completed)\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  stopSendingAudio() {\n    return this.changeSendingMedia('audio', false);\n  },\n\n  /**\n   * Stops sending video to the Cisco Spark Cloud. (stops broadcast immediately,\n   * even if renegotiation has not completed)\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  stopSendingVideo() {\n    return this.changeSendingMedia('video', false);\n  },\n\n  /**\n   * Replaces the current mediaStrem with one with identical constraints, except\n   * for an opposite facing mode. If the current facing mode cannot be\n   * determined, the facing mode will be set to `user`. If the call is audio\n   * only, this function will throw.\n   * @instance\n   * @memberof Call\n   * @returns {undefined}\n   */\n  toggleFacingMode() {\n    if (!this.sendingVideo) {\n      throw new Error('Cannot toggle facingMode if we\\'re not sending video');\n    }\n\n    if (this.facingMode !== 'user' && this.facingMode !== 'environment') {\n      throw new Error('Cannot determine current facing mode; specify a new localMediaStream to change cameras');\n    }\n\n    const constraint = {\n      facingMode: {\n        ideal: this.facingMode === 'user' ? 'environment' : 'user'\n      }\n    };\n\n    // Constraint changes that don't result in a new sender does not trigger renegotiate\n    // We now use replaceTrack to swap in a new media\n    return this.media.setMedia('video', boolToStatus(this.sendingAudio, this.sendingVideo), constraint)\n      .then(() => {\n        this.facingMode = constraint.facingMode.ideal;\n      });\n  },\n\n  /**\n   * Toggles receiving audio from the Cisco Spark Cloud\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  toggleReceivingAudio() {\n    return this.receivingAudio ? this.stopReceivingAudio() : this.startReceivingAudio();\n  },\n\n  /**\n   * Toggles receiving video from the Cisco Spark Cloud\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  toggleReceivingVideo() {\n    return this.receivingVideo ? this.stopReceivingVideo() : this.startReceivingVideo();\n  },\n\n  /**\n   * Toggles sending audio to the Cisco Spark Cloud\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  toggleSendingAudio() {\n    return this.sendingAudio ? this.stopSendingAudio() : this.startSendingAudio();\n  },\n\n  /**\n   * Toggles sending video to the Cisco Spark Cloud\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  toggleSendingVideo() {\n    return this.sendingVideo ? this.stopSendingVideo() : this.startSendingVideo();\n  },\n\n  /**\n   * Changes the status of media\n   * @instance\n   * @memberof Call\n   * @param {Object} payload\n   * @private\n   * @returns {Promise}\n   */\n  updateMedia(payload) {\n    this.logger.info('updateMedia');\n    if (payload.sdp && !payload.sdp.includes('b=')) {\n      throw new Error('outbound sdp should always have a \\'b=\\' line');\n    }\n    return this.spark.internal.locus.updateMedia(this.locus, payload)\n      .then((locus) => this.setLocus(locus));\n  },\n\n  /**\n   * Updates sdp with correct video status\n   * @instance\n   * @memberof Call\n   * @param {string} sdp\n   * @param {boolean} isMuted\n   * @private\n   * @returns {Promise}\n   */\n  updateVideoMuteSdp(sdp, isMuted) {\n    const newDir = boolToDirection(!isMuted, this.receivingVideo);\n    const oldDir = boolToDirection(isMuted, this.receivingVideo);\n    return sdp.replace(new RegExp(`a=mid:video[^a]+a=${oldDir}`, 'gi'), `a=mid:video\\na=${newDir}`);\n  },\n\n  @oneFlight\n  /**\n   * Tells locus we've got a new media direction\n   * @instance\n   * @memberof Call\n   * @param {string} kind of 'audio' or 'video'\n   * @param {boolean} value\n   * @private\n   * @returns {Promise}\n   */\n  updateMuteToggles(kind, value) {\n    this.logger.info(`updating mute toggles: ${kind}=${value}`);\n    const payload = {\n      mediaId: this.mediaId,\n      audioMuted: !this.sendingAudio,\n      videoMuted: !this.sendingVideo\n    };\n    if (kind === 'audio') {\n      payload.audioMuted = !value;\n    }\n    else if (kind === 'video') {\n      payload.videoMuted = !value;\n      payload.sdp = this.updateVideoMuteSdp(this.media.offerSdp, !value);\n    }\n\n    return this.updateMedia(payload);\n  },\n\n  /**\n   * Checks that this.locus has the expected state\n   * @instance\n   * @memberof Call\n   * @param {Types~Locus} locus\n   * @private\n   * @returns {Promise}\n   */\n  validateLocusMediaState(locus) {\n    const locusAudio = locus.self.status.audioStatus.toLowerCase();\n    const mediaAudio = this.media.audioDirection;\n\n    if (locusAudio !== mediaAudio) {\n      this.logger.warn(`locus: expected audio ${locusAudio} (locus) to equal ${mediaAudio} (local media)`);\n      throw new Error('locus.self.status.audioStatus indicates the received DTO is out of date');\n    }\n\n    const locusVideo = locus.self.status.videoStatus.toLowerCase();\n    const mediaVideo = this.media.videoDirection;\n    if (locusVideo !== mediaVideo) {\n      this.logger.warn(`locus: expected video ${locusVideo} (locus) to equal ${mediaVideo} (local media)`);\n      throw new Error('locus.self.status.videoStatus indicates the received DTO is out of date');\n    }\n\n    return locus;\n  },\n\n  /**\n   * Waits until this.locus describes the expected state\n   * @instance\n   * @memberof Call\n   * @private\n   * @returns {Promise}\n   */\n  waitForExpectedLocus() {\n    return new Promise((resolve) => {\n      const listener = () => {\n        try {\n          this.validateLocusMediaState(this.locus);\n          this.off('change:locus', listener);\n          resolve();\n        }\n        catch (err) {\n          this.logger.warn('locus: current locus not in expected state; waiting for next locus');\n        }\n      };\n      this.on('change:locus', listener);\n      listener();\n    });\n  }\n});\n\nCall.make = function make(attrs, options) {\n  return new Call(attrs, options);\n};\n\nexport default Call;\n"]}