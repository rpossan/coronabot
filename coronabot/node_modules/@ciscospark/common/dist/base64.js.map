{"version":3,"sources":["base64.js"],"names":["fromBase64url","toBase64Url","encode","decode","validate","str","UrlSafeBase64","toString","buffer","Buffer","isBuffer","from"],"mappings":";;;;;QAWgBA,a,GAAAA,a;QASAC,W,GAAAA,W;QAcAC,M,GAAAA,M;QASAC,M,GAAAA,M;QASAC,Q,GAAAA,Q;;AAhDhB;;;;;;AAEA;;;;;AAKO,SAASJ,aAAT,CAAuBK,GAAvB,EAA4B;AACjC,SAAOC,sBAAcH,MAAd,CAAqBE,GAArB,EAA0BE,QAA1B,EAAP;AACD;;AAED;;;;;AAfA;;;;AAoBO,SAASN,WAAT,CAAqBI,GAArB,EAA0B;AAC/B,MAAIG,SAASH,GAAb;AACA,MAAI,CAACI,OAAOC,QAAP,CAAgBF,MAAhB,CAAL,EAA8B;AAC5BA,aAASC,OAAOE,IAAP,CAAYH,MAAZ,CAAT;AACD;;AAED,SAAOF,sBAAcJ,MAAd,CAAqBM,MAArB,CAAP;AACD;;AAED;;;;;AAKO,SAASN,MAAT,CAAgBG,GAAhB,EAAqB;AAC1B,SAAOJ,YAAYI,GAAZ,CAAP;AACD;;AAED;;;;;AAKO,SAASF,MAAT,CAAgBE,GAAhB,EAAqB;AAC1B,SAAOL,cAAcK,GAAd,CAAP;AACD;;AAED;;;;;AAKO,SAASD,QAAT,CAAkBC,GAAlB,EAAuB;AAC5B,SAAOC,sBAAcF,QAAd,CAAuBC,GAAvB,CAAP;AACD;;kBAEc;AACbL,8BADa;AAEbC,0BAFa;AAGbC,gBAHa;AAIbC,gBAJa;AAKbC;AALa,C","file":"base64.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport UrlSafeBase64 from 'urlsafe-base64';\n\n/**\n * Converts a string from a base64url-encoded string\n * @param {string} str\n * @returns {string}\n */\nexport function fromBase64url(str) {\n  return UrlSafeBase64.decode(str).toString();\n}\n\n/**\n * Converts a string to a base64url-encoded string. It also accepts a buffer\n * @param {string|buffer} str\n * @returns {string}\n */\nexport function toBase64Url(str) {\n  let buffer = str;\n  if (!Buffer.isBuffer(buffer)) {\n    buffer = Buffer.from(buffer);\n  }\n\n  return UrlSafeBase64.encode(buffer);\n}\n\n/**\n * Converts a string to a base64url-encoded string. It also accepts a buffer\n * @param {string|buffer} str\n * @returns {string}\n */\nexport function encode(str) {\n  return toBase64Url(str);\n}\n\n/**\n * Converts a string from a base64url-encoded string\n * @param {string} str\n * @returns {string}\n */\nexport function decode(str) {\n  return fromBase64url(str);\n}\n\n/**\n * Indicates if the provided string is, in fact, a base64 string\n * @param {String} str\n * @returns {Boolean}\n */\nexport function validate(str) {\n  return UrlSafeBase64.validate(str);\n}\n\nexport default {\n  fromBase64url,\n  toBase64Url,\n  encode,\n  decode,\n  validate\n};\n"]}