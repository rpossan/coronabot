{"version":3,"sources":["locus.js"],"names":["USE_INCOMING","USE_CURRENT","EQUAL","FETCH","GREATER_THAN","LESS_THAN","DESYNC","compareToAction","result","Error","Locus","SparkPlugin","extend","namespace","alert","locus","request","method","uri","url","body","deviceUrl","spark","internal","device","sequence","then","res","compare","current","incoming","isEmpty","entries","length","rangeStart","rangeEnd","baseSequence","compareDelta","compareSequence","ret","getEntriesFirstValue","getEntriesLastValue","getCompareFirstValue","getCompareLastValue","inRange","entry","currentOnlyEntries","incomingOnlyEntries","currentOnly","incomingOnly","i","push","create","invitee","options","correlationId","service","resource","localMedias","localSdp","type","sdp","createOrJoin","target","join","decline","catch","reason","SparkHttpError","Conflict","get","reject","getCallHistory","from","Date","now","toISOString","qs","leave","self","list","loci","merge","next","forEach","key","participants","toRemove","toUpsert","p","removed","add","set","reduce","acc","has","value","releaseFloorGrant","share","floor","disposition","requestFloorGrant","beneficiary","devices","sendDtmf","tones","dtmf","uuid","v4","sync","syncUrl","updateMedia","audioMuted","videoMuted","mediaId"],"mappings":"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","file":"locus.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {SparkPlugin, SparkHttpError} from '@ciscospark/spark-core';\nimport {cloneDeep, difference, first, last, memoize} from 'lodash';\nimport uuid from 'uuid';\n\nexport const USE_INCOMING = 'USE_INCOMING';\nexport const USE_CURRENT = 'USE_CURRENT';\nexport const EQUAL = 'EQUAL';\nexport const FETCH = 'FETCH';\nexport const GREATER_THAN = 'GREATER_THAN';\nexport const LESS_THAN = 'LESS_THAN';\nexport const DESYNC = 'DESYNC';\n\n/**\n * Transates the result of a sequence comparison into an intended behavior\n * @param {string} result\n * @private\n * @returns {string}\n */\nfunction compareToAction(result) {\n  switch (result) {\n    case EQUAL:\n    case GREATER_THAN:\n      return USE_CURRENT;\n    case LESS_THAN:\n      return USE_INCOMING;\n    case DESYNC:\n      return FETCH;\n    default:\n      throw new Error(`${result} is not a recognized sequence comparison result`);\n  }\n}\n\n/**\n * @class\n */\nconst Locus = SparkPlugin.extend({\n  namespace: 'Locus',\n\n  /**\n   * Alert the specified locus that the local user has been notified of the\n   * locus's active state\n   * @instance\n   * @memberof Locus\n   * @param {Types~Locus} locus\n   * @returns {Promise}\n   */\n  alert(locus) {\n    return this.request({\n      method: 'PUT',\n      uri: `${locus.url}/participant/alert`,\n      body: {\n        deviceUrl: this.spark.internal.device.url,\n        sequence: locus.sequence\n      }\n    })\n      .then((res) => res.body);\n  },\n\n\n  /**\n   * Compares two loci to determine which one contains the most recent state\n   * @instance\n   * @memberof Locus\n   * @param {Types~Locus} current\n   * @param {Types~Locus} incoming\n   * @returns {string} one of USE_INCOMING, USE_CURRENT, or FETCH\n   */\n  compare(current, incoming) {\n    /**\n     * Determines if a paricular locus's sequence is empty\n     * @param {Types~Locus} locus\n     * @private\n     * @returns {bool}\n     */\n    function isEmpty(locus) {\n      const {sequence} = locus;\n      return (!sequence.entries || !sequence.entries.length) && sequence.rangeStart === 0 && sequence.rangeEnd === 0;\n    }\n\n    if (isEmpty(current) || isEmpty(incoming)) {\n      return USE_INCOMING;\n    }\n\n    if (incoming.baseSequence) {\n      return this.compareDelta(current, incoming);\n    }\n\n    return compareToAction(this.compareSequence(current.sequence, incoming.sequence));\n  },\n\n  /**\n   * Compares two loci sequences (with delta params) and indicates what action\n   * to take.\n   * @instance\n   * @memberof Locus\n   * @param {Types~Locus} current\n   * @param {Types~Locus} incoming\n   * @private\n   * @returns {string} one of USE_INCOMING, USE_CURRENT, or FETCH\n   */\n  compareDelta(current, incoming) {\n    let ret = this.compareSequence(current.sequence, incoming.sequence);\n    if (ret !== LESS_THAN) {\n      return compareToAction(ret);\n    }\n\n    ret = this.compareSequence(current.sequence, incoming.baseSequence);\n\n    switch (ret) {\n      case GREATER_THAN:\n      case EQUAL:\n        return USE_INCOMING;\n      default:\n        return FETCH;\n    }\n  },\n\n  /**\n   * Compares two Locus sequences\n   * @instance\n   * @memberof Locus\n   * @param {LocusSequence} current\n   * @param {LocusSequence} incoming\n   * @returns {string} one of LESS_THAN, GREATER_THAN, EQUAL, or DESYNC\n   */\n  compareSequence(current, incoming) {\n    if (!current) {\n      throw new Error('`current` is required');\n    }\n\n    if (!incoming) {\n      throw new Error('`incoming` is required');\n    }\n    // complexity here is unavoidable\n    /* eslint complexity: [0] */\n    /* eslint max-statements: [0] */\n\n    // must pick one of arrow-body-style or no-confusing-arrow to disable\n    /* eslint arrow-body-style: [0] */\n\n    // after running the #compare() test suite in a loop, there doesn't seem to\n    // be any appreciable difference when used with or without memoize; since\n    // real locus sequences are likely to contain more sequence numbers than\n    // those in the test suite, I have to assume memoize can only help and the\n    // overhead of memoizing these methods is not a problem.\n\n    const getEntriesFirstValue = memoize((sequence) => {\n      return sequence.entries.length === 0 ? 0 : first(sequence.entries);\n    });\n    const getEntriesLastValue = memoize((sequence) => {\n      return sequence.entries.length === 0 ? 0 : last(sequence.entries);\n    });\n    const getCompareFirstValue = memoize((sequence) => {\n      return sequence.rangeStart || getEntriesFirstValue(sequence);\n    });\n    const getCompareLastValue = memoize((sequence) => {\n      return getEntriesLastValue(sequence) || sequence.rangeEnd;\n    });\n    /**\n     * @param {number} entry\n     * @param {LocusSequence} sequence\n     * @private\n     * @returns {Boolean}\n     */\n    function inRange(entry, sequence) {\n      return entry >= sequence.rangeStart && entry <= sequence.rangeEnd;\n    }\n\n    if (getCompareFirstValue(current) > getCompareLastValue(incoming)) {\n      return GREATER_THAN;\n    }\n\n    if (getCompareLastValue(current) < getCompareFirstValue(incoming)) {\n      return LESS_THAN;\n    }\n\n    const currentOnlyEntries = difference(current.entries, incoming.entries);\n    const incomingOnlyEntries = difference(incoming.entries, current.entries);\n    const currentOnly = [];\n    const incomingOnly = [];\n\n    for (const i of currentOnlyEntries) {\n      if (!inRange(i, incoming)) {\n        currentOnly.push(i);\n      }\n    }\n    for (const i of incomingOnlyEntries) {\n      if (!inRange(i, current)) {\n        incomingOnly.push(i);\n      }\n    }\n\n    if (!currentOnly.length && !incomingOnly.length) {\n      if (current.rangeEnd - getCompareFirstValue(current) > incoming.rangeEnd - getCompareFirstValue(incoming)) {\n        return GREATER_THAN;\n      }\n\n      if (current.rangeEnd - getCompareFirstValue(current) < incoming.rangeEnd - getCompareFirstValue(incoming)) {\n        return LESS_THAN;\n      }\n\n      return EQUAL;\n    }\n\n    if (currentOnly.length && !incomingOnly.length) {\n      return GREATER_THAN;\n    }\n\n    if (!currentOnly.length && incomingOnly.length) {\n      return LESS_THAN;\n    }\n\n    if (!current.rangeStart && !current.rangeEnd && !incoming.rangeStart && !incoming.rangeEnd) {\n      return DESYNC;\n    }\n\n    for (const i of currentOnly) {\n      if (getCompareFirstValue(incoming) < i && i < getCompareLastValue(incoming)) {\n        return DESYNC;\n      }\n    }\n\n    for (const i of incomingOnly) {\n      if (getCompareFirstValue(current) < i && i < getCompareLastValue(current)) {\n        return DESYNC;\n      }\n    }\n\n    if (currentOnly[0] > incomingOnly[0]) {\n      return GREATER_THAN;\n    }\n\n    return LESS_THAN;\n  },\n\n  /**\n   * Calls the specified invitee and offers the specified media via\n   * options.localSdp\n   * @instance\n   * @memberof Locus\n   * @param {string} invitee\n   * @param {Object} options\n   * @param {Object} options.localSdp\n   * @returns {Promise<Types~Locus>}\n   */\n  create(invitee, options = {}) {\n    const {correlationId} = options;\n\n    if (!correlationId) {\n      throw new Error('options.correlationId is required');\n    }\n\n    return this.request({\n      method: 'POST',\n      service: 'locus',\n      resource: 'loci/call',\n      body: {\n        correlationId,\n        deviceUrl: this.spark.internal.device.url,\n        invitee: {\n          invitee\n        },\n        localMedias: [{\n          localSdp: JSON.stringify({\n            type: 'SDP',\n            sdp: options.localSdp\n          })\n        }],\n        sequence: {\n          entries: [],\n          rangeStart: 0,\n          rangeEnd: 0\n        }\n      }\n    })\n      // res.body.mediaConnections is deprecated so just return the locus\n      .then((res) => res.body.locus);\n  },\n\n  /**\n   * This is mostly an internal function to simplify the phone plugin. Decides\n   * which path to call based on the type of the thing being joined.\n   * @instance\n   * @memberof Locus\n   * @param {Object|Types~Locus} target\n   * @param {Object} options\n   * @private\n   * @returns {Promise<Types~Locus>}\n   */\n  createOrJoin(target, options) {\n    if (target.url) {\n      return this.join(target, options);\n    }\n    return this.create(target, options);\n  },\n\n  /**\n   * Decline to join the specified Locus\n   * @instance\n   * @memberof Locus\n   * @param {Types~Locus} locus\n   * @returns {Promise<Types~Locus>}\n   */\n  decline(locus) {\n    return this.request({\n      method: 'PUT',\n      uri: `${locus.url}/participant/decline`,\n      body: {\n        deviceUrl: this.spark.internal.device.url,\n        sequence: locus.sequence\n      }\n    })\n      .then((res) => res.body)\n      .catch((reason) => {\n        if (reason instanceof SparkHttpError.Conflict) {\n          return this.get(locus);\n        }\n        return Promise.reject(reason);\n      });\n  },\n\n  /**\n   * Retrieves a single Locus\n   * @instance\n   * @memberof Locus\n   * @param {Types~Locus} locus\n   * @returns {Types~Locus}\n   */\n  get(locus) {\n    return this.request({\n      method: 'GET',\n      uri: `${locus.url}`\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Retrieves the call history for the current user\n   * @instance\n   * @memberof Locus\n   * @param {Object} options\n   * @param {Date|number} options.from\n   * @returns {Promise<Object>}\n   */\n  getCallHistory(options = {}) {\n    const from = (new Date(options.from || Date.now())).toISOString();\n\n    return this.request({\n      method: 'GET',\n      service: 'janus',\n      resource: 'history/userSessions',\n      qs: {from}\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Join the specified Locus and offer to send it media\n   * @instance\n   * @memberof Locus\n   * @param {Types~Locus} locus\n   * @param {Object} options\n   * @param {Object} options.localSdp\n   * @returns {Types~Locus}\n   */\n  join(locus, options = {}) {\n    const correlationId = locus.correlationId || options.correlationId;\n\n    if (!correlationId) {\n      throw new Error('locus.correlationId or options.correlationId is required');\n    }\n\n    return this.request({\n      method: 'POST',\n      uri: `${locus.url}/participant`,\n      body: {\n        correlationId,\n        deviceUrl: this.spark.internal.device.url,\n        localMedias: [{\n          localSdp: JSON.stringify({\n            type: 'SDP',\n            sdp: options.localSdp\n          })\n        }],\n        sequence: locus.sequence || {\n          entries: [],\n          rangeStart: 0,\n          rangeEnd: 0\n        }\n      }\n    })\n      // The mediaConnections object is deprecated, so just return the locus\n      .then((res) => res.body.locus);\n  },\n\n  /**\n   * Leave the specified Locus\n   * @instance\n   * @memberof Locus\n   * @param {Types~Locus} locus\n   * @returns {Promise<Types~Locus>}\n   */\n  leave(locus) {\n    return this.request({\n      method: 'PUT',\n      uri: `${locus.self.url}/leave`,\n      body: {\n        deviceUrl: this.spark.internal.device.url,\n        sequence: locus.sequence\n      }\n    })\n      .then((res) => res.body.locus)\n      .catch((reason) => {\n        if (reason instanceof SparkHttpError.Conflict) {\n          return this.get(locus);\n        }\n        return Promise.reject(reason);\n      });\n  },\n\n  /**\n   * Lists active loci\n   * @instance\n   * @memberof Locus\n   * @returns {Promise<Array<Types~Locus>>}\n   */\n  list() {\n    return this.request({\n      method: 'GET',\n      service: 'locus',\n      resource: 'loci'\n    })\n      .then((res) => res.body.loci);\n  },\n\n  /**\n   * Merges two locus DTOs (for the same locus)\n   * @instance\n   * @memberof Locus\n   * @param {Types~Locus} current\n   * @param {Types~Locus|Types~LocusDelta} incoming\n   * @returns {Type~Locus}\n   */\n  merge(current, incoming) {\n    // if incoming is not a delta event, treat it as a new full locus.\n    if (!incoming.baseSequence) {\n      return incoming;\n    }\n\n    const next = cloneDeep(current);\n\n    // 1. All non-null elements in the delta event except the \"baseSequence\" and\n    // the \"participants\" collection should be used to replace their existing\n    // values.\n    Object.keys(incoming).forEach((key) => {\n      if (key === 'baseSequence' || key === 'participants') {\n        return;\n      }\n\n      next[key] = incoming[key] || next[key];\n    });\n\n    // 2. The \"baseSequence\" in the delta event can be discarded (it doesn't\n    // need to be maintained in the local working copy).\n\n    if (incoming.participants || incoming.participants.length) {\n      const toRemove = new Set();\n      const toUpsert = new Map();\n\n      incoming.participants.forEach((p) => {\n        if (p.removed) {\n          // Elements of the delta event's \"participants\" list with the\n          // attribute `removed=true` should be removed from the working copy's\n          // \"participants\" collection.\n          toRemove.add(p.url);\n        }\n        else {\n          // Elements of the delta events \"participants\" list that are absent\n          // from the local working copy should be added to that collection.\n          toUpsert.set(p.url, p);\n        }\n      });\n\n      // The \"participants\" collection in the delta event should be merged with\n      // that of the local working copy of the Locus such that elements in the\n      // delta event's \"participants\" replace those with the same url value in\n      // the working copy \"participants\" collection.\n      const participants = next.participants.reduce((acc, p) => {\n        if (!toRemove.has(p.url)) {\n          acc[p.url] = p;\n        }\n        return acc;\n      }, {});\n\n      toUpsert.forEach((value, key) => {\n        participants[key] = value;\n      });\n\n      next.participants = Object.values(participants);\n    }\n\n    return next;\n  },\n\n  /**\n   * Signals to locus that the current user is done sharing their additional\n   * media stream\n   * @param {Types~Locus} locus\n   * @param {Types~MediaShare} share\n   * @returns {Promise}\n   */\n  releaseFloorGrant(locus, share) {\n    return this.spark.request({\n      uri: share.url,\n      method: 'PUT',\n      body: {\n        floor: {\n          disposition: 'RELEASED'\n        }\n      }\n    })\n      .then(({body}) => body);\n  },\n\n  /**\n   * Signals to locus that the current user would like to share an additional\n   * media stream\n   * @param {Types~Locus} locus\n   * @param {Types~MediaShare} share\n   * @returns {Promise}\n   */\n  requestFloorGrant(locus, share) {\n    return this.spark.request({\n      uri: share.url,\n      method: 'PUT',\n      body: {\n        floor: {\n          beneficiary: {\n            url: locus.self.url,\n            devices: [{url: this.spark.internal.device.url}]\n          },\n          disposition: 'GRANTED'\n        }\n      }\n    })\n      .then(({body}) => body);\n  },\n\n  /**\n   * Sends a string of DTMF tones to the locus\n   * @instance\n   * @memberof Locus\n   * @param {Types~Locus} locus\n   * @param {string} tones\n   * @returns {Promise}\n   */\n  sendDtmf(locus, tones) {\n    return this.request({\n      method: 'POST',\n      uri: `${locus.self.url}/sendDtmf`,\n      body: {\n        deviceUrl: this.spark.internal.device.url,\n        dtmf: {\n          correlationId: uuid.v4(),\n          tones\n        }\n      }\n    });\n  },\n\n  /**\n   * Fetches the delta for the locus from its syncUrl. *Does not merge*\n   * @instance\n   * @memberof Locus\n   * @param {Types~Locus} locus\n   * @returns {Types~LocusDelta}\n   */\n  sync(locus) {\n    return this.request({\n      method: 'GET',\n      uri: locus.syncUrl\n    })\n      // the api may return a 204 no content, so we'll give back an empty\n      // object in that case.\n      .then((res) => res.body || {});\n  },\n\n  /**\n   * Send a new sdp to Linus via the Locus API to update media state (e.g. to\n   * start or stop sending audio or video)\n   * @instance\n   * @memberof Locus\n   * @param {Types~Locus} locus\n   * @param {Object} options\n   * @param {string} options.localSdp\n   * @param {string} options.mediaId\n   * @param {Boolean} options.audioMuted\n   * @param {Boolean} options.videoMuted\n   * @returns {Promise<Types~Locus>}\n   */\n  updateMedia(locus, {\n    sdp, audioMuted, videoMuted, mediaId\n  }) {\n    const localSdp = {\n      audioMuted,\n      videoMuted\n    };\n    if (sdp) {\n      localSdp.type = 'SDP';\n      localSdp.sdp = sdp;\n    }\n\n    return this.request({\n      method: 'PUT',\n      uri: `${locus.self.url}/media`,\n      body: {\n        deviceUrl: this.spark.internal.device.url,\n        localMedias: [{\n          localSdp: JSON.stringify(localSdp),\n          mediaId\n        }],\n        sequence: locus.sequence\n      }\n    })\n      .then((res) => res.body.locus);\n  }\n});\n\nexport default Locus;\n"]}