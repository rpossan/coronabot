{"version":3,"sources":["teams.js"],"names":["Teams","SparkPlugin","extend","create","team","request","method","service","resource","body","then","res","get","options","id","qs","items","list","Page","spark","update"],"mappings":";;;;;;AAIA;;AAEA;;;;;;;;AAQA;;;AAGA,IAAMA,QAAQC,uBAAYC,MAAZ,CAAmB;AAC/B;;;;;;;;;;;;;;;;;AAiBAC,QAlB+B,kBAkBxBC,IAlBwB,EAkBlB;AACX,WAAO,KAAKC,OAAL,CAAa;AAClBC,cAAQ,MADU;AAElBC,eAAS,OAFS;AAGlBC,gBAAU,OAHQ;AAIlBC,YAAML;AAJY,KAAb,EAMJM,IANI,CAMC,UAACC,GAAD;AAAA,aAASA,IAAIF,IAAb;AAAA,KAND,CAAP;AAOD,GA1B8B;;;AA4B/B;;;;;;;;;;;;;;;;;;;;;AAqBAG,KAjD+B,eAiD3BR,IAjD2B,EAiDrBS,OAjDqB,EAiDZ;AACjB,QAAMC,KAAKV,KAAKU,EAAL,IAAWV,IAAtB;;AAEA,WAAO,KAAKC,OAAL,CAAa;AAClBE,eAAS,OADS;AAElBC,2BAAmBM,EAFD;AAGlBC,UAAIF;AAHc,KAAb,EAKJH,IALI,CAKC,UAACC,GAAD;AAAA,aAASA,IAAIF,IAAJ,CAASO,KAAT,IAAkBL,IAAIF,IAA/B;AAAA,KALD,CAAP;AAMD,GA1D8B;;;AA4D/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BAQ,MA3F+B,gBA2F1BJ,OA3F0B,EA2FjB;AAAA;;AACZ,WAAO,KAAKR,OAAL,CAAa;AAClBE,eAAS,OADS;AAElBC,gBAAU,QAFQ;AAGlBO,UAAIF;AAHc,KAAb,EAKJH,IALI,CAKC,UAACC,GAAD;AAAA,aAAS,IAAIO,eAAJ,CAASP,GAAT,EAAc,MAAKQ,KAAnB,CAAT;AAAA,KALD,CAAP;AAMD,GAlG8B;;;AAoG/B;;;;;;;;;;;;;;;;;;;;;;;;AAyBAC,QA7H+B,kBA6HxBhB,IA7HwB,EA6HlB;AACX,QAAMU,KAAKV,KAAKU,EAAhB;AACA,WAAO,KAAKT,OAAL,CAAa;AAClBC,cAAQ,KADU;AAElBC,eAAS,OAFS;AAGlBC,2BAAmBM,EAHD;AAIlBL,YAAML;AAJY,KAAb,EAMJM,IANI,CAMC,UAACC,GAAD;AAAA,aAASA,IAAIF,IAAb;AAAA,KAND,CAAP;AAOD,GAtI8B;AAAA;AAAA,CAAnB,CAAd,C,CAjBA;;;;kBA0JeT,K","file":"teams.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {SparkPlugin, Page} from '@ciscospark/spark-core';\n\n/**\n * @typedef {Object} TeamObject\n * @property {string} id - (server generated) Unique identifier for the team\n * @property {string} name - The name of the team\n * @property {isoDate} created - (server generated) The date and time that the\n * team was created\n */\n\n/**\n* @class\n */\nconst Teams = SparkPlugin.extend({\n  /**\n   * Create a new team.\n   * @instance\n   * @param {TeamObject} team\n   * @returns {Promise<TeamObject>}\n   * @memberof Teams\n   * @example\n   * ciscospark.teams.create({name: 'Create Team Example'})\n   *   .then(function(team) {\n   *     var assert = require('assert');\n   *     assert(team.id);\n   *     assert(team.name);\n   *     assert(team.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create(team) {\n    return this.request({\n      method: 'POST',\n      service: 'hydra',\n      resource: 'teams',\n      body: team\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Returns a single team\n   * @instance\n   * @param {TeamObject|string} team\n   * @param {Object} options\n   * @returns {Promise<TeamObject>}\n   * @memberof Teams\n   * @example\n   * var team;\n   * ciscospark.teams.create({name: 'Get Team Example'})\n   *   .then(function(r) {\n   *     team = r;\n   *     return ciscospark.teams.get(team.id);\n   *   })\n   *   .then(function(team2) {\n   *     var assert = require('assert');\n   *     assert.equal(team2.id, team.id);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get(team, options) {\n    const id = team.id || team;\n\n    return this.request({\n      service: 'hydra',\n      resource: `teams/${id}`,\n      qs: options\n    })\n      .then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * List teams.\n   * @instance\n   * @param {object} options\n   * @param {object} options.max Limit the maximum number of teams in the\n   * response.\n   * @returns {Promise<Page<TeamObject>>}\n   * @memberof Teams\n   * @example\n   * var createdRooms;\n   * Promise.all([\n   *   ciscospark.teams.create({name: 'List Teams Example 1'}),\n   *   ciscospark.teams.create({name: 'List Teams Example 2'}),\n   *   ciscospark.teams.create({name: 'List Teams Example 3'})\n   * ])\n   *   .then(function(r) {\n   *     createdRooms = r;\n   *     return ciscospark.teams.list({max: 3});\n   *   })\n   *   .then(function(teams) {\n   *     var assert = require('assert');\n   *     assert(teams.length === 3);\n   *     for (var i = 0; i < teams.items.length; i+= 1) {\n   *       assert(createdRooms.filter(function(room) {\n   *         return room.id === teams.items[i].id;\n   *       }).length === 1);\n   *     }\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list(options) {\n    return this.request({\n      service: 'hydra',\n      resource: 'teams/',\n      qs: options\n    })\n      .then((res) => new Page(res, this.spark));\n  },\n\n  /**\n   * Update a team.\n   * @instance\n   * @param {TeamObject} team\n   * @returns {Promise<TeamObject>}\n   * @memberof Teams\n   * @example\n   * var teams;\n   * ciscospark.teams.create({name: 'Update Team Example'})\n   *   .then(function(r) {\n   *     teams = r;\n   *     teams.name = 'Teams Example (Updated Title)';\n   *     return ciscospark.teams.update(teams);\n   *   })\n   *   .then(function() {\n   *     return ciscospark.teams.get(teams.id);\n   *   })\n   *   .then(function(teams) {\n   *     var assert = require('assert');\n   *     assert.equal(teams.name, 'Teams Example (Updated Title)');\n   *     return 'success';\n   *   });\n   *   // => success\n\n   */\n  update(team) {\n    const id = team.id;\n    return this.request({\n      method: 'PUT',\n      service: 'hydra',\n      resource: `teams/${id}`,\n      body: team\n    })\n      .then((res) => res.body);\n  }\n});\n\nexport default Teams;\n"]}