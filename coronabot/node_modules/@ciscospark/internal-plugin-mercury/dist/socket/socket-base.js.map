{"version":3,"sources":["socket-base.js"],"names":["sockets","Socket","onmessage","bind","onclose","options","resolve","reject","logger","info","socket","get","readyState","code","Error","reason","closeTimer","error","warn","forceCloseDelay","event","clearTimeout","close","url","forEach","key","enumerable","value","WebSocket","getWebSocketConstructor","binaryType","_fixCloseCode","UnknownResponse","BadRequest","NotAuthorized","Forbidden","ConnectionError","onopen","_authorize","then","catch","onerror","set","pongTimer","pingTimer","emit","removeAllListeners","data","JSON","parse","sequenceNumber","parseInt","debug","expectedSequenceNumber","processedEvent","_acknowledge","type","send","messageId","id","uuid","v4","token","trackingId","logLevelToken","waitForBufferState","eventType","removeListener","_ping","once","toLowerCase","confirmPongId","onPongNotReceived","scheduleNextPingAndCancelPongTimer","pingInterval","pongTimeout","bufferedAmount","extensions","protocol","EventEmitter"],"mappings":"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","file":"socket-base.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {EventEmitter} from 'events';\nimport {\n  BadRequest,\n  ConnectionError,\n  Forbidden,\n  NotAuthorized,\n  UnknownResponse\n  // NotFound\n} from '../errors';\nimport {checkRequired} from '@ciscospark/common';\nimport {safeSetTimeout} from '@ciscospark/common-timers';\nimport {defaults, has, isObject} from 'lodash';\nimport uuid from 'uuid';\n\nconst sockets = new WeakMap();\n\n/**\n * Generalized socket abstraction\n */\nexport default class Socket extends EventEmitter {\n  /**\n   * constructor\n   * @returns {Socket}\n   */\n  constructor() {\n    super();\n    this.onmessage = this.onmessage.bind(this);\n    this.onclose = this.onclose.bind(this);\n  }\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\n   * @returns {string}\n   */\n  get binaryType() {\n    return sockets.get(this).binaryType;\n  }\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\n   * @returns {number}\n   */\n  get bufferedAmount() {\n    return sockets.get(this).bufferedAmount;\n  }\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\n   * @returns {string}\n   */\n  get extensions() {\n    return sockets.get(this).extensions;\n  }\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\n   * @returns {string}\n   */\n  get protocol() {\n    return sockets.get(this).protocol;\n  }\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\n   * @returns {number}\n   */\n  get readyState() {\n    return sockets.get(this).readyState;\n  }\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\n   * @returns {string}\n   */\n  get url() {\n    return sockets.get(this).url;\n  }\n\n  /**\n   * Provides the environmentally appropriate constructor (ws in NodeJS,\n   * WebSocket in browsers)\n   * @returns {WebSocket}\n   */\n  static getWebSocketConstructor() {\n    throw new Error('Socket.getWebSocketConstructor() must be implemented in an environmentally appropriate way');\n  }\n\n  /**\n   * Closes the socket\n   * @param {Object} options\n   * @param {string} options.reason\n   * @param {number} options.code\n   * @returns {Promise}\n   */\n  close(options) {\n    return new Promise((resolve, reject) => {\n      this.logger.info('socket: closing');\n      const socket = sockets.get(this);\n      if (socket.readyState === 2 || socket.readyState === 3) {\n        this.logger.info('socket: already closed');\n        resolve();\n        return;\n      }\n\n      options = options || {};\n      if (options.code && options.code !== 1000 && (options.code < 3000 || options.code > 4999)) {\n        reject(new Error('`options.code` must be 1000 or between 3000 and 4999 (inclusive)'));\n        return;\n      }\n\n      options = defaults(options, {\n        code: 1000,\n        reason: 'Done'\n      });\n\n      const closeTimer = safeSetTimeout(() => {\n        try {\n          this.logger.info('socket: no close event received, forcing closure');\n          resolve(this.onclose({\n            code: 1000,\n            reason: 'Done (forced)'\n          }));\n        }\n        catch (error) {\n          this.logger.warn('socket: force-close failed', error);\n        }\n      }, this.forceCloseDelay);\n\n      socket.onclose = (event) => {\n        this.logger.info('socket: close event fired', event.code, event.reason);\n        clearTimeout(closeTimer);\n        this.onclose(event);\n        resolve(event);\n      };\n\n      socket.close(options.code, options.reason);\n    });\n  }\n\n  /**\n   * Opens a WebSocket\n   * @param {string} url\n   * @param {options} options\n   * @param {number} options.forceCloseDelay (required)\n   * @param {number} options.pingInterval (required)\n   * @param {number} options.pongTimeout (required)\n   * @param {string} options.token (required)\n   * @param {string} options.trackingId (required)\n   * @param {Logger} options.logger (required)\n   * @param {string} options.logLevelToken\n   * @returns {Promise}\n   */\n  open(url, options) {\n    return new Promise((resolve, reject) => {\n      /* eslint complexity: [0] */\n      if (!url) {\n        reject(new Error('`url` is required'));\n        return;\n      }\n\n      if (sockets.get(this)) {\n        reject(new Error('Socket#open() can only be called once per instance'));\n        return;\n      }\n\n      options = options || {};\n\n      checkRequired([\n        'forceCloseDelay',\n        'pingInterval',\n        'pongTimeout',\n        'token',\n        'trackingId',\n        'logger'\n      ], options);\n\n      Object.keys(options).forEach((key) => {\n        Reflect.defineProperty(this, key, {\n          enumerable: false,\n          value: options[key]\n        });\n      });\n\n      const WebSocket = Socket.getWebSocketConstructor();\n\n      this.logger.info('socket: creating WebSocket');\n      const socket = new WebSocket(url);\n      socket.binaryType = 'arraybuffer';\n      socket.onmessage = this.onmessage;\n\n      socket.onclose = (event) => {\n        event = this._fixCloseCode(event);\n        switch (event.code) {\n          case 1005:\n          // IE 11 doesn't seem to allow 4XXX codes, so if we get a 1005, assume\n          // it's a bad websocket url. That'll trigger a device refresh; if it\n          // turns out we had a bad token, the device refresh should 401 and\n          // trigger a token refresh.\n            return reject(new UnknownResponse(event));\n          case 4400:\n            return reject(new BadRequest(event));\n          case 4401:\n            return reject(new NotAuthorized(event));\n          case 4403:\n            return reject(new Forbidden(event));\n            // case 4404:\n            //   return reject(new NotFound(event));\n          default:\n            return reject(new ConnectionError(event));\n        }\n      };\n\n      socket.onopen = () => {\n        this.logger.info('socket: connected');\n        this._authorize()\n          .then(() => {\n            this.logger.info('socket: authorized');\n            socket.onclose = this.onclose;\n            resolve();\n          })\n          .catch(reject);\n      };\n\n      socket.onerror = (event) => {\n        this.logger.warn('socket: error event fired', event);\n      };\n\n      sockets.set(this, socket);\n      this.logger.info('socket: waiting for server');\n    });\n  }\n\n  /**\n   * Handles incoming CloseEvents\n   * @param {CloseEvent} event\n   * @returns {undefined}\n   */\n  onclose(event) {\n    this.logger.info('socket: closed', event.code, event.reason);\n    clearTimeout(this.pongTimer);\n    clearTimeout(this.pingTimer);\n\n    event = this._fixCloseCode(event);\n    this.emit('close', event);\n\n    // Remove all listeners to (a) avoid reacting to late pongs and (b) ensure\n    // we don't have a retain cycle.\n    this.removeAllListeners();\n  }\n\n  /**\n   * Handles incoming message events\n   * @param {MessageEvent} event\n   * @returns {undefined}\n   */\n  onmessage(event) {\n    try {\n      const data = JSON.parse(event.data);\n      const sequenceNumber = parseInt(data.sequenceNumber, 10);\n      this.logger.debug('socket: sequence number: ', sequenceNumber);\n      if (this.expectedSequenceNumber && sequenceNumber !== this.expectedSequenceNumber) {\n        this.logger.debug(`socket: sequence number mismatch indicates lost mercury message. expected: ${this.expectedSequenceNumber}, actual: ${sequenceNumber}`);\n        this.emit('sequence-mismatch', sequenceNumber, this.expectedSequenceNumber);\n      }\n      this.expectedSequenceNumber = sequenceNumber + 1;\n\n      // Yes, it's a little weird looking; we want to emit message events that\n      // look like normal socket message events, but event.data cannot be\n      // modified and we don't actually care about anything but the data property\n      const processedEvent = {data};\n      this._acknowledge(processedEvent);\n      if (data.type === 'pong') {\n        this.emit('pong', processedEvent);\n      }\n      else {\n        this.emit('message', processedEvent);\n      }\n    }\n    catch (error) {\n      // The above code should only be able to throw if we receive an unparsable\n      // message from Mercury. At this time, the only action we have is to\n      // ignore it and move on.\n      /* istanbul ignore next */\n      this.logger.warn('socket: error while receiving WebSocket message', error);\n    }\n  }\n\n  /**\n   * Sends a message up the socket\n   * @param {mixed} data\n   * @returns {Promise}\n   */\n  send(data) {\n    return new Promise((resolve, reject) => {\n      if (this.readyState !== 1) {\n        return reject(new Error('INVALID_STATE_ERROR'));\n      }\n\n      if (isObject(data)) {\n        data = JSON.stringify(data);\n      }\n\n      const socket = sockets.get(this);\n      socket.send(data);\n      return resolve();\n    });\n  }\n\n  /**\n   * Sends an acknowledgment for a specific event\n   * @param {MessageEvent} event\n   * @returns {Promise}\n   */\n  _acknowledge(event) {\n    if (!event) {\n      return Promise.reject(new Error('`event` is required'));\n    }\n\n    if (!has(event, 'data.id')) {\n      return Promise.reject(new Error('`event.data.id` is required'));\n    }\n\n    return this.send({\n      messageId: event.data.id,\n      type: 'ack'\n    });\n  }\n\n  /**\n   * Sends an auth message up the socket\n   * @private\n   * @returns {Promise}\n   */\n  _authorize() {\n    return new Promise((resolve) => {\n      this.logger.info('socket: authorizing');\n      this.send({\n        id: uuid.v4(),\n        type: 'authorization',\n        data: {\n          token: this.token\n        },\n        trackingId: this.trackingId,\n        logLevelToken: this.logLevelToken\n      });\n\n      const waitForBufferState = (event) => {\n        if (!event.data.type && (event.data.data.eventType === 'mercury.buffer_state' || event.data.data.eventType === 'mercury.registration_status')) {\n          this.removeListener('message', waitForBufferState);\n          this._ping();\n          resolve();\n        }\n      };\n      this.once('message', waitForBufferState);\n    });\n  }\n\n  /**\n   * Deals with the fact that some browsers drop some close codes (but not\n   * close reasons).\n   * @param {CloseEvent} event\n   * @private\n   * @returns {CloseEvent}\n   */\n  _fixCloseCode(event) {\n    if (event.code === 1005 && event.reason) {\n      switch (event.reason.toLowerCase()) {\n        case 'replaced':\n          this.logger.info('socket: fixing CloseEvent code for reason: ', event.reason);\n          event.code = 4000;\n          break;\n        case 'authentication failed':\n        case 'authentication did not happen within the timeout window of 30000 seconds.':\n          this.logger.info('socket: fixing CloseEvent code for reason: ', event.reason);\n          event.code = 1008;\n          break;\n        default:\n        // do nothing\n      }\n    }\n\n    return event;\n  }\n\n  /**\n   * Sends a ping up the socket and confirms we get it back\n   * @param {[type]} id\n   * @private\n   * @returns {[type]}\n   */\n  _ping(id) {\n    const confirmPongId = (event) => {\n      try {\n        this.logger.debug('socket: pong', event.data.id);\n        if (event.data && event.data.id !== id) {\n          this.logger.info('socket: received pong for wrong ping id, closing socket');\n          this.logger.debug('socket: expected', id, 'received', event.data.id);\n          this.close({\n            code: 1000,\n            reason: 'Pong mismatch'\n          });\n        }\n      }\n      catch (error) {\n        // This try/catch block was added as a debugging step; to the best of my\n        // knowledge, the above can never throw.\n        /* istanbul ignore next */\n        this.logger.error('socket: error occurred in confirmPongId', error);\n      }\n    };\n\n    const onPongNotReceived = () => {\n      try {\n        this.logger.info('socket: pong not receive in expected period, closing socket');\n        this.close({\n          code: 1000,\n          reason: 'Pong not received'\n        })\n          .catch((reason) => {\n            this.logger.warn('socket: failed to close socket after missed pong', reason);\n          });\n      }\n      catch (error) {\n        // This try/catch block was added as a debugging step; to the best of my\n        // knowledge, the above can never throw.\n        /* istanbul ignore next */\n        this.logger.error('socket: error occurred in onPongNotReceived', error);\n      }\n    };\n\n    const scheduleNextPingAndCancelPongTimer = () => {\n      try {\n        clearTimeout(this.pongTimer);\n        this.pingTimer = safeSetTimeout(() => this._ping(), this.pingInterval);\n      }\n      catch (error) {\n        // This try/catch block was added as a debugging step; to the best of my\n        // knowledge, the above can never throw.\n        /* istanbul ignore next */\n        this.logger.error('socket: error occurred in scheduleNextPingAndCancelPongTimer', error);\n      }\n    };\n\n    id = id || uuid.v4();\n    this.pongTimer = safeSetTimeout(onPongNotReceived, this.pongTimeout);\n    this.once('pong', scheduleNextPingAndCancelPongTimer);\n    this.once('pong', confirmPongId);\n\n    this.logger.debug(`socket: ping ${id}`);\n    return this.send({\n      id,\n      type: 'ping'\n    });\n  }\n}\n"]}