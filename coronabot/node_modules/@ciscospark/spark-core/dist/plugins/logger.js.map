{"version":3,"sources":["logger.js"],"names":["precedence","error","warn","info","debug","trace","wrapConsoleMethod","level","impls","slice","console","pop","wrappedConsoleMethod","args","process","env","NODE_ENV","spark","internal","device","url","unshift","Logger","SparkPlugin","extend","namespace","log"],"mappings":";;;;;;AAIA;;;;AACA;;;;AALA;;;;AAOA,IAAMA,aAAa;AACjBC,SAAO,CAAC,KAAD,CADU;AAEjBC,QAAM,CAAC,OAAD,EAAU,KAAV,CAFW;AAGjBC,QAAM,CAAC,KAAD,CAHW;AAIjBC,SAAO,CAAC,MAAD,EAAS,KAAT,CAJU;AAKjBC,SAAO,CAAC,OAAD,EAAU,MAAV,EAAkB,KAAlB;AALU,CAAnB;;AAQA;;;;;;;AAOA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAChC;AACA,MAAIC,QAAQR,WAAWO,KAAX,CAAZ;AACA,MAAIC,KAAJ,EAAW;AACTA,YAAQA,MAAMC,KAAN,EAAR;AACA,WAAO,CAACC,QAAQH,KAAR,CAAR,EAAwB;AACtBA,cAAQC,MAAMG,GAAN,EAAR;AACD;AACF;;AAED,SAAO,SAASC,oBAAT,GAAuC;AAAA;;AAAA,sCAANC,IAAM;AAANA,UAAM;AAAA;;AAC5C;AACA;AACA,QAAIC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,MAAzB,IAAmC,KAAKC,KAAxC,IAAiD,KAAKA,KAAL,CAAWC,QAAX,CAAoBC,MAArE,IAA+E,KAAKF,KAAL,CAAWC,QAAX,CAAoBC,MAApB,CAA2BC,GAA9G,EAAmH;AACjHP,WAAKQ,OAAL,CAAa,KAAKJ,KAAL,CAAWC,QAAX,CAAoBC,MAApB,CAA2BC,GAA3B,CAA+BX,KAA/B,CAAqC,CAAC,CAAtC,CAAb;AACD;AACD,yBAAQF,KAAR,kBAAkBM,IAAlB;AACD,GAPD;AAQD;;AAED,IAAMS,SAASC,sBAAYC,MAAZ,CAAmB;AAChCC,aAAW,QADqB;AAEhCxB,SAAOK,kBAAkB,OAAlB,CAFyB;AAGhCJ,QAAMI,kBAAkB,MAAlB,CAH0B;AAIhCoB,OAAKpB,kBAAkB,KAAlB,CAJ2B;AAKhCH,QAAMG,kBAAkB,MAAlB,CAL0B;AAMhCF,SAAOE,kBAAkB,OAAlB,CANyB;AAOhCD,SAAOC,kBAAkB,OAAlB,CAPyB;AAAA;AAAA,CAAnB,CAAf;;AAUA,+BAAe,QAAf,EAAyBgB,MAAzB;;kBAEeA,M","file":"logger.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport SparkPlugin from '../lib/spark-plugin';\nimport {registerPlugin} from '../spark-core';\n\nconst precedence = {\n  error: ['log'],\n  warn: ['error', 'log'],\n  info: ['log'],\n  debug: ['info', 'log'],\n  trace: ['debug', 'info', 'log']\n};\n\n/**\n * Assigns the specified console method to Logger; uses `precedence` to fallback\n * to other console methods if the current environment doesn't provide the\n * specified level.\n * @param {string} level\n * @returns {Function}\n */\nfunction wrapConsoleMethod(level) {\n  /* eslint no-console: [0] */\n  let impls = precedence[level];\n  if (impls) {\n    impls = impls.slice();\n    while (!console[level]) {\n      level = impls.pop();\n    }\n  }\n\n  return function wrappedConsoleMethod(...args) {\n    /* eslint no-invalid-this: [0] */\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV === 'test' && this.spark && this.spark.internal.device && this.spark.internal.device.url) {\n      args.unshift(this.spark.internal.device.url.slice(-3));\n    }\n    console[level](...args);\n  };\n}\n\nconst Logger = SparkPlugin.extend({\n  namespace: 'Logger',\n  error: wrapConsoleMethod('error'),\n  warn: wrapConsoleMethod('warn'),\n  log: wrapConsoleMethod('log'),\n  info: wrapConsoleMethod('info'),\n  debug: wrapConsoleMethod('debug'),\n  trace: wrapConsoleMethod('trace')\n});\n\nregisterPlugin('logger', Logger);\n\nexport default Logger;\n"]}