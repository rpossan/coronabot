'use strict';

/* jshint ignore:start */
/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */
/* jshint ignore:end */

var Q = require('q');  /* jshint ignore:line */
var _ = require('lodash');  /* jshint ignore:line */
var Page = require('../../../../base/Page');  /* jshint ignore:line */
var deserialize = require(
    '../../../../base/deserialize');  /* jshint ignore:line */
var values = require('../../../../base/values');  /* jshint ignore:line */

var VerificationList;
var VerificationPage;
var VerificationInstance;

/* jshint ignore:start */
/**
 * @description Initialize the VerificationList
 * PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
 *
 * @param {Twilio.Verify.V1} version - Version of the resource
 * @param {string} serviceSid - Service Sid.
 */
/* jshint ignore:end */
VerificationList = function VerificationList(version, serviceSid) {
  /* jshint ignore:start */
  /**
   * @param {string} sid - sid of instance
   *
   * @returns {Twilio.Verify.V1.ServiceContext.VerificationContext}
   */
  /* jshint ignore:end */
  function VerificationListInstance(sid) {
    return VerificationListInstance.get(sid);
  }

  VerificationListInstance._version = version;
  // Path Solution
  VerificationListInstance._solution = {serviceSid: serviceSid};
  VerificationListInstance._uri = _.template(
    '/Services/<%= serviceSid %>/Verifications' // jshint ignore:line
  )(VerificationListInstance._solution);
  /* jshint ignore:start */
  /**
   * create a VerificationInstance
   *
   * @param {object} opts - Options for request
   * @param {string} opts.to - To phonenumber
   * @param {string} opts.channel - sms or call
   * @param {string} [opts.customMessage] - A custom message for this verification
   * @param {string} [opts.sendDigits] - Digits to send when a phone call is started
   * @param {string} [opts.locale] - Locale used in the sms or call.
   * @param {string} [opts.customCode] - A pre-generated code
   * @param {function} [callback] - Callback to handle processed record
   *
   * @returns {Promise} Resolves to processed VerificationInstance
   */
  /* jshint ignore:end */
  VerificationListInstance.create = function create(opts, callback) {
    if (_.isUndefined(opts)) {
      throw new Error('Required parameter "opts" missing.');
    }
    if (_.isUndefined(opts.to)) {
      throw new Error('Required parameter "opts.to" missing.');
    }
    if (_.isUndefined(opts.channel)) {
      throw new Error('Required parameter "opts.channel" missing.');
    }

    var deferred = Q.defer();
    var data = values.of({
      'To': _.get(opts, 'to'),
      'Channel': _.get(opts, 'channel'),
      'CustomMessage': _.get(opts, 'customMessage'),
      'SendDigits': _.get(opts, 'sendDigits'),
      'Locale': _.get(opts, 'locale'),
      'CustomCode': _.get(opts, 'customCode')
    });

    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});

    promise = promise.then(function(payload) {
      deferred.resolve(new VerificationInstance(this._version, payload));
    }.bind(this));

    promise.catch(function(error) {
      deferred.reject(error);
    });

    if (_.isFunction(callback)) {
      deferred.promise.nodeify(callback);
    }

    return deferred.promise;
  };

  return VerificationListInstance;
};


/* jshint ignore:start */
/**
 * Initialize the VerificationPagePLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
 *
 * @param {V1} version - Version of the resource
 * @param {Response<string>} response - Response from the API
 * @param {VerificationSolution} solution - Path solution
 *
 * @returns VerificationPage
 */
/* jshint ignore:end */
VerificationPage = function VerificationPage(version, response, solution) {
  // Path Solution
  this._solution = solution;

  Page.prototype.constructor.call(this, version, response, this._solution);
};

_.extend(VerificationPage.prototype, Page.prototype);
VerificationPage.prototype.constructor = VerificationPage;

/* jshint ignore:start */
/**
 * Build an instance of VerificationInstance
 *
 * @param {VerificationPayload} payload - Payload response from the API
 *
 * @returns VerificationInstance
 */
/* jshint ignore:end */
VerificationPage.prototype.getInstance = function getInstance(payload) {
  return new VerificationInstance(this._version, payload, this._solution.serviceSid);
};


/* jshint ignore:start */
/**
 * Initialize the VerificationContextPLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
 *
 * @property {string} sid - A string that uniquely identifies this Verification.
 * @property {string} serviceSid - Service Sid.
 * @property {string} accountSid - Account Sid.
 * @property {string} to - To phonenumber
 * @property {verification.channel} channel - sms or call
 * @property {string} status - pending, approved, denied or expired
 * @property {boolean} valid - successful verification
 * @property {Date} dateCreated - The date this Verification was created
 * @property {Date} dateUpdated - The date this Verification was updated
 *
 * @param {V1} version - Version of the resource
 * @param {VerificationPayload} payload - The instance payload
 * @param {sid} serviceSid - Service Sid.
 */
/* jshint ignore:end */
VerificationInstance = function VerificationInstance(version, payload,
                                                      serviceSid) {
  this._version = version;

  // Marshaled Properties
  this.sid = payload.sid; // jshint ignore:line
  this.serviceSid = payload.service_sid; // jshint ignore:line
  this.accountSid = payload.account_sid; // jshint ignore:line
  this.to = payload.to; // jshint ignore:line
  this.channel = payload.channel; // jshint ignore:line
  this.status = payload.status; // jshint ignore:line
  this.valid = payload.valid; // jshint ignore:line
  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line
  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line

  // Context
  this._context = undefined;
  this._solution = {serviceSid: serviceSid, };
};

/* jshint ignore:start */
/**
 * Produce a plain JSON object version of the VerificationInstance for serialization.
 * Removes any circular references in the object.
 *
 * @returns Object
 */
/* jshint ignore:end */
VerificationInstance.prototype.toJSON = function toJSON() {
  let clone = {};
  _.forOwn(this, function(value, key) {
    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {
      clone[key] = value;
    }
  });
  return clone;
};

module.exports = {
  VerificationList: VerificationList,
  VerificationPage: VerificationPage,
  VerificationInstance: VerificationInstance
};
